{"version":3,"sources":["angular-pure-datepicker.js"],"names":["angular","module","run","$templateCache","put","apd","directive","DayOfWeek","name","short","this","DaysOfWeek","days","_this","getListOfShorts","result","i","list","length","dayOfWeek","push","getListOfNames","getDayOfWeekShortName","dayNum","shorts","getDayOfWeekName","names","daysOfWeek","DateUtilsFactory","MessagesFactory","restrict","replace","templateUrl","scope","ngModel","apdStart","apdEnd","apdDayId","apdMonthId","apdYearId","apdDayClasses","apdMonthClasses","apdYearClasses","link","init","settings","initDateModel","getDateModel","startDateTime","endDateTime","_initData","startWatchDay","startWatchMonth","startWatchYear","data","getData","selected","updateModel","datetime","$watch","day","oldValue","getDateTime","month","year","isCorrectDay","getDaysInMonth","throwInvalidParamsMessage","Date","getTime","daysInMonth","messages","MessagesFactoryClass","wrongInstance","invalidParams","invalidDateModel","throwDeveloperError","message","console","error","prototype","throwModelValidationMessage","field","throwWrongInstanceMessage","factory","dateUtils","DateModelClass","date","getDate","getDay","getMonth","getFullYear","timezone","getTimezoneOffset","DataClass","_getSelected","isBiggerThenStart","isEqualToStart","isLowerThenEnd","isEqualToEnd","_getDefaultDaysList","daysCount","_getIntArr","_getDefaultMonthList","_getArrayOfNumbers","_getDefaultYearsList","yearsCount","curYear","direction","_intArraySort","arr","desc","a","b","sort","start","end","_getFullYear","_getMonth","_getDay","_getNumList","timeFunc","callback","concat","self","years","bind","call","exports","validateModel","model","isValidModel"],"mappings":"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","file":"angular-pure-datepicker.min.js","sourcesContent":["angular.module(\"angular-pd.templates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"apd.html\",\"<div class=apd_root><select ng-model=data.selected.day ng-options=\\\"day for day in data.days\\\" ng-init=\\\"data.selected.day = data.days[0]\\\" id={{::apdDayId}} class=\\\"apd_elem apd_select_day apd_select {{::apdDayClasses}}\\\"></select><span title={{getDayOfWeekName(data.selected.dayOfWeek)}} ng-bind=getDayOfWeekShortName(data.selected.dayOfWeek) class=\\\"apd_elem apd_day_of_week\\\"></span><select ng-model=data.selected.month ng-options=\\\"(month + 1) for month in data.month\\\" ng-init=\\\"data.selected.month = data.month[0]\\\" id={{::apdMonthId}} class=\\\"apd_elem apd_select_month apd_select {{::apdMonthClasses}}\\\"></select><select ng-model=data.selected.year ng-options=\\\"year for year in data.years\\\" ng-init=\\\"data.selected.year = data.years[0]\\\" id={{::apdYearId}} class=\\\"apd_elem apd_select_year apd_select {{::apdYearClasses}}\\\"></select></div>\");}]);\n//module apd.main {\n//    'use strict';\nangular.module('angular-pd', [\n    'angular-pd.datepicker',\n    'angular-pd.date_utils',\n    'angular-pd.messages'\n]);\n//} \n\n/// <reference path=\"main.ts\" />\n//TODO (S.Panfilov)  is this references necessary?\nvar apd;\n(function (apd) {\n    var directive;\n    (function (directive) {\n        'use strict';\n        var DayOfWeek = (function () {\n            function DayOfWeek(name, short) {\n                if (!(this instanceof DayOfWeek)) {\n                }\n                this.name = name;\n                this.short = short;\n                return this;\n            }\n            return DayOfWeek;\n        })();\n        var DaysOfWeek = (function () {\n            function DaysOfWeek(days) {\n                var _this = this;\n                this.getListOfShorts = function () {\n                    var result = [];\n                    for (var i = 0; i < _this.list.length; i++) {\n                        var dayOfWeek = _this.list[i];\n                        result.push(dayOfWeek.short);\n                    }\n                    return result;\n                };\n                this.getListOfNames = function () {\n                    var result = [];\n                    for (var i = 0; i < _this.list.length; i++) {\n                        var dayOfWeek = _this.list[i];\n                        result.push(dayOfWeek.name);\n                    }\n                    return result;\n                };\n                this.getDayOfWeekShortName = function (dayNum) {\n                    return _this.shorts[dayNum];\n                };\n                this.getDayOfWeekName = function (dayNum) {\n                    return _this.names[dayNum];\n                };\n                if (!(this instanceof DaysOfWeek)) {\n                }\n                this.list = days;\n                this.shorts = this.getListOfShorts();\n                this.names = this.getListOfNames();\n                return this;\n            }\n            return DaysOfWeek;\n        })();\n        var daysOfWeek = new DaysOfWeek([\n            new DayOfWeek('Sunday', 'Sun'),\n            new DayOfWeek('Monday', 'Mon'),\n            new DayOfWeek('Tuesday', 'Tue'),\n            new DayOfWeek('Wednesday', 'Wed'),\n            new DayOfWeek('Thursday', 'Thu'),\n            new DayOfWeek('Friday', 'Fri'),\n            new DayOfWeek('Saturday', 'Sat')\n        ]);\n        angular.module('angular-pd.datepicker', [\n            'angular-pd.templates'\n        ]).directive('pureDatepicker', ['DateUtilsFactory', 'MessagesFactory', function (DateUtilsFactory, MessagesFactory) {\n            return {\n                restrict: 'E',\n                replace: true,\n                templateUrl: 'apd.html',\n                scope: {\n                    ngModel: '=',\n                    apdStart: '=?',\n                    apdEnd: '=?',\n                    apdDayId: '@?',\n                    apdMonthId: '@?',\n                    apdYearId: '@?',\n                    apdDayClasses: '@?',\n                    apdMonthClasses: '@?',\n                    apdYearClasses: '@?'\n                },\n                link: function (scope) {\n                    var settings = {\n                        initDateModel: null,\n                        startDateTime: null,\n                        endDateTime: null\n                    };\n                    function init() {\n                        settings.initDateModel = DateUtilsFactory.getDateModel(scope.ngModel);\n                        settings.startDateTime = (scope.apdStart) ? +scope.apdStart : null;\n                        settings.endDateTime = (scope.apdEnd) ? +scope.apdEnd : null;\n                        _initData(settings.initDateModel, settings.startDateTime, settings.endDateTime);\n                        scope.getDayOfWeekShortName = daysOfWeek.getDayOfWeekShortName;\n                        scope.getDayOfWeekName = daysOfWeek.getDayOfWeekName;\n                        startWatchDay();\n                        startWatchMonth();\n                        startWatchYear();\n                    }\n                    init();\n                    //TODO (S.Panfilov) missed type checking for a apd.dateUtils.DateModel\n                    function _initData(initDateModel, startDateTime, endDateTime) {\n                        scope.data = DateUtilsFactory.getData(initDateModel, startDateTime, endDateTime);\n                        scope.ngModel = scope.data.selected;\n                    }\n                    function updateModel(datetime) {\n                        scope.data.selected = DateUtilsFactory.getDateModel(datetime);\n                        scope.ngModel = scope.data.selected;\n                    }\n                    //scope.$watch('ngModel.datetime', function (value, oldValue) {\n                    //    if (value === oldValue) {\n                    //        return;\n                    //    }\n                    //\n                    //    _initData(settings.initDateModel, settings.startDateTime, settings.endDateTime);\n                    //}, true);\n                    function startWatchDay() {\n                        scope.$watch('data.selected.day', function (day, oldValue) {\n                            if (!day)\n                                return;\n                            if (day === oldValue)\n                                return;\n                            var datetime = getDateTime(scope.data.selected.day, scope.data.selected.month, scope.data.selected.year);\n                            updateModel(datetime);\n                        });\n                    }\n                    function startWatchMonth() {\n                        scope.$watch('data.selected.month', function (month, oldValue) {\n                            if (!month && month !== 0)\n                                return;\n                            if (month === oldValue)\n                                return;\n                            var datetime;\n                            var year = scope.data.selected.year;\n                            var day = scope.data.selected.day;\n                            if (!isCorrectDay(day, month, year)) {\n                                day = scope.data.getDaysInMonth(month, year);\n                            }\n                            datetime = getDateTime(day, month, year);\n                            updateModel(datetime);\n                        });\n                    }\n                    function startWatchYear() {\n                        scope.$watch('data.selected.year', function (year, oldValue) {\n                            if (!year && year !== 0)\n                                return;\n                            if (year === oldValue)\n                                return;\n                            var datetime;\n                            var month = scope.data.selected.month;\n                            var day = scope.data.selected.day;\n                            if (!isCorrectDay(day, month, year)) {\n                                day = scope.data.getDaysInMonth(year, year);\n                            }\n                            datetime = getDateTime(day, month, year);\n                            updateModel(datetime);\n                        });\n                    }\n                    function getDateTime(day, month, year) {\n                        if (!day || (!month && month !== 0) || !year) {\n                            MessagesFactory.throwInvalidParamsMessage();\n                        }\n                        return new Date(year, month, day).getTime();\n                    }\n                    function isCorrectDay(day, month, year) {\n                        var daysInMonth = scope.data.getDaysInMonth(month, year);\n                        return day <= daysInMonth;\n                    }\n                }\n            };\n        }]);\n    })(directive = apd.directive || (apd.directive = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var messages;\n    (function (messages) {\n        'use strict';\n        var MessagesFactoryClass = (function () {\n            function MessagesFactoryClass() {\n                this.messages = {\n                    wrongInstance: 'Class created without \\'new\\', wrong \\'this\\'',\n                    invalidParams: 'Invalid params',\n                    invalidDateModel: 'Invalid date model'\n                };\n                this.throwDeveloperError = function (message) {\n                    console.error(message);\n                };\n            }\n            MessagesFactoryClass.prototype.throwModelValidationMessage = function (field) {\n                //TODO (S.Panfilov) possibly problems with this\n                this.throwDeveloperError(this.messages.invalidDateModel + ': error on field \\\"' + field + '+\\\"');\n            };\n            MessagesFactoryClass.prototype.throwInvalidParamsMessage = function () {\n                //TODO (S.Panfilov) possibly problems with this\n                this.throwDeveloperError(this.messages.invalidParams);\n            };\n            MessagesFactoryClass.prototype.throwWrongInstanceMessage = function () {\n                //TODO (S.Panfilov) possibly problems with this\n                this.throwDeveloperError(this.messages.wrongInstance);\n            };\n            return MessagesFactoryClass;\n        })();\n        angular.module('angular-pd.messages', []).factory('MessagesFactory', function () {\n            return new MessagesFactoryClass();\n        });\n    })(messages = apd.messages || (apd.messages = {}));\n})(apd || (apd = {}));\n\n/// <reference path=\"messages.ts\" />\nvar apd;\n(function (apd) {\n    var dateUtils;\n    (function (dateUtils) {\n        'use strict';\n        var DateModelClass = (function () {\n            function DateModelClass(datetime) {\n                if (!(this instanceof DateModelClass)) {\n                }\n                var date = new Date();\n                this.day = date.getDate();\n                this.dayOfWeek = date.getDay();\n                this.month = date.getMonth();\n                this.year = date.getFullYear();\n                this.datetime = datetime;\n                this.timezone = date.getTimezoneOffset();\n                return this;\n            }\n            return DateModelClass;\n        })();\n        var DataClass = (function () {\n            function DataClass(selected, startDateTime, endDateTime) {\n                this._getSelected = function (selected, startDateTime, endDateTime) {\n                    var result;\n                    var isBiggerThenStart = (selected.datetime > startDateTime);\n                    var isEqualToStart = (selected.datetime === startDateTime);\n                    var isLowerThenEnd = (selected.datetime > endDateTime);\n                    var isEqualToEnd = (selected.datetime === endDateTime);\n                    //start == 1; selected == 1 or 2 or 3; end == 3;\n                    if ((isBiggerThenStart || isEqualToStart) && (isLowerThenEnd || isEqualToEnd)) {\n                        result = new DateModelClass(selected.datetime);\n                    }\n                    else \n                    //start == 1; selected == 0\n                    if (!isBiggerThenStart) {\n                        result = new DateModelClass(startDateTime);\n                    }\n                    //selected == 4; end == 3;\n                    if (!isBiggerThenStart) {\n                        result = new DateModelClass(endDateTime);\n                    }\n                    else {\n                        result = new DateModelClass(new Date().getTime());\n                    }\n                    return result;\n                };\n                this._getDefaultDaysList = function (month, year) {\n                    var daysCount = this.getDaysInMonth(month, year);\n                    return this._getIntArr(daysCount);\n                };\n                this._getDefaultMonthList = function () {\n                    return this._getArrayOfNumbers(0, 11);\n                };\n                this._getDefaultYearsList = function () {\n                    var yearsCount = 20;\n                    var curYear = new Date().getFullYear();\n                    var direction = 'desc';\n                    return this._intArraySort(this._getArrayOfNumbers(curYear - (yearsCount - 1), curYear), direction);\n                };\n                this._intArraySort = function (arr, direction) {\n                    if (direction === void 0) { direction = 'asc'; }\n                    function desc(a, b) {\n                        return b - a;\n                    }\n                    switch (direction) {\n                        default:\n                            return arr.sort(function (a, b) {\n                                return a - b;\n                            });\n                        case \"desc\":\n                            return arr.sort(desc);\n                    }\n                };\n                this._getArrayOfNumbers = function (start, end) {\n                    var result = [];\n                    for (var i = start; i <= end; i++) {\n                        result.push(i);\n                    }\n                    return result;\n                };\n                this._getFullYear = function (date) {\n                    return date.getFullYear();\n                };\n                this._getMonth = function (date) {\n                    return date.getMonth();\n                };\n                this._getDay = function (date) {\n                    return date.getDate();\n                };\n                //TODO (S.Panfilov) not any, but functions types\n                this._getNumList = function (startDateTime, endDateTime, timeFunc, callback) {\n                    var result = [];\n                    var start;\n                    var end;\n                    //start = 2011, end = 2014\n                    if ((startDateTime && endDateTime) && (startDateTime < endDateTime)) {\n                        start = timeFunc(new Date(startDateTime));\n                        end = timeFunc(new Date(endDateTime));\n                        result = this._getArrayOfNumbers(start, end);\n                    }\n                    else if ((startDateTime && endDateTime) && (startDateTime > endDateTime)) {\n                        start = timeFunc(new Date(endDateTime));\n                        end = timeFunc(new Date(startDateTime));\n                        //TODO (S.Panfilov) throw warning here, that dates inverted\n                        //apd.messages.MessagesFactoryClass.throwMessage('asdsadasd');\n                        result = this._getArrayOfNumbers(start, end);\n                    }\n                    else if ((startDateTime && endDateTime) && (startDateTime === endDateTime)) {\n                        start = timeFunc(new Date(startDateTime));\n                        result = this._getArrayOfNumbers(start, start);\n                    }\n                    else if (startDateTime && !endDateTime) {\n                        start = timeFunc(new Date(startDateTime));\n                        result = this._getArrayOfNumbers(start, start);\n                    }\n                    else if (!startDateTime && endDateTime) {\n                        end = timeFunc(new Date(endDateTime));\n                        result = this._getArrayOfNumbers(end, end);\n                    }\n                    else if (!startDateTime && !endDateTime) {\n                        if (callback)\n                            return callback(timeFunc);\n                    }\n                    return result;\n                };\n                this._getIntArr = function (length) {\n                    if (!length && length !== 0) {\n                        //apd.messages.MessagesFactoryClass.throwInvalidParamsMessage();\n                        return false;\n                    }\n                    return length ? this._getIntArr(length - 1).concat(length) : [];\n                };\n                this.getDaysInMonth = function (month, year) {\n                    return new Date(year, month + 1, 0).getDate();\n                };\n                if (!(this instanceof DataClass)) {\n                }\n                var self = this;\n                self.years = self._getNumList(startDateTime, endDateTime, self._getFullYear, self._getDefaultYearsList.bind(self));\n                self.month = self._getNumList(startDateTime, endDateTime, self._getMonth, self._getDefaultMonthList.bind(self));\n                self.selected = self._getSelected(selected, startDateTime, endDateTime);\n                self.days = self._getNumList(startDateTime, endDateTime, self._getDay, function () {\n                    return self._getDefaultDaysList.call(self, self.selected.month, self.selected.year);\n                });\n                return this;\n            }\n            return DataClass;\n        })();\n        angular.module('angular-pd.date_utils', []).factory('DateUtilsFactory', function () {\n            function preserveModelValues(model) {\n                for (var value in model) {\n                    if (model.hasOwnProperty(value)) {\n                        model[value] = +model[value];\n                    }\n                }\n                return model;\n            }\n            var exports = {\n                getData: function (selected, startDateTime, endDateTime) {\n                    return new DataClass(selected, startDateTime, endDateTime);\n                },\n                validateModel: function (model) {\n                    return (model && model.datetime);\n                },\n                getDateModel: function (model) {\n                    var isValidModel = exports.validateModel(model);\n                    if (isValidModel) {\n                        return new DateModelClass(model.datetime);\n                    }\n                    else {\n                        return new DateModelClass(new Date().getTime());\n                    }\n                }\n            };\n            return exports;\n        });\n    })(dateUtils = apd.dateUtils || (apd.dateUtils = {}));\n})(apd || (apd = {}));\n"],"sourceRoot":"/source/"}