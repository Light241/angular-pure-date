{"version":3,"sources":["angular-pure-datepicker.js"],"names":["angular","module","run","$templateCache","put","apd","Model","MonthClass","month","_this","this","_setDefault","getName","monthNum","DaysClass","days","dayNum","LimitDatesClass","startDateTime","endDateTime","isUTC","_setStartDate","datetime","startDate","day","DateUtilsClass","getDay","_isUTC","getMonth","year","getYear","_setEndDate","endDate","_setNowDate","Date","getTime","nowDate","isDateUpperStartLimit","startLimitTime","isDateLowerEndLimit","endLimitTime","isDateBetweenLimits","DataClass","selected","yearsListDirection","monthListDirection","daysListDirection","isValidNumber","num","isNumber","isNaN","isNotInfinity","isFinite","_getSelected","result","isBiggerThenStart","isEqualToStart","isLowerThenEnd","isEqualToEnd","DateModelClass","_intArraySort","arr","direction","desc","a","b","sort","_getArrayOfNumbers","start","end","i","push","reloadYearsList","years","_getYearsList","_startDateTime","_endDateTime","_limitDates","limitDates","DEFAULT_YEARS_COUNT","now","selectedYear","latestPossibleYear","firstPossibleYear","reloadMonthList","_getMonthList","START_MONTH","END_MONTH","isYearOfLowerLimit","isYearOfUpperLimit","reloadDaysList","selectedMonth","_getDaysList","START_DAY","lastDayInMonth","getDaysInMonth","isMonthOfLowerLimit","isMonthOfUpperLimit","isLowerLimit","isUpperLimit","_getIntArr","length","concat","self","getDate","getVal","method","date","call","prototype","getUTCDate","getDayOfWeek","getUTCDay","getUTCFullYear","getFullYear","getUTCMonth","dayOfWeek","timezone","getTimezoneOffset","validate","model","directive","restrict","replace","templateUrl","scope","ngModel","apdStart","apdEnd","apdDayId","apdMonthId","apdYearId","apdDayClasses","apdMonthClasses","apdYearClasses","apdLocalization","apdIsUtc","link","getLimitSafeDatetime","settings","updateModel","ngModelWatcher","stop","data","onModelChange","oldValue","getInitDateModel","initDatetime","isInitModelValid","limitSafeDatetime","_initData","initDateModel","handler","callback","$watch","value","MessagesFactoryClass","throwInvalidParamsMessage","onDaySelectChanged","onMonthSelectChanged","onYearSelectChanged","localization","week","getDayName","getMonthName"],"mappings":"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","file":"angular-pure-datepicker.min.js","sourcesContent":["angular.module(\"angular-pd.templates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"apd.html\",\"<div class=apd_root><select ng-model=data.selected.day ng-options=\\\"day for day in data.days\\\" ng-init=\\\"data.selected.day = data.days[0]\\\" ng-change=onDaySelectChanged(data.selected.day) id={{::apdDayId}} class=\\\"apd_elem apd_select_day apd_select {{::apdDayClasses}}\\\"></select><span ng-bind=getDayName(data.selected.dayOfWeek) class=\\\"apd_elem apd_day_of_week\\\"></span><select ng-model=data.selected.month ng-options=\\\"getMonthName(month) for month in data.month\\\" ng-init=\\\"data.selected.month = data.month[0]\\\" ng-change=onMonthSelectChanged(data.selected.month) id={{::apdMonthId}} class=\\\"apd_elem apd_select_month apd_select {{::apdMonthClasses}}\\\"></select><select ng-model=data.selected.year ng-options=\\\"year for year in data.years\\\" ng-init=\\\"data.selected.year = data.years[0]\\\" ng-change=onYearSelectChanged(data.selected.year) id={{::apdYearId}} class=\\\"apd_elem apd_select_year apd_select {{::apdYearClasses}}\\\"></select></div>\");}]);\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var MonthClass = (function () {\n            function MonthClass(month) {\n                var _this = this;\n                this._setDefault = function () {\n                    return new MonthClass(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']);\n                };\n                this.getName = function (monthNum) {\n                    return _this.month[monthNum];\n                };\n                if (month) {\n                    this.month = month;\n                    return this;\n                }\n                else {\n                    return this._setDefault();\n                }\n            }\n            return MonthClass;\n        })();\n        Model.MonthClass = MonthClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var DaysClass = (function () {\n            function DaysClass(days) {\n                var _this = this;\n                this._setDefault = function () {\n                    return new DaysClass(['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']);\n                };\n                this.getName = function (dayNum) {\n                    return _this.days[dayNum];\n                };\n                if (days) {\n                    this.days = days;\n                    return this;\n                }\n                else {\n                    return this._setDefault();\n                }\n            }\n            return DaysClass;\n        })();\n        Model.DaysClass = DaysClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var LimitDatesClass = (function () {\n            function LimitDatesClass(startDateTime, endDateTime, isUTC) {\n                this._setStartDate = function (datetime) {\n                    this.startDate.day = apd.Model.DateUtilsClass.getDay(datetime, this._isUTC);\n                    this.startDate.month = apd.Model.DateUtilsClass.getMonth(datetime, this._isUTC);\n                    this.startDate.year = apd.Model.DateUtilsClass.getYear(datetime, this._isUTC);\n                    this.startDate.datetime = datetime;\n                    return this;\n                };\n                this._setEndDate = function (datetime) {\n                    this.endDate.day = apd.Model.DateUtilsClass.getDay(datetime, this._isUTC);\n                    this.endDate.month = apd.Model.DateUtilsClass.getMonth(datetime, this._isUTC);\n                    this.endDate.year = apd.Model.DateUtilsClass.getYear(datetime, this._isUTC);\n                    this.endDate.datetime = datetime;\n                    return this;\n                };\n                this._setNowDate = function () {\n                    var datetime = new Date().getTime();\n                    this.nowDate.day = apd.Model.DateUtilsClass.getDay(datetime, this._isUTC);\n                    this.nowDate.month = apd.Model.DateUtilsClass.getMonth(datetime, this._isUTC);\n                    this.nowDate.year = apd.Model.DateUtilsClass.getYear(datetime, this._isUTC);\n                    this.nowDate.datetime = datetime;\n                    return this;\n                };\n                this._isUTC = isUTC;\n                this.startDate = { day: null, month: null, year: null, datetime: null };\n                this.endDate = { day: null, month: null, year: null, datetime: null };\n                this.nowDate = { day: null, month: null, year: null, datetime: null };\n                this._setStartDate(startDateTime);\n                this._setEndDate(endDateTime);\n                this._setNowDate();\n            }\n            LimitDatesClass.isDateUpperStartLimit = function (datetime, startLimitTime) {\n                if (!startLimitTime)\n                    return true;\n                return (datetime > startLimitTime);\n            };\n            LimitDatesClass.isDateLowerEndLimit = function (datetime, endLimitTime) {\n                if (!endLimitTime)\n                    return true;\n                return (datetime < endLimitTime);\n            };\n            LimitDatesClass.isDateBetweenLimits = function (datetime, startLimitTime, endLimitTime) {\n                return (this.isDateUpperStartLimit(datetime, startLimitTime) && this.isDateLowerEndLimit(datetime, endLimitTime));\n            };\n            return LimitDatesClass;\n        })();\n        Model.LimitDatesClass = LimitDatesClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var DataClass = (function () {\n            function DataClass(selected, startDateTime, endDateTime, isUTC, yearsListDirection, monthListDirection, daysListDirection) {\n                this.yearsListDirection = 'desc';\n                this.monthListDirection = 'asc';\n                this.daysListDirection = 'asc';\n                this.isValidNumber = function (num) {\n                    var isNumber = !isNaN(num);\n                    var isNotInfinity = isFinite(num);\n                    return isNumber && isNotInfinity;\n                };\n                this._getSelected = function (selected, startDateTime, endDateTime) {\n                    var result;\n                    var isBiggerThenStart = (selected.datetime > startDateTime);\n                    var isEqualToStart = (selected.datetime === startDateTime);\n                    var isLowerThenEnd = (selected.datetime > endDateTime);\n                    var isEqualToEnd = (selected.datetime === endDateTime);\n                    if ((isBiggerThenStart || isEqualToStart) || (isLowerThenEnd || isEqualToEnd)) {\n                        result = new Model.DateModelClass(selected.datetime, this._isUTC);\n                    }\n                    else if (!isBiggerThenStart) {\n                        result = new Model.DateModelClass(startDateTime, this._isUTC);\n                    }\n                    else if (!isBiggerThenStart) {\n                        result = new Model.DateModelClass(endDateTime, this._isUTC);\n                    }\n                    else {\n                        result = new Model.DateModelClass(new Date().getTime(), this._isUTC);\n                    }\n                    return result;\n                };\n                this._intArraySort = function (arr, direction) {\n                    if (direction === void 0) { direction = 'asc'; }\n                    function desc(a, b) {\n                        return b - a;\n                    }\n                    switch (direction) {\n                        default:\n                            return arr.sort(function (a, b) {\n                                return a - b;\n                            });\n                        case \"desc\":\n                            return arr.sort(desc);\n                    }\n                };\n                this._getArrayOfNumbers = function (start, end) {\n                    var result = [];\n                    for (var i = start; i <= end; i++) {\n                        result.push(i);\n                    }\n                    return result;\n                };\n                this.reloadYearsList = function () {\n                    this.years = this._getYearsList(this._startDateTime, this._endDateTime, this._limitDates, this.yearsListDirection);\n                    return this;\n                };\n                this._getYearsList = function (startDateTime, endDateTime, limitDates, direction) {\n                    var result = [];\n                    var DEFAULT_YEARS_COUNT = 10;\n                    var start = limitDates.startDate.year;\n                    var end = limitDates.endDate.year;\n                    var now = limitDates.nowDate.year;\n                    var selectedYear = apd.Model.DateUtilsClass.getYear(this.selected.datetime, this._isUTC);\n                    var latestPossibleYear = (selectedYear > now) ? selectedYear : now;\n                    var firstPossibleYear = (selectedYear < now) ? selectedYear : now;\n                    latestPossibleYear = latestPossibleYear + (DEFAULT_YEARS_COUNT - 1);\n                    firstPossibleYear = firstPossibleYear - (DEFAULT_YEARS_COUNT - 1);\n                    if ((startDateTime && endDateTime) && (startDateTime < endDateTime)) {\n                        result = this._getArrayOfNumbers(start, end);\n                    }\n                    else if ((startDateTime && endDateTime) && (startDateTime > endDateTime)) {\n                        result = this._getArrayOfNumbers(end, start);\n                    }\n                    else if ((startDateTime && endDateTime) && (startDateTime === endDateTime)) {\n                        result = this._getArrayOfNumbers(start, end);\n                    }\n                    else if (startDateTime && !endDateTime) {\n                        result = this._getArrayOfNumbers(start, latestPossibleYear);\n                    }\n                    else if (!startDateTime && endDateTime) {\n                        if (limitDates.endDate.year >= limitDates.nowDate.year) {\n                            if ((firstPossibleYear - DEFAULT_YEARS_COUNT) > (end - DEFAULT_YEARS_COUNT)) {\n                                result = this._getArrayOfNumbers(firstPossibleYear, end);\n                            }\n                            else {\n                                result = this._getArrayOfNumbers(end - (DEFAULT_YEARS_COUNT - 1), end);\n                            }\n                        }\n                        else if (limitDates.endDate.year > limitDates.nowDate.year) {\n                            result = this._getArrayOfNumbers(end - (DEFAULT_YEARS_COUNT - 1), end);\n                        }\n                    }\n                    else if (!startDateTime && !endDateTime) {\n                        result = this._getArrayOfNumbers(firstPossibleYear, latestPossibleYear);\n                    }\n                    return this._intArraySort(result, direction);\n                };\n                this.reloadMonthList = function () {\n                    var selectedYear = apd.Model.DateUtilsClass.getYear(this.selected.datetime, this._isUTC);\n                    this.month = this._getMonthList(this._startDateTime, this._endDateTime, this._limitDates, selectedYear, this.monthListDirection);\n                    return this;\n                };\n                this._getMonthList = function (startDateTime, endDateTime, limitDates, selectedYear, direction) {\n                    var result;\n                    var START_MONTH = 0;\n                    var END_MONTH = 11;\n                    if (startDateTime || endDateTime) {\n                        var isYearOfLowerLimit = (startDateTime) ? limitDates.startDate.year === selectedYear : false;\n                        var isYearOfUpperLimit = (endDateTime) ? limitDates.endDate.year === selectedYear : false;\n                        var start = (startDateTime) ? limitDates.startDate.month : START_MONTH;\n                        var end = (endDateTime) ? limitDates.endDate.month : END_MONTH;\n                        if (isYearOfLowerLimit && isYearOfUpperLimit) {\n                            result = this._getArrayOfNumbers(start, end);\n                        }\n                        else if (isYearOfLowerLimit && !isYearOfUpperLimit) {\n                            result = this._getArrayOfNumbers(start, END_MONTH);\n                        }\n                        else if (!isYearOfLowerLimit && isYearOfUpperLimit) {\n                            result = this._getArrayOfNumbers(START_MONTH, end);\n                        }\n                        else {\n                            result = this._getArrayOfNumbers(START_MONTH, END_MONTH);\n                        }\n                    }\n                    else {\n                        result = this._getArrayOfNumbers(START_MONTH, END_MONTH);\n                    }\n                    return this._intArraySort(result, direction);\n                };\n                this.reloadDaysList = function () {\n                    var selectedYear = apd.Model.DateUtilsClass.getYear(this.selected.datetime, this._isUTC);\n                    var selectedMonth = apd.Model.DateUtilsClass.getMonth(this.selected.datetime, this._isUTC);\n                    this.days = this._getDaysList(this._startDateTime, this._endDateTime, this._limitDates, selectedYear, selectedMonth, this.daysListDirection);\n                    return this;\n                };\n                this._getDaysList = function (startDateTime, endDateTime, limitDates, selectedYear, selectedMonth, direction) {\n                    var result;\n                    var START_DAY = 1;\n                    var lastDayInMonth = DataClass.getDaysInMonth(selectedMonth, selectedYear);\n                    if (startDateTime || endDateTime) {\n                        var isYearOfLowerLimit = (startDateTime) ? limitDates.startDate.year === selectedYear : false;\n                        var isYearOfUpperLimit = (endDateTime) ? limitDates.endDate.year === selectedYear : false;\n                        var isMonthOfLowerLimit = (startDateTime) ? limitDates.startDate.month === selectedMonth : false;\n                        var isMonthOfUpperLimit = (endDateTime) ? limitDates.endDate.month === selectedMonth : false;\n                        var isLowerLimit = (isYearOfLowerLimit && isMonthOfLowerLimit);\n                        var isUpperLimit = (isYearOfUpperLimit && isMonthOfUpperLimit);\n                        var start = (startDateTime) ? limitDates.startDate.day : START_DAY;\n                        var end = (endDateTime) ? limitDates.endDate.day : lastDayInMonth;\n                        if (isLowerLimit && isUpperLimit) {\n                            result = this._getArrayOfNumbers(start, end);\n                        }\n                        else if (isLowerLimit && !isUpperLimit) {\n                            result = this._getArrayOfNumbers(start, lastDayInMonth);\n                        }\n                        else if (!isLowerLimit && isUpperLimit) {\n                            result = this._getArrayOfNumbers(START_DAY, end);\n                        }\n                        else {\n                            result = this._getArrayOfNumbers(START_DAY, lastDayInMonth);\n                        }\n                    }\n                    else {\n                        result = this._getArrayOfNumbers(START_DAY, lastDayInMonth);\n                    }\n                    return this._intArraySort(result, direction);\n                };\n                this._getIntArr = function (length) {\n                    if (!length && length !== 0)\n                        return;\n                    return length ? this._getIntArr(length - 1).concat(length) : [];\n                };\n                var self = this;\n                selected.datetime = self.isValidNumber(selected.datetime) ? selected.datetime : null;\n                startDateTime = self.isValidNumber(startDateTime) ? startDateTime : null;\n                endDateTime = self.isValidNumber(endDateTime) ? endDateTime : null;\n                self._isUTC = isUTC;\n                self.selected = self._getSelected(selected, startDateTime, endDateTime);\n                var selectedYear = apd.Model.DateUtilsClass.getYear(this.selected.datetime, this._isUTC);\n                var selectedMonth = apd.Model.DateUtilsClass.getMonth(this.selected.datetime, this._isUTC);\n                self.yearsListDirection = yearsListDirection || self.yearsListDirection;\n                self.monthListDirection = monthListDirection || self.monthListDirection;\n                self.daysListDirection = daysListDirection || self.daysListDirection;\n                self._limitDates = new Model.LimitDatesClass(startDateTime, endDateTime, this._isUTC);\n                self._startDateTime = startDateTime;\n                self._endDateTime = endDateTime;\n                self.years = self._getYearsList(startDateTime, endDateTime, self._limitDates, self.yearsListDirection);\n                self.month = self._getMonthList(startDateTime, endDateTime, self._limitDates, selectedYear, self.monthListDirection);\n                self.days = self._getDaysList(startDateTime, endDateTime, self._limitDates, selectedYear, selectedMonth, self.daysListDirection);\n                return this;\n            }\n            DataClass.getDaysInMonth = function (month, year) {\n                return new Date(year, month + 1, 0).getDate();\n            };\n            return DataClass;\n        })();\n        Model.DataClass = DataClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var DateUtilsClass = (function () {\n            function DateUtilsClass() {\n            }\n            DateUtilsClass.getVal = function (datetime, method) {\n                var date = new Date(datetime);\n                return method.call(date);\n            };\n            DateUtilsClass.getDay = function (datetime, isUTC) {\n                var method = (isUTC) ? Date.prototype.getUTCDate : Date.prototype.getDate;\n                return this.getVal(datetime, method);\n            };\n            DateUtilsClass.getDayOfWeek = function (datetime, isUTC) {\n                var method = (isUTC) ? Date.prototype.getUTCDay : Date.prototype.getDay;\n                return this.getVal(datetime, method);\n            };\n            DateUtilsClass.getYear = function (datetime, isUTC) {\n                var method = (isUTC) ? Date.prototype.getUTCFullYear : Date.prototype.getFullYear;\n                return this.getVal(datetime, method);\n            };\n            DateUtilsClass.getMonth = function (datetime, isUTC) {\n                var method = (isUTC) ? Date.prototype.getUTCMonth : Date.prototype.getMonth;\n                return this.getVal(datetime, method);\n            };\n            return DateUtilsClass;\n        })();\n        Model.DateUtilsClass = DateUtilsClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var DateModelClass = (function () {\n            function DateModelClass(datetime, isUTC) {\n                this.day = apd.Model.DateUtilsClass.getDay(datetime, this._isUTC);\n                this.dayOfWeek = apd.Model.DateUtilsClass.getDayOfWeek(datetime, this._isUTC);\n                this.month = apd.Model.DateUtilsClass.getMonth(datetime, this._isUTC);\n                this.year = apd.Model.DateUtilsClass.getYear(datetime, this._isUTC);\n                this.datetime = datetime;\n                this.timezone = new Date(datetime).getTimezoneOffset();\n                this._isUTC = isUTC;\n                return this;\n            }\n            DateModelClass.validate = function (model) {\n                return !!(model && model.datetime);\n            };\n            return DateModelClass;\n        })();\n        Model.DateModelClass = DateModelClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var directive;\n    (function (directive) {\n        'use strict';\n        angular.module('angular-pd', [\n            'angular-pd.templates'\n        ]).directive('pureDatepicker', function () {\n            return {\n                restrict: 'E',\n                replace: true,\n                templateUrl: 'apd.html',\n                scope: {\n                    ngModel: '=',\n                    apdStart: '=?',\n                    apdEnd: '=?',\n                    apdDayId: '@?',\n                    apdMonthId: '@?',\n                    apdYearId: '@?',\n                    apdDayClasses: '@?',\n                    apdMonthClasses: '@?',\n                    apdYearClasses: '@?',\n                    apdLocalization: '=?',\n                    apdIsUtc: '=?'\n                },\n                link: function (scope) {\n                    scope.apdIsUtc = scope.apdIsUtc || false;\n                    var settings = {\n                        initDateModel: null,\n                        startDateTime: null,\n                        endDateTime: null\n                    };\n                    var ngModelWatcher = {\n                        handler: null,\n                        start: function (callback) {\n                            ngModelWatcher.handler = scope.$watch('ngModel.datetime', function (value, oldValue) {\n                                if (callback) {\n                                    callback(value, oldValue);\n                                }\n                            }, true);\n                        },\n                        stop: function () {\n                            if (!ngModelWatcher.handler) {\n                                apd.Model.MessagesFactoryClass.throwInvalidParamsMessage();\n                                return false;\n                            }\n                            ngModelWatcher.handler();\n                            return true;\n                        }\n                    };\n                    function getLimitSafeDatetime(day, month, year) {\n                        var datetime = new Date(year, month, day).getTime();\n                        if (!apd.Model.LimitDatesClass.isDateBetweenLimits(datetime, settings.startDateTime, settings.endDateTime)) {\n                            if (!apd.Model.LimitDatesClass.isDateUpperStartLimit(datetime, settings.startDateTime)) {\n                                datetime = settings.startDateTime;\n                            }\n                            else if (!apd.Model.LimitDatesClass.isDateLowerEndLimit(datetime, settings.endDateTime)) {\n                                datetime = settings.endDateTime;\n                            }\n                        }\n                        return datetime;\n                    }\n                    function updateModel(datetime) {\n                        ngModelWatcher.stop();\n                        scope.data.selected = new apd.Model.DateModelClass(datetime, scope.apdIsUtc);\n                        scope.ngModel = scope.data.selected;\n                        ngModelWatcher.start(onModelChange);\n                    }\n                    function onModelChange(datetime, oldValue) {\n                        if (datetime === oldValue) {\n                            return;\n                        }\n                        var day = apd.Model.DateUtilsClass.getDay(datetime, scope.apdIsUtc);\n                        var month = apd.Model.DateUtilsClass.getMonth(datetime, scope.apdIsUtc);\n                        var year = apd.Model.DateUtilsClass.getYear(datetime, scope.apdIsUtc);\n                        datetime = getLimitSafeDatetime(day, month, year);\n                        updateModel(datetime);\n                        scope.data.reloadYearsList();\n                        scope.data.reloadMonthList();\n                        scope.data.reloadDaysList();\n                    }\n                    function getInitDateModel(model) {\n                        var isInitModelValid = apd.Model.DateModelClass.validate(model);\n                        var initDatetime;\n                        if (isInitModelValid) {\n                            initDatetime = model.datetime;\n                        }\n                        else {\n                            initDatetime = new Date().getTime();\n                        }\n                        var day = apd.Model.DateUtilsClass.getDay(initDatetime, scope.apdIsUtc);\n                        var month = apd.Model.DateUtilsClass.getMonth(initDatetime, scope.apdIsUtc);\n                        var year = apd.Model.DateUtilsClass.getYear(initDatetime, scope.apdIsUtc);\n                        var limitSafeDatetime = getLimitSafeDatetime(day, month, year);\n                        return new apd.Model.DateModelClass(limitSafeDatetime, scope.apdIsUtc);\n                    }\n                    function _initData(initDateModel, startDateTime, endDateTime) {\n                        scope.data = new apd.Model.DataClass(initDateModel, startDateTime, endDateTime, scope.apdIsUtc);\n                        scope.ngModel = scope.data.selected;\n                    }\n                    scope.onDaySelectChanged = function (day) {\n                        if (!day)\n                            return;\n                        var datetime = getLimitSafeDatetime(scope.data.selected.day, scope.data.selected.month, scope.data.selected.year);\n                        updateModel(datetime);\n                    };\n                    scope.onMonthSelectChanged = function (month) {\n                        if (!month && month !== 0)\n                            return;\n                        var datetime;\n                        var year = scope.data.selected.year;\n                        var day = scope.data.selected.day;\n                        datetime = getLimitSafeDatetime(day, month, year);\n                        updateModel(datetime);\n                        scope.data.reloadDaysList();\n                    };\n                    scope.onYearSelectChanged = function (year) {\n                        if (!year && year !== 0)\n                            return;\n                        var month = scope.data.selected.month;\n                        var day = scope.data.selected.day;\n                        var datetime = getLimitSafeDatetime(day, month, year);\n                        updateModel(datetime);\n                        scope.data.reloadMonthList();\n                        scope.data.reloadDaysList();\n                    };\n                    function getDateTime(day, month, year) {\n                        if (!day || (!month && month !== 0) || !year) {\n                            apd.Model.MessagesFactoryClass.throwInvalidParamsMessage();\n                        }\n                        return new Date(year, month, day).getTime();\n                    }\n                    function isDayInMonth(day, month, year) {\n                        var daysInMonth = apd.Model.DataClass.getDaysInMonth(month, year);\n                        return day <= daysInMonth;\n                    }\n                    (function _init() {\n                        settings.startDateTime = (scope.apdStart) ? +scope.apdStart : null;\n                        settings.endDateTime = (scope.apdEnd) ? +scope.apdEnd : null;\n                        settings.initDateModel = getInitDateModel(scope.ngModel);\n                        _initData(settings.initDateModel, settings.startDateTime, settings.endDateTime);\n                        var localization = scope.apdLocalization || null;\n                        var week = new apd.Model.DaysClass(localization);\n                        var year = new apd.Model.MonthClass(localization);\n                        scope.getDayName = week.getName;\n                        scope.getMonthName = year.getName;\n                        ngModelWatcher.start(onModelChange);\n                    })();\n                }\n            };\n        });\n    })(directive = apd.directive || (apd.directive = {}));\n})(apd || (apd = {}));\n"],"sourceRoot":"/source/"}