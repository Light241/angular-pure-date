{"version":3,"sources":["angular-pure-datepicker.js"],"names":["angular","module","run","$templateCache","put","apd","Model","MessagesFactoryClass","this","messages","wrongClassCreation","wrongInstance","invalidParams","invalidDateModel","datesInverted","throwDeveloperError","message","console","error","throwModelValidationMessage","field","throwInvalidParamsMessage","throwWrongClassCreationMessage","throwWrongInstanceMessage","throwDatesInvertedMessage","WeekClass","days","_this","_setDefaultWeek","getDayName","dayNum","LimitDatesClass","startDateTime","endDateTime","isUTC","_setStartDate","datetime","startDate","day","DateUtilsClass","getDay","_isUTC","month","getMonth","year","getYear","_setEndDate","endDate","_setNowDate","Date","getTime","nowDate","isDateUpperStartLimit","startLimitTime","isDateLowerEndLimit","endLimitTime","isDateBetweenLimits","DataClass","selected","yearsListDirection","monthListDirection","daysListDirection","isValidNumber","num","isNumber","isNaN","isNotInfinity","isFinite","_getSelected","result","isBiggerThenStart","isEqualToStart","isLowerThenEnd","isEqualToEnd","DateModelClass","_intArraySort","arr","direction","desc","a","b","sort","_getArrayOfNumbers","start","end","i","push","reloadYearsList","years","_getYearsList","_startDateTime","_endDateTime","_limitDates","limitDates","DEFAULT_YEARS_COUNT","now","selectedYear","latestPossibleYear","firstPossibleYear","reloadMonthList","_getMonthList","START_MONTH","END_MONTH","isYearOfLowerLimit","isYearOfUpperLimit","reloadDaysList","selectedMonth","_getDaysList","START_DAY","lastDayInMonth","getDaysInMonth","isMonthOfLowerLimit","isMonthOfUpperLimit","isLowerLimit","isUpperLimit","_getIntArr","length","concat","self","getDate","getUTCMonth","getUTCFullYear","getFullYear","getUTCDate","getDayOfWeek","getUTCDay","dayOfWeek","timezone","getTimezoneOffset","validate","model","directive","restrict","replace","templateUrl","scope","ngModel","apdStart","apdEnd","apdDayId","apdMonthId","apdYearId","apdDayClasses","apdMonthClasses","apdYearClasses","apdLocalization","apdIsUtc","link","getLimitSafeDatetime","settings","updateModel","ngModelWatcher","stop","data","onModelChange","oldValue","getInitDateModel","initDatetime","isInitModelValid","limitSafeDatetime","_initData","initDateModel","handler","callback","$watch","value","onDaySelectChanged","onMonthSelectChanged","onYearSelectChanged","localization","week","YearClass","getMonthName","_setDefaultYear","monthNum"],"mappings":"AAAAA,QAAQC,OAAO,2BAA4BC,KAAK,iBAAkB,SAASC,GAAiBA,EAAeC,IAAI,WAAW,i6BAC1H,IAAIC,MACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,YACA,IAAIC,GAAuB,WACvB,QAASA,KACLC,KAAKC,UACDC,mBAAoB,4CACpBC,cAAe,wBACfC,cAAe,iBACfC,iBAAkB,qBAClBC,cAAe,kCAyCvB,MAtCAP,GAAqBQ,oBAAsB,SAAUC,GACjDC,QAAQC,MAAMF,IAElBT,EAAqBY,4BAA8B,SAAUC,GACzD,MAAMZ,gBAAgBD,OAItBC,MAAKO,oBAAoBP,KAAKC,SAASI,iBAAmB,qBAAwBO,EAAQ,OAHtFH,QAAQC,MAAM,0BACP,IAIfX,EAAqBc,0BAA4B,WAC7C,MAAMb,gBAAgBD,OAItBC,MAAKO,oBAAoBP,KAAKC,SAASG,gBAHnCK,QAAQC,MAAM,0BACP,IAIfX,EAAqBe,+BAAiC,WAClD,MAAMd,gBAAgBD,OAItBC,MAAKO,oBAAoBP,KAAKC,SAASC,qBAHnCO,QAAQC,MAAM,0BACP,IAIfX,EAAqBgB,0BAA4B,WAC7C,MAAMf,gBAAgBD,OAItBC,MAAKO,oBAAoBP,KAAKC,SAASE,gBAHnCM,QAAQC,MAAM,0BACP,IAIfX,EAAqBiB,0BAA4B,WAC7C,MAAMhB,gBAAgBD,OAItBC,MAAKO,oBAAoBP,KAAKC,SAASK,gBAHnCG,QAAQC,MAAM,0BACP,IAIRX,IAEXD,GAAMC,qBAAuBA,GAC9BD,EAAQD,EAAIC,QAAUD,EAAIC,YAC9BD,MAAQA,QAEX,IAAIA,MACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,YACA,IAAImB,GAAY,WACZ,QAASA,GAAUC,GACf,GAAIC,GAAQnB,IAWZ,OAVAA,MAAKoB,gBAAkB,WACnB,MAAO,IAAIH,IAAW,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,SAEpEjB,KAAKqB,WAAa,SAAUC,GACxB,MAAMH,aAAiBF,GAIhBE,EAAMD,KAAKI,IAHdzB,EAAIC,MAAMC,qBAAqBgB,4BACxB,OAITf,eAAgBiB,GAIlBC,GACAlB,KAAKkB,KAAOA,EACLlB,MAGAA,KAAKoB,mBARZvB,EAAIC,MAAMC,qBAAqBe,iCACxB,GAAIG,GAAUC,IAU7B,MAAOD,KAEXnB,GAAMmB,UAAYA,GACnBnB,EAAQD,EAAIC,QAAUD,EAAIC,YAC9BD,MAAQA,QAEX,IAAIA,MACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,YACA,IAAIyB,GAAkB,WAClB,QAASA,GAAgBC,EAAeC,EAAaC,GAmCjD,MAlCA1B,MAAK2B,cAAgB,SAAUC,GAC3B,MAAM5B,gBAAgBuB,IAItBvB,KAAK6B,UAAUC,IAAMjC,EAAIC,MAAMiC,eAAeC,OAAOJ,EAAU5B,KAAKiC,QACpEjC,KAAK6B,UAAUK,MAAQrC,EAAIC,MAAMiC,eAAeI,SAASP,EAAU5B,KAAKiC,QACxEjC,KAAK6B,UAAUO,KAAOvC,EAAIC,MAAMiC,eAAeM,QAAQT,EAAU5B,KAAKiC,QACtEjC,KAAK6B,UAAUD,SAAWA,EACnB5B,OAPHH,EAAIC,MAAMC,qBAAqBgB,6BACxB,IAQff,KAAKsC,YAAc,SAAUV,GACzB,MAAM5B,gBAAgBuB,IAItBvB,KAAKuC,QAAQT,IAAMjC,EAAIC,MAAMiC,eAAeC,OAAOJ,EAAU5B,KAAKiC,QAClEjC,KAAKuC,QAAQL,MAAQrC,EAAIC,MAAMiC,eAAeI,SAASP,EAAU5B,KAAKiC,QACtEjC,KAAKuC,QAAQH,KAAOvC,EAAIC,MAAMiC,eAAeM,QAAQT,EAAU5B,KAAKiC,QACpEjC,KAAKuC,QAAQX,SAAWA,EACjB5B,OAPHH,EAAIC,MAAMC,qBAAqBgB,6BACxB,IAQff,KAAKwC,YAAc,WACf,KAAMxC,eAAgBuB,IAElB,MADA1B,GAAIC,MAAMC,qBAAqBgB,6BACxB,CAEX,IAAIa,IAAW,GAAIa,OAAOC,SAK1B,OAJA1C,MAAK2C,QAAQb,IAAMjC,EAAIC,MAAMiC,eAAeC,OAAOJ,EAAU5B,KAAKiC,QAClEjC,KAAK2C,QAAQT,MAAQrC,EAAIC,MAAMiC,eAAeI,SAASP,EAAU5B,KAAKiC,QACtEjC,KAAK2C,QAAQP,KAAOvC,EAAIC,MAAMiC,eAAeM,QAAQT,EAAU5B,KAAKiC,QACpEjC,KAAK2C,QAAQf,SAAWA,EACjB5B,MAELA,eAAgBuB,IAItBvB,KAAKiC,OAASP,EACd1B,KAAK6B,WAAcC,IAAK,KAAMI,MAAO,KAAME,KAAM,KAAMR,SAAU,MACjE5B,KAAKuC,SAAYT,IAAK,KAAMI,MAAO,KAAME,KAAM,KAAMR,SAAU,MAC/D5B,KAAK2C,SAAYb,IAAK,KAAMI,MAAO,KAAME,KAAM,KAAMR,SAAU,MAC/D5B,KAAK2B,cAAcH,GACnBxB,KAAKsC,YAAYb,OACjBzB,MAAKwC,gBATD3C,EAAIC,MAAMC,qBAAqBe,iCACxB,GAAIS,GAAgBC,EAAeC,EAAaC,IAuB/D,MAbAH,GAAgBqB,sBAAwB,SAAUhB,EAAUiB,GACxD,MAAKA,GAEGjB,EAAWiB,GADR,GAGftB,EAAgBuB,oBAAsB,SAAUlB,EAAUmB,GACtD,MAAKA,GAEcA,EAAXnB,GADG,GAGfL,EAAgByB,oBAAsB,SAAUpB,EAAUiB,EAAgBE,GACtE,MAAQ/C,MAAK4C,sBAAsBhB,EAAUiB,IAAmB7C,KAAK8C,oBAAoBlB,EAAUmB,IAEhGxB,IAEXzB,GAAMyB,gBAAkBA,GACzBzB,EAAQD,EAAIC,QAAUD,EAAIC,YAC9BD,MAAQA,QAEX,IAAIA,MACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,YACA,IAAImD,GAAY,WACZ,QAASA,GAAUC,EAAU1B,EAAeC,EAAaC,EAAOyB,EAAoBC,EAAoBC,GAwMpG,GAvMArD,KAAKmD,mBAAqB,OAC1BnD,KAAKoD,mBAAqB,MAC1BpD,KAAKqD,kBAAoB,MACzBrD,KAAKsD,cAAgB,SAAUC,GAC3B,GAAIC,IAAYC,MAAMF,GAClBG,EAAgBC,SAASJ,EAC7B,OAAOC,IAAYE,GAEvB1D,KAAK4D,aAAe,SAAUV,EAAU1B,EAAeC,GACnD,GAAIoC,GACAC,EAAqBZ,EAAStB,SAAWJ,EACzCuC,EAAkBb,EAAStB,WAAaJ,EACxCwC,EAAkBd,EAAStB,SAAWH,EACtCwC,EAAgBf,EAAStB,WAAaH,CAa1C,OAXIoC,GADCC,GAAqBC,GAAoBC,GAAkBC,EACnD,GAAInE,GAAMoE,eAAehB,EAAStB,SAAU5B,KAAKiC,QAEpD6B,EAGAA,EAIG,GAAIhE,GAAMoE,gBAAe,GAAIzB,OAAOC,UAAW1C,KAAKiC,QAHpD,GAAInC,GAAMoE,eAAezC,EAAazB,KAAKiC,QAH3C,GAAInC,GAAMoE,eAAe1C,EAAexB,KAAKiC,SAU9DjC,KAAKmE,cAAgB,SAAUC,EAAKC,GAEhC,QAASC,GAAKC,EAAGC,GACb,MAAOA,GAAID,EAEf,OAJkB,SAAdF,IAAwBA,EAAY,OAIhCA,GACJ,QACI,MAAOD,GAAIK,KAAK,SAAUF,EAAGC,GACzB,MAAOD,GAAIC,GAEnB,KAAK,OACD,MAAOJ,GAAIK,KAAKH,KAG5BtE,KAAK0E,mBAAqB,SAAUC,EAAOC,GAEvC,IAAK,GADDf,MACKgB,EAAIF,EAAYC,GAALC,EAAUA,IAC1BhB,EAAOiB,KAAKD,EAEhB,OAAOhB,IAEX7D,KAAK+E,gBAAkB,WACnB,MAAM/E,gBAAgBiD,IAItBjD,KAAKgF,MAAQhF,KAAKiF,cAAcjF,KAAKkF,eAAgBlF,KAAKmF,aAAcnF,KAAKoF,YAAapF,KAAKmD,oBACxFnD,OAJHH,EAAIC,MAAMC,qBAAqBgB,4BACxB,OAKff,KAAKiF,cAAgB,SAAUzD,EAAeC,EAAa4D,EAAYhB,GACnE,KAAMrE,eAAgBiD,IAElB,MADApD,GAAIC,MAAMC,qBAAqBgB,4BACxB,IAEX,IAAI8C,MACAyB,EAAsB,GACtBX,EAAQU,EAAWxD,UAAUO,KAC7BwC,EAAMS,EAAW9C,QAAQH,KACzBmD,EAAMF,EAAW1C,QAAQP,KACzBoD,EAAe3F,EAAIC,MAAMiC,eAAeM,QAAQrC,KAAKkD,SAAStB,SAAU5B,KAAKiC,QAC7EwD,EAAsBD,EAAeD,EAAOC,EAAeD,EAC3DG,EAAoCH,EAAfC,EAAsBA,EAAeD,CAgC9D,OA/BAE,IAA2CH,EAAsB,EACjEI,GAAyCJ,EAAsB,EAC1D9D,GAAiBC,GAAiCA,EAAhBD,EACnCqC,EAAS7D,KAAK0E,mBAAmBC,EAAOC,GAElCpD,GAAiBC,GAAiBD,EAAgBC,GACxD5B,EAAIC,MAAMC,qBAAqBiB,4BAC/B6C,EAAS7D,KAAK0E,mBAAmBE,EAAKD,IAEhCnD,GAAiBC,GAAiBD,IAAkBC,EAC1DoC,EAAS7D,KAAK0E,mBAAmBC,EAAOC,GAEnCpD,IAAkBC,EACvBoC,EAAS7D,KAAK0E,mBAAmBC,EAAOc,IAElCjE,GAAiBC,EACnB4D,EAAW9C,QAAQH,MAAQiD,EAAW1C,QAAQP,KAE1CyB,EADC6B,EAAoBJ,EAAwBV,EAAMU,EAC1CtF,KAAK0E,mBAAmBgB,EAAmBd,GAG3C5E,KAAK0E,mBAAmBE,GAAOU,EAAsB,GAAIV,GAGjES,EAAW9C,QAAQH,KAAOiD,EAAW1C,QAAQP,OAClDyB,EAAS7D,KAAK0E,mBAAmBE,GAAOU,EAAsB,GAAIV,IAGhEpD,GAAkBC,IACxBoC,EAAS7D,KAAK0E,mBAAmBgB,EAAmBD,IAEjDzF,KAAKmE,cAAcN,EAAQQ,IAEtCrE,KAAK2F,gBAAkB,WACnB,KAAM3F,eAAgBiD,IAElB,MADApD,GAAIC,MAAMC,qBAAqBgB,4BACxB,IAEX,IAAIyE,GAAe3F,EAAIC,MAAMiC,eAAeM,QAAQrC,KAAKkD,SAAStB,SAAU5B,KAAKiC,OAEjF,OADAjC,MAAKkC,MAAQlC,KAAK4F,cAAc5F,KAAKkF,eAAgBlF,KAAKmF,aAAcnF,KAAKoF,YAAaI,EAAcxF,KAAKoD,oBACtGpD,MAEXA,KAAK4F,cAAgB,SAAUpE,EAAeC,EAAa4D,EAAYG,EAAcnB,GACjF,KAAMrE,eAAgBiD,IAElB,MADApD,GAAIC,MAAMC,qBAAqBgB,4BACxB,IAEX,IAAI8C,GACAgC,EAAc,EACdC,EAAY,EAChB,IAAItE,GAAiBC,EAAa,CAC9B,GAAIsE,GAAqB,EAAkBV,EAAWxD,UAAUO,OAASoD,GAAe,EACpFQ,EAAqB,EAAgBX,EAAW9C,QAAQH,OAASoD,GAAe,EAChFb,EAAQ,EAAkBU,EAAWxD,UAAUK,MAAQ2D,EACvDjB,EAAM,EAAgBS,EAAW9C,QAAQL,MAAQ4D,CAEjDjC,GADAkC,GAAsBC,EACbhG,KAAK0E,mBAAmBC,EAAOC,GAEnCmB,IAAuBC,EACnBhG,KAAK0E,mBAAmBC,EAAOmB,IAElCC,GAAsBC,EACnBhG,KAAK0E,mBAAmBmB,EAAajB,GAGrC5E,KAAK0E,mBAAmBmB,EAAaC,OAIlDjC,GAAS7D,KAAK0E,mBAAmBmB,EAAaC,EAElD,OAAO9F,MAAKmE,cAAcN,EAAQQ,IAEtCrE,KAAKiG,eAAiB,WAClB,KAAMjG,eAAgBiD,IAElB,MADApD,GAAIC,MAAMC,qBAAqBgB,4BACxB,IAEX,IAAIyE,GAAe3F,EAAIC,MAAMiC,eAAeM,QAAQrC,KAAKkD,SAAStB,SAAU5B,KAAKiC,QAC7EiE,EAAgBrG,EAAIC,MAAMiC,eAAeI,SAASnC,KAAKkD,SAAStB,SAAU5B,KAAKiC,OAEnF,OADAjC,MAAKkB,KAAOlB,KAAKmG,aAAanG,KAAKkF,eAAgBlF,KAAKmF,aAAcnF,KAAKoF,YAAaI,EAAcU,EAAelG,KAAKqD,mBACnHrD,MAEXA,KAAKmG,aAAe,SAAU3E,EAAeC,EAAa4D,EAAYG,EAAcU,EAAe7B,GAC/F,KAAMrE,eAAgBiD,IAElB,MADApD,GAAIC,MAAMC,qBAAqBgB,4BACxB,IAEX,IAAI8C,GACAuC,EAAY,EACZC,EAAiBpD,EAAUqD,eAAeJ,EAAeV,EAC7D,IAAIhE,GAAiBC,EAAa,CAC9B,GAAIsE,GAAqB,EAAkBV,EAAWxD,UAAUO,OAASoD,GAAe,EACpFQ,EAAqB,EAAgBX,EAAW9C,QAAQH,OAASoD,GAAe,EAChFe,EAAsB,EAAkBlB,EAAWxD,UAAUK,QAAUgE,GAAgB,EACvFM,EAAsB,EAAgBnB,EAAW9C,QAAQL,QAAUgE,GAAgB,EACnFO,EAAgBV,GAAsBQ,EACtCG,EAAgBV,GAAsBQ,EACtC7B,EAAQ,EAAkBU,EAAWxD,UAAUC,IAAMsE,EACrDxB,EAAM,EAAgBS,EAAW9C,QAAQT,IAAMuE,CAE/CxC,GADA4C,GAAgBC,EACP1G,KAAK0E,mBAAmBC,EAAOC,GAEnC6B,IAAiBC,EACb1G,KAAK0E,mBAAmBC,EAAO0B,IAElCI,GAAgBC,EACb1G,KAAK0E,mBAAmB0B,EAAWxB,GAGnC5E,KAAK0E,mBAAmB0B,EAAWC,OAIhDxC,GAAS7D,KAAK0E,mBAAmB0B,EAAWC,EAEhD,OAAOrG,MAAKmE,cAAcN,EAAQQ,IAEtCrE,KAAK2G,WAAa,SAAUC,GACxB,MAAM5G,gBAAgBiD,GAIjB2D,GAAqB,IAAXA,EAIRA,EAAS5G,KAAK2G,WAAWC,EAAS,GAAGC,OAAOD,OAH/C/G,EAAIC,MAAMC,qBAAqBc,4BACxB,OALPhB,EAAIC,MAAMC,qBAAqBgB,4BACxB,SAQTf,eAAgBiD,IAElB,MADApD,GAAIC,MAAMC,qBAAqBe,iCACxB,GAAImC,GAAUC,EAAU1B,EAAeC,EAAaC,EAAOyB,EAAoBC,EAAoBC,EAE9G,IAAIyD,GAAO9G,IACXkD,GAAStB,SAAWkF,EAAKxD,cAAcJ,EAAStB,UAAYsB,EAAStB,SAAW,KAChFJ,EAAgBsF,EAAKxD,cAAc9B,GAAiBA,EAAgB,KACpEC,EAAcqF,EAAKxD,cAAc7B,GAAeA,EAAc,KAC9DqF,EAAK7E,OAASP,EACdoF,EAAK5D,SAAW4D,EAAKlD,aAAaV,EAAU1B,EAAeC,EAC3D,IAAI+D,GAAe3F,EAAIC,MAAMiC,eAAeM,QAAQrC,KAAKkD,SAAStB,SAAU5B,KAAKiC,QAC7EiE,EAAgBrG,EAAIC,MAAMiC,eAAeI,SAASnC,KAAKkD,SAAStB,SAAU5B,KAAKiC,OAUnF,OATA6E,GAAK3D,mBAAqBA,GAAsB2D,EAAK3D,mBACrD2D,EAAK1D,mBAAqBA,GAAsB0D,EAAK1D,mBACrD0D,EAAKzD,kBAAoBA,GAAqByD,EAAKzD,kBACnDyD,EAAK1B,YAAc,GAAItF,GAAMyB,gBAAgBC,EAAeC,EAAazB,KAAKiC,QAC9E6E,EAAK5B,eAAiB1D,EACtBsF,EAAK3B,aAAe1D,EACpBqF,EAAK9B,MAAQ8B,EAAK7B,cAAczD,EAAeC,EAAaqF,EAAK1B,YAAa0B,EAAK3D,oBACnF2D,EAAK5E,MAAQ4E,EAAKlB,cAAcpE,EAAeC,EAAaqF,EAAK1B,YAAaI,EAAcsB,EAAK1D,oBACjG0D,EAAK5F,KAAO4F,EAAKX,aAAa3E,EAAeC,EAAaqF,EAAK1B,YAAaI,EAAcU,EAAeY,EAAKzD,mBACvGrD,KAKX,MAHAiD,GAAUqD,eAAiB,SAAUpE,EAAOE,GACxC,MAAO,IAAIK,MAAKL,EAAMF,EAAQ,EAAG,GAAG6E,WAEjC9D,IAEXnD,GAAMmD,UAAYA,GACnBnD,EAAQD,EAAIC,QAAUD,EAAIC,YAC9BD,MAAQA,QAEX,IAAIA,MACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,YACA,IAAIiC,GAAiB,WACjB,QAASA,MA0CT,MAxCAA,GAAeI,SAAW,SAAUP,EAAUF,GAC1C,GAAImC,EAOJ,OALIA,GADAnC,EACS,GAAIe,MAAKb,GAAUoF,cAGnB,GAAIvE,MAAKb,GAAUO,YAIpCJ,EAAeM,QAAU,SAAUT,EAAUF,GACzC,GAAImC,EAOJ,OALIA,GADAnC,EACS,GAAIe,MAAKb,GAAUqF,iBAGnB,GAAIxE,MAAKb,GAAUsF,eAIpCnF,EAAeC,OAAS,SAAUJ,EAAUF,GACxC,GAAImC,EAOJ,OALIA,GADAnC,EACS,GAAIe,MAAKb,GAAUuF,aAGnB,GAAI1E,MAAKb,GAAUmF,WAIpChF,EAAeqF,aAAe,SAAUxF,EAAUF,GAC9C,GAAImC,EAOJ,OALIA,GADAnC,EACS,GAAIe,MAAKb,GAAUyF,YAGnB,GAAI5E,MAAKb,GAAUI,UAI7BD,IAEXjC,GAAMiC,eAAiBA,GACxBjC,EAAQD,EAAIC,QAAUD,EAAIC,YAC9BD,MAAQA,QAEX,IAAIA,MACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,YACA,IAAIoE,GAAiB,WACjB,QAASA,GAAetC,EAAUF,GAC9B,MAAM1B,gBAAgBkE,IAItBlE,KAAK8B,IAAMjC,EAAIC,MAAMiC,eAAeC,OAAOJ,EAAU5B,KAAKiC,QAC1DjC,KAAKsH,UAAYzH,EAAIC,MAAMiC,eAAeqF,aAAaxF,EAAU5B,KAAKiC,QACtEjC,KAAKkC,MAAQrC,EAAIC,MAAMiC,eAAeI,SAASP,EAAU5B,KAAKiC,QAC9DjC,KAAKoC,KAAOvC,EAAIC,MAAMiC,eAAeM,QAAQT,EAAU5B,KAAKiC,QAC5DjC,KAAK4B,SAAWA,EAChB5B,KAAKuH,SAAW,GAAI9E,MAAKb,GAAU4F,oBACnCxH,KAAKiC,OAASP,EACP1B,OAVHH,EAAIC,MAAMC,qBAAqBe,iCACxB,GAAIoD,GAAetC,EAAUF,IAc5C,MAHAwC,GAAeuD,SAAW,SAAUC,GAChC,SAAUA,IAASA,EAAM9F,WAEtBsC,IAEXpE,GAAMoE,eAAiBA,GACxBpE,EAAQD,EAAIC,QAAUD,EAAIC,YAC9BD,MAAQA,QAEX,IAAIA,MACJ,SAAWA,GACP,GAAI8H,IACJ,SAAWA,GACP,YACAnI,SAAQC,OAAO,cACX,yBACDkI,UAAU,iBAAkB,WAC3B,OACIC,SAAU,IACVC,SAAS,EACTC,YAAa,WACbC,OACIC,QAAS,IACTC,SAAU,KACVC,OAAQ,KACRC,SAAU,KACVC,WAAY,KACZC,UAAW,KACXC,cAAe,KACfC,gBAAiB,KACjBC,eAAgB,KAChBC,gBAAiB,KACjBC,SAAU,MAEdC,KAAM,SAAUZ,GAyBZ,QAASa,GAAqB9G,EAAKI,EAAOE,GACtC,GAAIR,GAAW,GAAIa,MAAKL,EAAMF,EAAOJ,GAAKY,SAS1C,OARK7C,GAAIC,MAAMyB,gBAAgByB,oBAAoBpB,EAAUiH,EAASrH,cAAeqH,EAASpH,eACrF5B,EAAIC,MAAMyB,gBAAgBqB,sBAAsBhB,EAAUiH,EAASrH,eAG9D3B,EAAIC,MAAMyB,gBAAgBuB,oBAAoBlB,EAAUiH,EAASpH,eACvEG,EAAWiH,EAASpH,aAHpBG,EAAWiH,EAASrH,eAMrBI,EAEX,QAASkH,GAAYlH,GACjBmH,EAAeC,OACfjB,EAAMkB,KAAK/F,SAAW,GAAIrD,GAAIC,MAAMoE,eAAetC,EAAUmG,EAAMW,UACnEX,EAAMC,QAAUD,EAAMkB,KAAK/F,SAC3B6F,EAAepE,MAAMuE,GAEzB,QAASA,GAActH,EAAUuH,GAC7B,GAAIvH,IAAauH,EAAjB,CAGA,GAAIrH,GAAMjC,EAAIC,MAAMiC,eAAeC,OAAOJ,EAAUmG,EAAMW,UACtDxG,EAAQrC,EAAIC,MAAMiC,eAAeI,SAASP,EAAUmG,EAAMW,UAC1DtG,EAAOvC,EAAIC,MAAMiC,eAAeM,QAAQT,EAAUmG,EAAMW,SAC5D9G,GAAWgH,EAAqB9G,EAAKI,EAAOE,GAC5C0G,EAAYlH,GACZmG,EAAMkB,KAAKlE,kBACXgD,EAAMkB,KAAKtD,kBACXoC,EAAMkB,KAAKhD,kBAEf,QAASmD,GAAiB1B,GACtB,GACI2B,GADAC,EAAmBzJ,EAAIC,MAAMoE,eAAeuD,SAASC,EAGrD2B,GADAC,EACe5B,EAAM9F,UAGN,GAAIa,OAAOC,SAE9B,IAAIZ,GAAMjC,EAAIC,MAAMiC,eAAeC,OAAOqH,EAActB,EAAMW,UAC1DxG,EAAQrC,EAAIC,MAAMiC,eAAeI,SAASkH,EAActB,EAAMW,UAC9DtG,EAAOvC,EAAIC,MAAMiC,eAAeM,QAAQgH,EAActB,EAAMW,UAC5Da,EAAoBX,EAAqB9G,EAAKI,EAAOE,EACzD,OAAO,IAAIvC,GAAIC,MAAMoE,eAAeqF,EAAmBxB,EAAMW,UAEjE,QAASc,GAAUC,EAAejI,EAAeC,GAC7CsG,EAAMkB,KAAO,GAAIpJ,GAAIC,MAAMmD,UAAUwG,EAAejI,EAAeC,EAAasG,EAAMW,UACtFX,EAAMC,QAAUD,EAAMkB,KAAK/F,SAxE/B6E,EAAMW,SAAWX,EAAMW,WAAY,CACnC,IAAIG,IACAY,cAAe,KACfjI,cAAe,KACfC,YAAa,MAEbsH,GACAW,QAAS,KACT/E,MAAO,SAAUgF,GACbZ,EAAeW,QAAU3B,EAAM6B,OAAO,mBAAoB,SAAUC,EAAOV,GACnEQ,GACAA,EAASE,EAAOV,KAErB,IAEPH,KAAM,WACF,MAAKD,GAAeW,SAIpBX,EAAeW,WACR,IAJH7J,EAAIC,MAAMC,qBAAqBc,6BACxB,IAwDnBkH,GAAM+B,mBAAqB,SAAUhI,GACjC,GAAKA,EAAL,CAEA,GAAIF,GAAWgH,EAAqBb,EAAMkB,KAAK/F,SAASpB,IAAKiG,EAAMkB,KAAK/F,SAAShB,MAAO6F,EAAMkB,KAAK/F,SAASd,KAC5G0G,GAAYlH,KAEhBmG,EAAMgC,qBAAuB,SAAU7H,GACnC,GAAKA,GAAmB,IAAVA,EAAd,CAEA,GAAIN,GACAQ,EAAO2F,EAAMkB,KAAK/F,SAASd,KAC3BN,EAAMiG,EAAMkB,KAAK/F,SAASpB,GAC9BF,GAAWgH,EAAqB9G,EAAKI,EAAOE,GAC5C0G,EAAYlH,GACZmG,EAAMkB,KAAKhD,mBAEf8B,EAAMiC,oBAAsB,SAAU5H,GAClC,GAAKA,GAAiB,IAATA,EAAb,CAEA,GAAIF,GAAQ6F,EAAMkB,KAAK/F,SAAShB,MAC5BJ,EAAMiG,EAAMkB,KAAK/F,SAASpB,IAC1BF,EAAWgH,EAAqB9G,EAAKI,EAAOE,EAChD0G,GAAYlH,GACZmG,EAAMkB,KAAKtD,kBACXoC,EAAMkB,KAAKhD,mBAYf,WACI4C,EAASrH,cAAiBuG,EAAc,UAAKA,EAAME,SAAW,KAC9DY,EAASpH,YAAesG,EAAY,QAAKA,EAAMG,OAAS,KACxDW,EAASY,cAAgBL,EAAiBrB,EAAMC,SAChDwB,EAAUX,EAASY,cAAeZ,EAASrH,cAAeqH,EAASpH,YACnE,IAAIwI,GAAelC,EAAMU,iBAAmB,KACxCyB,EAAO,GAAIrK,GAAIC,MAAMmB,UAAUgJ,GAC/B7H,EAAO,GAAIvC,GAAIC,MAAMqK,UAAUF,EACnClC,GAAM1G,WAAa6I,EAAK7I,WACxB0G,EAAMqC,aAAehI,EAAKgI,aAC1BrB,EAAepE,MAAMuE,WAKtCvB,EAAY9H,EAAI8H,YAAc9H,EAAI8H,gBACtC9H,MAAQA,QAEX,IAAIA,MACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,YACA,IAAIqK,GAAY,WACZ,QAASA,GAAUjI,GACf,GAAIf,GAAQnB,IAWZ,OAVAA,MAAKqK,gBAAkB,WACnB,MAAO,IAAIF,IAAW,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,cAExInK,KAAKoK,aAAe,SAAUE,GAC1B,MAAMnJ,aAAiBgJ,GAIhBhJ,EAAMe,MAAMoI,IAHfzK,EAAIC,MAAMC,qBAAqBgB,4BACxB,OAITf,eAAgBmK,GAIlBjI,GACAlC,KAAKkC,MAAQA,EACNlC,MAGAA,KAAKqK,mBARZxK,EAAIC,MAAMC,qBAAqBe,iCACxB,GAAIqJ,GAAUjI,IAU7B,MAAOiI,KAEXrK,GAAMqK,UAAYA,GACnBrK,EAAQD,EAAIC,QAAUD,EAAIC,YAC9BD,MAAQA","file":"angular-pure-datepicker.min.js","sourcesContent":["angular.module(\"angular-pd.templates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"apd.html\",\"<div class=apd_root><select ng-model=data.selected.day ng-options=\\\"day for day in data.days\\\" ng-init=\\\"data.selected.day = data.days[0]\\\" ng-change=onDaySelectChanged(data.selected.day) id={{::apdDayId}} class=\\\"apd_elem apd_select_day apd_select {{::apdDayClasses}}\\\"></select><span ng-bind=getDayName(data.selected.dayOfWeek) class=\\\"apd_elem apd_day_of_week\\\"></span><select ng-model=data.selected.month ng-options=\\\"getMonthName(month) for month in data.month\\\" ng-init=\\\"data.selected.month = data.month[0]\\\" ng-change=onMonthSelectChanged(data.selected.month) id={{::apdMonthId}} class=\\\"apd_elem apd_select_month apd_select {{::apdMonthClasses}}\\\"></select><select ng-model=data.selected.year ng-options=\\\"year for year in data.years\\\" ng-init=\\\"data.selected.year = data.years[0]\\\" ng-change=onYearSelectChanged(data.selected.year) id={{::apdYearId}} class=\\\"apd_elem apd_select_year apd_select {{::apdYearClasses}}\\\"></select></div>\");}]);\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var MessagesFactoryClass = (function () {\n            function MessagesFactoryClass() {\n                this.messages = {\n                    wrongClassCreation: 'Class created without \\'new\\', wrong \\'this\\'',\n                    wrongInstance: 'Wrong \\'this\\' instance',\n                    invalidParams: 'Invalid params',\n                    invalidDateModel: 'Invalid date model',\n                    datesInverted: 'Warning! Start date > End date'\n                };\n            }\n            MessagesFactoryClass.throwDeveloperError = function (message) {\n                console.error(message);\n            };\n            MessagesFactoryClass.throwModelValidationMessage = function (field) {\n                if (!(this instanceof MessagesFactoryClass)) {\n                    console.error('Wrong \\'this\\' instance');\n                    return false;\n                }\n                this.throwDeveloperError(this.messages.invalidDateModel + ': error on field \\\"' + field + '+\\\"');\n            };\n            MessagesFactoryClass.throwInvalidParamsMessage = function () {\n                if (!(this instanceof MessagesFactoryClass)) {\n                    console.error('Wrong \\'this\\' instance');\n                    return false;\n                }\n                this.throwDeveloperError(this.messages.invalidParams);\n            };\n            MessagesFactoryClass.throwWrongClassCreationMessage = function () {\n                if (!(this instanceof MessagesFactoryClass)) {\n                    console.error('Wrong \\'this\\' instance');\n                    return false;\n                }\n                this.throwDeveloperError(this.messages.wrongClassCreation);\n            };\n            MessagesFactoryClass.throwWrongInstanceMessage = function () {\n                if (!(this instanceof MessagesFactoryClass)) {\n                    console.error('Wrong \\'this\\' instance');\n                    return false;\n                }\n                this.throwDeveloperError(this.messages.wrongInstance);\n            };\n            MessagesFactoryClass.throwDatesInvertedMessage = function () {\n                if (!(this instanceof MessagesFactoryClass)) {\n                    console.error('Wrong \\'this\\' instance');\n                    return false;\n                }\n                this.throwDeveloperError(this.messages.datesInverted);\n            };\n            return MessagesFactoryClass;\n        })();\n        Model.MessagesFactoryClass = MessagesFactoryClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var WeekClass = (function () {\n            function WeekClass(days) {\n                var _this = this;\n                this._setDefaultWeek = function () {\n                    return new WeekClass(['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']);\n                };\n                this.getDayName = function (dayNum) {\n                    if (!(_this instanceof WeekClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    return _this.days[dayNum];\n                };\n                if (!(this instanceof WeekClass)) {\n                    apd.Model.MessagesFactoryClass.throwWrongClassCreationMessage();\n                    return new WeekClass(days);\n                }\n                if (days) {\n                    this.days = days;\n                    return this;\n                }\n                else {\n                    return this._setDefaultWeek();\n                }\n            }\n            return WeekClass;\n        })();\n        Model.WeekClass = WeekClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var LimitDatesClass = (function () {\n            function LimitDatesClass(startDateTime, endDateTime, isUTC) {\n                this._setStartDate = function (datetime) {\n                    if (!(this instanceof LimitDatesClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return false;\n                    }\n                    this.startDate.day = apd.Model.DateUtilsClass.getDay(datetime, this._isUTC);\n                    this.startDate.month = apd.Model.DateUtilsClass.getMonth(datetime, this._isUTC);\n                    this.startDate.year = apd.Model.DateUtilsClass.getYear(datetime, this._isUTC);\n                    this.startDate.datetime = datetime;\n                    return this;\n                };\n                this._setEndDate = function (datetime) {\n                    if (!(this instanceof LimitDatesClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return false;\n                    }\n                    this.endDate.day = apd.Model.DateUtilsClass.getDay(datetime, this._isUTC);\n                    this.endDate.month = apd.Model.DateUtilsClass.getMonth(datetime, this._isUTC);\n                    this.endDate.year = apd.Model.DateUtilsClass.getYear(datetime, this._isUTC);\n                    this.endDate.datetime = datetime;\n                    return this;\n                };\n                this._setNowDate = function () {\n                    if (!(this instanceof LimitDatesClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return false;\n                    }\n                    var datetime = new Date().getTime();\n                    this.nowDate.day = apd.Model.DateUtilsClass.getDay(datetime, this._isUTC);\n                    this.nowDate.month = apd.Model.DateUtilsClass.getMonth(datetime, this._isUTC);\n                    this.nowDate.year = apd.Model.DateUtilsClass.getYear(datetime, this._isUTC);\n                    this.nowDate.datetime = datetime;\n                    return this;\n                };\n                if (!(this instanceof LimitDatesClass)) {\n                    apd.Model.MessagesFactoryClass.throwWrongClassCreationMessage();\n                    return new LimitDatesClass(startDateTime, endDateTime, isUTC);\n                }\n                this._isUTC = isUTC;\n                this.startDate = { day: null, month: null, year: null, datetime: null };\n                this.endDate = { day: null, month: null, year: null, datetime: null };\n                this.nowDate = { day: null, month: null, year: null, datetime: null };\n                this._setStartDate(startDateTime);\n                this._setEndDate(endDateTime);\n                this._setNowDate();\n            }\n            LimitDatesClass.isDateUpperStartLimit = function (datetime, startLimitTime) {\n                if (!startLimitTime)\n                    return true;\n                return (datetime > startLimitTime);\n            };\n            LimitDatesClass.isDateLowerEndLimit = function (datetime, endLimitTime) {\n                if (!endLimitTime)\n                    return true;\n                return (datetime < endLimitTime);\n            };\n            LimitDatesClass.isDateBetweenLimits = function (datetime, startLimitTime, endLimitTime) {\n                return (this.isDateUpperStartLimit(datetime, startLimitTime) && this.isDateLowerEndLimit(datetime, endLimitTime));\n            };\n            return LimitDatesClass;\n        })();\n        Model.LimitDatesClass = LimitDatesClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var DataClass = (function () {\n            function DataClass(selected, startDateTime, endDateTime, isUTC, yearsListDirection, monthListDirection, daysListDirection) {\n                this.yearsListDirection = 'desc';\n                this.monthListDirection = 'asc';\n                this.daysListDirection = 'asc';\n                this.isValidNumber = function (num) {\n                    var isNumber = !isNaN(num);\n                    var isNotInfinity = isFinite(num);\n                    return isNumber && isNotInfinity;\n                };\n                this._getSelected = function (selected, startDateTime, endDateTime) {\n                    var result;\n                    var isBiggerThenStart = (selected.datetime > startDateTime);\n                    var isEqualToStart = (selected.datetime === startDateTime);\n                    var isLowerThenEnd = (selected.datetime > endDateTime);\n                    var isEqualToEnd = (selected.datetime === endDateTime);\n                    if ((isBiggerThenStart || isEqualToStart) || (isLowerThenEnd || isEqualToEnd)) {\n                        result = new Model.DateModelClass(selected.datetime, this._isUTC);\n                    }\n                    else if (!isBiggerThenStart) {\n                        result = new Model.DateModelClass(startDateTime, this._isUTC);\n                    }\n                    else if (!isBiggerThenStart) {\n                        result = new Model.DateModelClass(endDateTime, this._isUTC);\n                    }\n                    else {\n                        result = new Model.DateModelClass(new Date().getTime(), this._isUTC);\n                    }\n                    return result;\n                };\n                this._intArraySort = function (arr, direction) {\n                    if (direction === void 0) { direction = 'asc'; }\n                    function desc(a, b) {\n                        return b - a;\n                    }\n                    switch (direction) {\n                        default:\n                            return arr.sort(function (a, b) {\n                                return a - b;\n                            });\n                        case \"desc\":\n                            return arr.sort(desc);\n                    }\n                };\n                this._getArrayOfNumbers = function (start, end) {\n                    var result = [];\n                    for (var i = start; i <= end; i++) {\n                        result.push(i);\n                    }\n                    return result;\n                };\n                this.reloadYearsList = function () {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    this.years = this._getYearsList(this._startDateTime, this._endDateTime, this._limitDates, this.yearsListDirection);\n                    return this;\n                };\n                this._getYearsList = function (startDateTime, endDateTime, limitDates, direction) {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    var result = [];\n                    var DEFAULT_YEARS_COUNT = 10;\n                    var start = limitDates.startDate.year;\n                    var end = limitDates.endDate.year;\n                    var now = limitDates.nowDate.year;\n                    var selectedYear = apd.Model.DateUtilsClass.getYear(this.selected.datetime, this._isUTC);\n                    var latestPossibleYear = (selectedYear > now) ? selectedYear : now;\n                    var firstPossibleYear = (selectedYear < now) ? selectedYear : now;\n                    latestPossibleYear = latestPossibleYear + (DEFAULT_YEARS_COUNT - 1);\n                    firstPossibleYear = firstPossibleYear - (DEFAULT_YEARS_COUNT - 1);\n                    if ((startDateTime && endDateTime) && (startDateTime < endDateTime)) {\n                        result = this._getArrayOfNumbers(start, end);\n                    }\n                    else if ((startDateTime && endDateTime) && (startDateTime > endDateTime)) {\n                        apd.Model.MessagesFactoryClass.throwDatesInvertedMessage();\n                        result = this._getArrayOfNumbers(end, start);\n                    }\n                    else if ((startDateTime && endDateTime) && (startDateTime === endDateTime)) {\n                        result = this._getArrayOfNumbers(start, end);\n                    }\n                    else if (startDateTime && !endDateTime) {\n                        result = this._getArrayOfNumbers(start, latestPossibleYear);\n                    }\n                    else if (!startDateTime && endDateTime) {\n                        if (limitDates.endDate.year >= limitDates.nowDate.year) {\n                            if ((firstPossibleYear - DEFAULT_YEARS_COUNT) > (end - DEFAULT_YEARS_COUNT)) {\n                                result = this._getArrayOfNumbers(firstPossibleYear, end);\n                            }\n                            else {\n                                result = this._getArrayOfNumbers(end - (DEFAULT_YEARS_COUNT - 1), end);\n                            }\n                        }\n                        else if (limitDates.endDate.year > limitDates.nowDate.year) {\n                            result = this._getArrayOfNumbers(end - (DEFAULT_YEARS_COUNT - 1), end);\n                        }\n                    }\n                    else if (!startDateTime && !endDateTime) {\n                        result = this._getArrayOfNumbers(firstPossibleYear, latestPossibleYear);\n                    }\n                    return this._intArraySort(result, direction);\n                };\n                this.reloadMonthList = function () {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    var selectedYear = apd.Model.DateUtilsClass.getYear(this.selected.datetime, this._isUTC);\n                    this.month = this._getMonthList(this._startDateTime, this._endDateTime, this._limitDates, selectedYear, this.monthListDirection);\n                    return this;\n                };\n                this._getMonthList = function (startDateTime, endDateTime, limitDates, selectedYear, direction) {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    var result;\n                    var START_MONTH = 0;\n                    var END_MONTH = 11;\n                    if (startDateTime || endDateTime) {\n                        var isYearOfLowerLimit = (startDateTime) ? limitDates.startDate.year === selectedYear : false;\n                        var isYearOfUpperLimit = (endDateTime) ? limitDates.endDate.year === selectedYear : false;\n                        var start = (startDateTime) ? limitDates.startDate.month : START_MONTH;\n                        var end = (endDateTime) ? limitDates.endDate.month : END_MONTH;\n                        if (isYearOfLowerLimit && isYearOfUpperLimit) {\n                            result = this._getArrayOfNumbers(start, end);\n                        }\n                        else if (isYearOfLowerLimit && !isYearOfUpperLimit) {\n                            result = this._getArrayOfNumbers(start, END_MONTH);\n                        }\n                        else if (!isYearOfLowerLimit && isYearOfUpperLimit) {\n                            result = this._getArrayOfNumbers(START_MONTH, end);\n                        }\n                        else {\n                            result = this._getArrayOfNumbers(START_MONTH, END_MONTH);\n                        }\n                    }\n                    else {\n                        result = this._getArrayOfNumbers(START_MONTH, END_MONTH);\n                    }\n                    return this._intArraySort(result, direction);\n                };\n                this.reloadDaysList = function () {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    var selectedYear = apd.Model.DateUtilsClass.getYear(this.selected.datetime, this._isUTC);\n                    var selectedMonth = apd.Model.DateUtilsClass.getMonth(this.selected.datetime, this._isUTC);\n                    this.days = this._getDaysList(this._startDateTime, this._endDateTime, this._limitDates, selectedYear, selectedMonth, this.daysListDirection);\n                    return this;\n                };\n                this._getDaysList = function (startDateTime, endDateTime, limitDates, selectedYear, selectedMonth, direction) {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    var result;\n                    var START_DAY = 1;\n                    var lastDayInMonth = DataClass.getDaysInMonth(selectedMonth, selectedYear);\n                    if (startDateTime || endDateTime) {\n                        var isYearOfLowerLimit = (startDateTime) ? limitDates.startDate.year === selectedYear : false;\n                        var isYearOfUpperLimit = (endDateTime) ? limitDates.endDate.year === selectedYear : false;\n                        var isMonthOfLowerLimit = (startDateTime) ? limitDates.startDate.month === selectedMonth : false;\n                        var isMonthOfUpperLimit = (endDateTime) ? limitDates.endDate.month === selectedMonth : false;\n                        var isLowerLimit = (isYearOfLowerLimit && isMonthOfLowerLimit);\n                        var isUpperLimit = (isYearOfUpperLimit && isMonthOfUpperLimit);\n                        var start = (startDateTime) ? limitDates.startDate.day : START_DAY;\n                        var end = (endDateTime) ? limitDates.endDate.day : lastDayInMonth;\n                        if (isLowerLimit && isUpperLimit) {\n                            result = this._getArrayOfNumbers(start, end);\n                        }\n                        else if (isLowerLimit && !isUpperLimit) {\n                            result = this._getArrayOfNumbers(start, lastDayInMonth);\n                        }\n                        else if (!isLowerLimit && isUpperLimit) {\n                            result = this._getArrayOfNumbers(START_DAY, end);\n                        }\n                        else {\n                            result = this._getArrayOfNumbers(START_DAY, lastDayInMonth);\n                        }\n                    }\n                    else {\n                        result = this._getArrayOfNumbers(START_DAY, lastDayInMonth);\n                    }\n                    return this._intArraySort(result, direction);\n                };\n                this._getIntArr = function (length) {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    if (!length && length !== 0) {\n                        apd.Model.MessagesFactoryClass.throwInvalidParamsMessage();\n                        return null;\n                    }\n                    return length ? this._getIntArr(length - 1).concat(length) : [];\n                };\n                if (!(this instanceof DataClass)) {\n                    apd.Model.MessagesFactoryClass.throwWrongClassCreationMessage();\n                    return new DataClass(selected, startDateTime, endDateTime, isUTC, yearsListDirection, monthListDirection, daysListDirection);\n                }\n                var self = this;\n                selected.datetime = self.isValidNumber(selected.datetime) ? selected.datetime : null;\n                startDateTime = self.isValidNumber(startDateTime) ? startDateTime : null;\n                endDateTime = self.isValidNumber(endDateTime) ? endDateTime : null;\n                self._isUTC = isUTC;\n                self.selected = self._getSelected(selected, startDateTime, endDateTime);\n                var selectedYear = apd.Model.DateUtilsClass.getYear(this.selected.datetime, this._isUTC);\n                var selectedMonth = apd.Model.DateUtilsClass.getMonth(this.selected.datetime, this._isUTC);\n                self.yearsListDirection = yearsListDirection || self.yearsListDirection;\n                self.monthListDirection = monthListDirection || self.monthListDirection;\n                self.daysListDirection = daysListDirection || self.daysListDirection;\n                self._limitDates = new Model.LimitDatesClass(startDateTime, endDateTime, this._isUTC);\n                self._startDateTime = startDateTime;\n                self._endDateTime = endDateTime;\n                self.years = self._getYearsList(startDateTime, endDateTime, self._limitDates, self.yearsListDirection);\n                self.month = self._getMonthList(startDateTime, endDateTime, self._limitDates, selectedYear, self.monthListDirection);\n                self.days = self._getDaysList(startDateTime, endDateTime, self._limitDates, selectedYear, selectedMonth, self.daysListDirection);\n                return this;\n            }\n            DataClass.getDaysInMonth = function (month, year) {\n                return new Date(year, month + 1, 0).getDate();\n            };\n            return DataClass;\n        })();\n        Model.DataClass = DataClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var DateUtilsClass = (function () {\n            function DateUtilsClass() {\n            }\n            DateUtilsClass.getMonth = function (datetime, isUTC) {\n                var result;\n                if (isUTC) {\n                    result = new Date(datetime).getUTCMonth();\n                }\n                else {\n                    result = new Date(datetime).getMonth();\n                }\n                return result;\n            };\n            DateUtilsClass.getYear = function (datetime, isUTC) {\n                var result;\n                if (isUTC) {\n                    result = new Date(datetime).getUTCFullYear();\n                }\n                else {\n                    result = new Date(datetime).getFullYear();\n                }\n                return result;\n            };\n            DateUtilsClass.getDay = function (datetime, isUTC) {\n                var result;\n                if (isUTC) {\n                    result = new Date(datetime).getUTCDate();\n                }\n                else {\n                    result = new Date(datetime).getDate();\n                }\n                return result;\n            };\n            DateUtilsClass.getDayOfWeek = function (datetime, isUTC) {\n                var result;\n                if (isUTC) {\n                    result = new Date(datetime).getUTCDay();\n                }\n                else {\n                    result = new Date(datetime).getDay();\n                }\n                return result;\n            };\n            return DateUtilsClass;\n        })();\n        Model.DateUtilsClass = DateUtilsClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var DateModelClass = (function () {\n            function DateModelClass(datetime, isUTC) {\n                if (!(this instanceof DateModelClass)) {\n                    apd.Model.MessagesFactoryClass.throwWrongClassCreationMessage();\n                    return new DateModelClass(datetime, isUTC);\n                }\n                this.day = apd.Model.DateUtilsClass.getDay(datetime, this._isUTC);\n                this.dayOfWeek = apd.Model.DateUtilsClass.getDayOfWeek(datetime, this._isUTC);\n                this.month = apd.Model.DateUtilsClass.getMonth(datetime, this._isUTC);\n                this.year = apd.Model.DateUtilsClass.getYear(datetime, this._isUTC);\n                this.datetime = datetime;\n                this.timezone = new Date(datetime).getTimezoneOffset();\n                this._isUTC = isUTC;\n                return this;\n            }\n            DateModelClass.validate = function (model) {\n                return !!(model && model.datetime);\n            };\n            return DateModelClass;\n        })();\n        Model.DateModelClass = DateModelClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var directive;\n    (function (directive) {\n        'use strict';\n        angular.module('angular-pd', [\n            'angular-pd.templates'\n        ]).directive('pureDatepicker', function () {\n            return {\n                restrict: 'E',\n                replace: true,\n                templateUrl: 'apd.html',\n                scope: {\n                    ngModel: '=',\n                    apdStart: '=?',\n                    apdEnd: '=?',\n                    apdDayId: '@?',\n                    apdMonthId: '@?',\n                    apdYearId: '@?',\n                    apdDayClasses: '@?',\n                    apdMonthClasses: '@?',\n                    apdYearClasses: '@?',\n                    apdLocalization: '=?',\n                    apdIsUtc: '=?'\n                },\n                link: function (scope) {\n                    scope.apdIsUtc = scope.apdIsUtc || false;\n                    var settings = {\n                        initDateModel: null,\n                        startDateTime: null,\n                        endDateTime: null\n                    };\n                    var ngModelWatcher = {\n                        handler: null,\n                        start: function (callback) {\n                            ngModelWatcher.handler = scope.$watch('ngModel.datetime', function (value, oldValue) {\n                                if (callback) {\n                                    callback(value, oldValue);\n                                }\n                            }, true);\n                        },\n                        stop: function () {\n                            if (!ngModelWatcher.handler) {\n                                apd.Model.MessagesFactoryClass.throwInvalidParamsMessage();\n                                return false;\n                            }\n                            ngModelWatcher.handler();\n                            return true;\n                        }\n                    };\n                    function getLimitSafeDatetime(day, month, year) {\n                        var datetime = new Date(year, month, day).getTime();\n                        if (!apd.Model.LimitDatesClass.isDateBetweenLimits(datetime, settings.startDateTime, settings.endDateTime)) {\n                            if (!apd.Model.LimitDatesClass.isDateUpperStartLimit(datetime, settings.startDateTime)) {\n                                datetime = settings.startDateTime;\n                            }\n                            else if (!apd.Model.LimitDatesClass.isDateLowerEndLimit(datetime, settings.endDateTime)) {\n                                datetime = settings.endDateTime;\n                            }\n                        }\n                        return datetime;\n                    }\n                    function updateModel(datetime) {\n                        ngModelWatcher.stop();\n                        scope.data.selected = new apd.Model.DateModelClass(datetime, scope.apdIsUtc);\n                        scope.ngModel = scope.data.selected;\n                        ngModelWatcher.start(onModelChange);\n                    }\n                    function onModelChange(datetime, oldValue) {\n                        if (datetime === oldValue) {\n                            return;\n                        }\n                        var day = apd.Model.DateUtilsClass.getDay(datetime, scope.apdIsUtc);\n                        var month = apd.Model.DateUtilsClass.getMonth(datetime, scope.apdIsUtc);\n                        var year = apd.Model.DateUtilsClass.getYear(datetime, scope.apdIsUtc);\n                        datetime = getLimitSafeDatetime(day, month, year);\n                        updateModel(datetime);\n                        scope.data.reloadYearsList();\n                        scope.data.reloadMonthList();\n                        scope.data.reloadDaysList();\n                    }\n                    function getInitDateModel(model) {\n                        var isInitModelValid = apd.Model.DateModelClass.validate(model);\n                        var initDatetime;\n                        if (isInitModelValid) {\n                            initDatetime = model.datetime;\n                        }\n                        else {\n                            initDatetime = new Date().getTime();\n                        }\n                        var day = apd.Model.DateUtilsClass.getDay(initDatetime, scope.apdIsUtc);\n                        var month = apd.Model.DateUtilsClass.getMonth(initDatetime, scope.apdIsUtc);\n                        var year = apd.Model.DateUtilsClass.getYear(initDatetime, scope.apdIsUtc);\n                        var limitSafeDatetime = getLimitSafeDatetime(day, month, year);\n                        return new apd.Model.DateModelClass(limitSafeDatetime, scope.apdIsUtc);\n                    }\n                    function _initData(initDateModel, startDateTime, endDateTime) {\n                        scope.data = new apd.Model.DataClass(initDateModel, startDateTime, endDateTime, scope.apdIsUtc);\n                        scope.ngModel = scope.data.selected;\n                    }\n                    scope.onDaySelectChanged = function (day) {\n                        if (!day)\n                            return;\n                        var datetime = getLimitSafeDatetime(scope.data.selected.day, scope.data.selected.month, scope.data.selected.year);\n                        updateModel(datetime);\n                    };\n                    scope.onMonthSelectChanged = function (month) {\n                        if (!month && month !== 0)\n                            return;\n                        var datetime;\n                        var year = scope.data.selected.year;\n                        var day = scope.data.selected.day;\n                        datetime = getLimitSafeDatetime(day, month, year);\n                        updateModel(datetime);\n                        scope.data.reloadDaysList();\n                    };\n                    scope.onYearSelectChanged = function (year) {\n                        if (!year && year !== 0)\n                            return;\n                        var month = scope.data.selected.month;\n                        var day = scope.data.selected.day;\n                        var datetime = getLimitSafeDatetime(day, month, year);\n                        updateModel(datetime);\n                        scope.data.reloadMonthList();\n                        scope.data.reloadDaysList();\n                    };\n                    function getDateTime(day, month, year) {\n                        if (!day || (!month && month !== 0) || !year) {\n                            apd.Model.MessagesFactoryClass.throwInvalidParamsMessage();\n                        }\n                        return new Date(year, month, day).getTime();\n                    }\n                    function isDayInMonth(day, month, year) {\n                        var daysInMonth = apd.Model.DataClass.getDaysInMonth(month, year);\n                        return day <= daysInMonth;\n                    }\n                    (function _init() {\n                        settings.startDateTime = (scope.apdStart) ? +scope.apdStart : null;\n                        settings.endDateTime = (scope.apdEnd) ? +scope.apdEnd : null;\n                        settings.initDateModel = getInitDateModel(scope.ngModel);\n                        _initData(settings.initDateModel, settings.startDateTime, settings.endDateTime);\n                        var localization = scope.apdLocalization || null;\n                        var week = new apd.Model.WeekClass(localization);\n                        var year = new apd.Model.YearClass(localization);\n                        scope.getDayName = week.getDayName;\n                        scope.getMonthName = year.getMonthName;\n                        ngModelWatcher.start(onModelChange);\n                    })();\n                }\n            };\n        });\n    })(directive = apd.directive || (apd.directive = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var YearClass = (function () {\n            function YearClass(month) {\n                var _this = this;\n                this._setDefaultYear = function () {\n                    return new YearClass(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']);\n                };\n                this.getMonthName = function (monthNum) {\n                    if (!(_this instanceof YearClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    return _this.month[monthNum];\n                };\n                if (!(this instanceof YearClass)) {\n                    apd.Model.MessagesFactoryClass.throwWrongClassCreationMessage();\n                    return new YearClass(month);\n                }\n                if (month) {\n                    this.month = month;\n                    return this;\n                }\n                else {\n                    return this._setDefaultYear();\n                }\n            }\n            return YearClass;\n        })();\n        Model.YearClass = YearClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n"],"sourceRoot":"/source/"}