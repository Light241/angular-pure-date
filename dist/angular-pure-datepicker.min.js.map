{"version":3,"sources":["angular-pure-datepicker.js"],"names":["angular","module","run","$templateCache","put","Settings","isUtc","monthDirection","daysDirection","yearsDirection","daysList","monthList","CommonUtils","exports","isValidNumber","num","isNumber","isNaN","isNotInfinity","isFinite","getArrayOfNumbers","start","result","i","end","push","intArraySort","arr","direction","desc","a","b","sort","getIntArr","length","_getIntArr","concat","DateUtils","getVal","datetime","method","date","Date","call","getDay","prototype","getUTCDate","getDate","getDayOfWeek","getUTCDay","getYear","getUTCFullYear","getFullYear","getMonth","getUTCMonth","getDaysInMonth","month","year","LimitsModel","startDt","endDt","_setStart","dt","d","m","y","this","_setEnd","_setNow","getTime","now","isDateUpperStartLimit","startLimitTime","isDateLowerEndLimit","endLimitTime","isDateBetweenLimits","DateModel","day","dayOfWeek","timezone","getTimezoneOffset","YearsUtils","getYearsList","startDateTime","endDateTime","DEFAULT_YEARS_COUNT","startDate","endDate","nowDate","selectedYear","selected","latestPossibleYear","firstPossibleYear","yearsListDirection","MonthUtils","getMonthList","START_MONTH","END_MONTH","isYearOfLowerLimit","isYearOfUpperLimit","monthListDirection","DaysUtils","getDaysList","selectedMonth","START_DAY","lastDayInMonth","DataClass","isMonthOfLowerLimit","isMonthOfUpperLimit","isLowerLimit","isUpperLimit","daysListDirection","_getSelected","isBiggerThenStart","isEqualToStart","isLowerThenEnd","isEqualToEnd","reloadYearsList","years","_startDateTime","_endDateTime","reloadMonthList","reloadDaysList","days","directive","restrict","replace","templateUrl","scope","ngModel","apdStart","apdEnd","apdDayId","apdMonthId","apdYearId","apdDayClasses","apdMonthClasses","apdYearClasses","apdLocalization","apdIsUtc","link","getLimitSafeDatetime","settings","updateModel","ngModelWatcher","stop","data","onModelChange","oldValue","getInitDateModel","model","initDatetime","isInitModelValid","validate","limitSafeDatetime","_initData","initDateModel","handler","callback","$watch","value","onDaySelectChanged","onMonthSelectChanged","onYearSelectChanged","getDayName","week","getName","getMonthName"],"mappings":"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","file":"angular-pure-datepicker.min.js","sourcesContent":["angular.module(\"angular-pd.templates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"apd.html\",\"<div class=apd_root><select ng-model=data.selected.day ng-options=\\\"day for day in data.days\\\" ng-init=\\\"data.selected.day = data.days[0]\\\" ng-change=onDaySelectChanged(data.selected.day) id={{::apdDayId}} class=\\\"apd_elem apd_select_day apd_select {{::apdDayClasses}}\\\"></select><span ng-bind=getDayName(data.selected.dayOfWeek) class=\\\"apd_elem apd_day_of_week\\\"></span><select ng-model=data.selected.month ng-options=\\\"getMonthName(month) for month in data.month\\\" ng-init=\\\"data.selected.month = data.month[0]\\\" ng-change=onMonthSelectChanged(data.selected.month) id={{::apdMonthId}} class=\\\"apd_elem apd_select_month apd_select {{::apdMonthClasses}}\\\"></select><select ng-model=data.selected.year ng-options=\\\"year for year in data.years\\\" ng-init=\\\"data.selected.year = data.years[0]\\\" ng-change=onYearSelectChanged(data.selected.year) id={{::apdYearId}} class=\\\"apd_elem apd_select_year apd_select {{::apdYearClasses}}\\\"></select></div>\");}]);\n'use strict';\n\nvar Settings = {\n    isUtc: false,\n    monthDirection: 'asc',\n    daysDirection: 'asc',\n    yearsDirection: 'desc',\n    daysList: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    monthList: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar CommonUtils = (function () {\n    'use strict';\n\n    var exports = {\n        isValidNumber: function (num) {\n            var isNumber = !isNaN(num);\n            var isNotInfinity = isFinite(num);\n            return isNumber && isNotInfinity;\n        },\n        getArrayOfNumbers: function (start) {\n            var result = [];\n\n            for (var i = start; i <= end; i++) {\n                result.push(i);\n            }\n\n            return result;\n        },\n        intArraySort: function (arr, direction) {\n            function desc(a, b) {\n                return b - a;\n            }\n\n            switch (direction) {\n                default:\n                    return arr.sort(function (a, b) {\n                        return a - b;\n                    });\n                case \"desc\":\n                    return arr.sort(desc);\n            }\n        },\n        getIntArr: function (length) {\n            if (!length && length !== 0) return;\n            return length ? exports._getIntArr(length - 1).concat(length) : [];\n        }\n    };\n\n    return exports;\n})();\nvar DateUtils = (function (Settings) {\n    'use strict';\n\n    function getVal(datetime, method) {\n        var date = new Date(datetime);\n        return method.call(date);\n    }\n\n    var exports = {\n        getDay: function (datetime) {\n            var method = (Settings.isUTC) ? Date.prototype.getUTCDate : Date.prototype.getDate;\n            return getVal(datetime, method);\n        },\n        getDayOfWeek: function (datetime) {\n            var method = (Settings.isUTC) ? Date.prototype.getUTCDay : Date.prototype.getDay;\n            return getVal(datetime, method);\n        },\n        getYear: function (datetime) {\n            var method = (Settings.isUTC) ? Date.prototype.getUTCFullYear : Date.prototype.getFullYear;\n            return getVal(datetime, method);\n        },\n        getMonth: function (datetime) {\n            var method = (Settings.isUTC) ? Date.prototype.getUTCMonth : Date.prototype.getMonth;\n            return getVal(datetime, method);\n        },\n        getDaysInMonth: function (month, year) {\n            return new Date(year, month + 1, 0).getDate();\n        }\n    };\n\n    return exports;\n})(Settings);\nvar LimitsModel = (function (DateUtils) {\n    'use strict';\n\n    function LimitsModel(startDt, endDt) {\n\n        var exports = {\n            start: {},\n            end: {},\n            now: {},\n            isDateUpperStartLimit: function (dt, startLimitTime) {\n                if (!startLimitTime) return true;\n                return (dt > startLimitTime);\n            },\n            isDateLowerEndLimit: function (dt, endLimitTime) {\n                if (!endLimitTime) return true;\n                return (dt < endLimitTime);\n            },\n            isDateBetweenLimits: function (dt, startLimitTime, endLimitTime) {\n                return (exports.isDateUpperStartLimit(dt, startLimitTime) && exports.isDateLowerEndLimit(dt, endLimitTime));\n            }\n        };\n\n        function _setStart(dt) {\n            exports.start.d = DateUtils.getDay(dt);\n            exports.start.m = DateUtils.getMonth(dt);\n            exports.start.y = DateUtils.getYear(dt);\n            exports.start.dt = dt;\n            return this;\n        }\n\n        function _setEnd(dt) {\n            exports.end.d = DateUtils.getDay(dt);\n            exports.end.m = DateUtils.getMonth(dt);\n            exports.end.y = DateUtils.getYear(dt);\n            exports.end.dt = dt;\n            return this;\n        }\n\n        function _setNow() {\n            var dt = new Date().getTime();\n            exports.now.d = DateUtils.getDay(dt);\n            exports.now.m = DateUtils.getMonth(dt);\n            exports.now.y = DateUtils.getYear(dt);\n            exports.now.dt = dt;\n            return this;\n        }\n\n        _setStart(startDt);\n        _setEnd(endDt);\n        _setNow();\n        \n        return exports;\n    }\n    \n    return LimitsModel;\n})(DateUtils);\nvar DateModel = (function (DateUtils) {\n    'use strict';\n\n    function DateModel(datetime) {\n        this.day = DateUtils.getDay(datetime);\n        this.dayOfWeek = DateUtils.getDayOfWeek(datetime);\n        this.month = DateUtils.getMonth(datetime);\n        this.year = DateUtils.getYear(datetime);\n        this.datetime = datetime;\n        this.timezone = new Date(datetime).getTimezoneOffset();\n\n        return this;\n    }\n\n    return DateModel;\n})(DateUtils);\nvar YearsUtils = (function (LimitsModel, DateUtils, CommonUtils) {\n    'use strict';\n\n    var exports = {\n        getYearsList: function (startDateTime, endDateTime) {\n            var result = [];\n            var DEFAULT_YEARS_COUNT = 10;\n\n            var start = LimitsModel.startDate.year;\n            var end = LimitsModel.endDate.year;\n            var now = LimitsModel.nowDate.year;\n            var selectedYear = DateUtils.getYear(this.selected.datetime);\n            var latestPossibleYear = (selectedYear > now) ? selectedYear : now;\n            var firstPossibleYear = (selectedYear < now) ? selectedYear : now;\n            latestPossibleYear = latestPossibleYear + (DEFAULT_YEARS_COUNT - 1);\n            firstPossibleYear = firstPossibleYear - (DEFAULT_YEARS_COUNT - 1);\n\n            //start = 2011, end = 2014\n            if ((startDateTime && endDateTime) && (startDateTime < endDateTime)) {\n                result = CommonUtils.getArrayOfNumbers(start, end);\n            }\n\n            //start = 2014, end = 2011\n            else if ((startDateTime && endDateTime) && (startDateTime > endDateTime)) {\n                result = CommonUtils.getArrayOfNumbers(end, start);\n            }\n\n            //start = 2011, end = 2011\n            else if ((startDateTime && endDateTime) && (startDateTime === endDateTime)) {\n                result = CommonUtils.getArrayOfNumbers(start, end);\n            }\n\n            //start = 2014, end = null\n            else if (startDateTime && !endDateTime) {\n                result = CommonUtils.getArrayOfNumbers(start, latestPossibleYear);\n            }\n\n            //start = null, end = 2014\n            else if (!startDateTime && endDateTime) {\n                //now = 2013 (or 2014),  end = 2014\n                if (LimitsModel.endDate.year >= LimitsModel.nowDate.year) {\n\n                    if ((firstPossibleYear - DEFAULT_YEARS_COUNT) > (end - DEFAULT_YEARS_COUNT)) {\n                        result = CommonUtils.getArrayOfNumbers(firstPossibleYear, end);\n                    } else {\n                        result = CommonUtils.getArrayOfNumbers(end - (DEFAULT_YEARS_COUNT - 1), end);\n                    }\n\n                }\n                //now = 2015,  end = 2014\n                else if (LimitsModel.endDate.year > LimitsModel.nowDate.year) {\n                    result = CommonUtils.getArrayOfNumbers(end - (DEFAULT_YEARS_COUNT - 1), end);\n                }\n\n            }\n\n            //start = null, end = null\n            else if (!startDateTime && !endDateTime) {\n                result = CommonUtils.getArrayOfNumbers(firstPossibleYear, latestPossibleYear);\n            }\n\n            return CommonUtils.intArraySort(result, Settings.yearsListDirection);\n        }\n    };\n\n    return exports;\n})(LimitsModel, DateUtils, CommonUtils);\nvar MonthUtils = (function (LimitsModel, DateUtils, CommonUtils) {\n    'use strict';\n\n    var exports = {\n        getMonthList: function (startDateTime, endDateTime, selectedYear) {\n            var result;\n            var START_MONTH = 0;\n            var END_MONTH = 11;\n\n            //TODO (S.Panfilov)  check\n            if (startDateTime || endDateTime) {\n                var isYearOfLowerLimit = (startDateTime) ? LimitsModel.startDate.year === selectedYear : false;\n                var isYearOfUpperLimit = (endDateTime) ? LimitsModel.endDate.year === selectedYear : false;\n                var start = (startDateTime) ? LimitsModel.startDate.month : START_MONTH;\n                var end = (endDateTime) ? LimitsModel.endDate.month : END_MONTH;\n\n                // startYear == 2015, nowYear == 2015, endYear == 2015\n                if (isYearOfLowerLimit && isYearOfUpperLimit) {\n                    result = CommonUtils.getArrayOfNumbers(start, end);\n                }\n                // startYear == 2015, nowYear == 2015, endYear == 2016 (or null)\n                else if (isYearOfLowerLimit && !isYearOfUpperLimit) {\n                    result = CommonUtils.getArrayOfNumbers(start, END_MONTH);\n                }\n                // startYear == 2014 (or null), nowYear == 2015, endYear == 2015\n                else if (!isYearOfLowerLimit && isYearOfUpperLimit) {\n                    result = CommonUtils.getArrayOfNumbers(START_MONTH, end);\n                }\n                else {\n                    // in all other cases return array of 12 month\n                    result = CommonUtils.getArrayOfNumbers(START_MONTH, END_MONTH);\n                }\n            } else {\n                // in all other cases return array of 12 month\n                result = CommonUtils.getArrayOfNumbers(START_MONTH, END_MONTH);\n            }\n\n            return CommonUtils.intArraySort(result, Settings.monthListDirection);\n        }\n    };\n\n    return exports;\n})(LimitsModel, DateUtils, CommonUtils);\nvar DaysUtils = (function (LimitsModel, DateUtils, CommonUtils) {\n    'use strict';\n\n    var exports = {\n        getDaysList: function (startDateTime, endDateTime, selectedYear, selectedMonth) {\n            var result;\n            var START_DAY = 1;\n            var lastDayInMonth = DataClass.getDaysInMonth(selectedMonth, selectedYear);\n\n            //TODO (S.Panfilov)  check\n            if (startDateTime || endDateTime) {\n                var isYearOfLowerLimit = (startDateTime) ? LimitsModel.startDate.year === selectedYear : false;\n                var isYearOfUpperLimit = (endDateTime) ? LimitsModel.endDate.year === selectedYear : false;\n                var isMonthOfLowerLimit = (startDateTime) ? LimitsModel.startDate.month === selectedMonth : false;\n                var isMonthOfUpperLimit = (endDateTime) ? LimitsModel.endDate.month === selectedMonth : false;\n\n                var isLowerLimit = (isYearOfLowerLimit && isMonthOfLowerLimit);\n                var isUpperLimit = (isYearOfUpperLimit && isMonthOfUpperLimit);\n\n                var start = (startDateTime) ? LimitsModel.startDate.day : START_DAY;\n                var end = (endDateTime) ? LimitsModel.endDate.day : lastDayInMonth;\n\n                if (isLowerLimit && isUpperLimit) {\n                    result = CommonUtils.getArrayOfNumbers(start, end);\n                } else if (isLowerLimit && !isUpperLimit) {\n                    result = CommonUtils.getArrayOfNumbers(start, lastDayInMonth);\n                } else if (!isLowerLimit && isUpperLimit) {\n                    result = CommonUtils.getArrayOfNumbers(START_DAY, end);\n                } else {\n                    // in all other cases return array of 12 month\n                    result = CommonUtils.getArrayOfNumbers(START_DAY, lastDayInMonth);\n                }\n            } else {\n                // in all other cases return array of 12 month\n                result = CommonUtils.getArrayOfNumbers(START_DAY, lastDayInMonth);\n            }\n\n            return CommonUtils.intArraySort(result, Settings.daysListDirection);\n        }\n    };\n\n    return exports;\n})(LimitsModel, DateUtils, CommonUtils);\nvar DataClass = (function (DateUtils, CommonUtils, YearsUtils, MonthUtils, DaysUtils, DateModel) {\n\n    function DataClass(selected, startDateTime, endDateTime) {\n        selected.datetime = CommonUtils.isValidNumber(selected.datetime) ? selected.datetime : null;\n        startDateTime = CommonUtils.isValidNumber(startDateTime) ? startDateTime : null;\n        endDateTime = CommonUtils.isValidNumber(endDateTime) ? endDateTime : null;\n\n        this.selected = this._getSelected(selected, startDateTime, endDateTime);\n        var selectedYear = DateUtils.getYear(this.selected.datetime);\n        var selectedMonth = DateUtils.getMonth(this.selected.datetime);\n\n        this._limitDates = new LimitsModel(startDateTime, endDateTime);\n        this._startDateTime = startDateTime;\n        this._endDateTime = endDateTime;\n        this.years = YearsUtils.getYearsList(startDateTime, endDateTime);\n        this.month = MonthUtils.getMonthList(startDateTime, endDateTime, selectedYear);\n        this.days = DaysUtils.getDaysList(startDateTime, endDateTime, selectedYear, selectedMonth);\n\n        return this;\n    }\n\n    _getSelected = function (selected, startDateTime, endDateTime) {\n        var result;\n\n        var isBiggerThenStart = (selected.datetime > startDateTime);\n        var isEqualToStart = (selected.datetime === startDateTime);\n        var isLowerThenEnd = (selected.datetime > endDateTime);\n        var isEqualToEnd = (selected.datetime === endDateTime);\n\n        //start == 1; selected == 1 or 2 or 3; end == 3;\n        if ((isBiggerThenStart || isEqualToStart) || (isLowerThenEnd || isEqualToEnd)) {\n            result = new DateModel(selected.datetime);\n        } else\n        //start == 1; selected == 0\n        if (!isBiggerThenStart) {\n            result = new DateModel(startDateTime);\n        } else\n        //selected == 4; end == 3;\n        if (!isBiggerThenStart) {\n            result = new DateModel(endDateTime);\n        }\n        //paranoid case\n        else {\n            result = new DateModel(new Date().getTime());\n        }\n\n        return result;\n    };\n\n    reloadYearsList = function () {\n        this.years = YearsUtils.getYearsList(this._startDateTime, this._endDateTime);\n        return this;\n    };\n\n    reloadMonthList = function () {\n        var selectedYear = DateUtils.getYear(this.selected.datetime);\n        this.month = MonthUtils.getMonthList(this._startDateTime, this._endDateTime, selectedYear);\n        return this;\n    };\n\n    reloadDaysList = function () {\n        var selectedYear = DateUtils.getYear(this.selected.datetime);\n        var selectedMonth = DateUtils.getMonth(this.selected.datetime);\n        this.days = DaysUtils.getDaysList(this._startDateTime, this._endDateTime, selectedYear, selectedMonth);\n        return this;\n    };\n\n})(DateUtils, CommonUtils, YearsUtils, MonthUtils, DaysUtils, DateModel);\n'use strict';\n\nangular.module('angular-pd', [\n    'angular-pd.templates'\n])\n\n    .directive('pureDatepicker', function () {\n        return {\n            restrict: 'E',\n            replace: true,\n            templateUrl: 'apd.html',\n            scope: {\n                ngModel: '=',\n                apdStart: '=?',\n                apdEnd: '=?',\n                apdDayId: '@?',\n                apdMonthId: '@?',\n                apdYearId: '@?',\n                apdDayClasses: '@?',\n                apdMonthClasses: '@?',\n                apdYearClasses: '@?',\n                apdLocalization: '=?',\n                apdIsUtc: '=?'\n            },\n            link: function (scope) {\n\n                scope.apdIsUtc = scope.apdIsUtc || false;\n\n                //TODO (S.Panfilov) check for cross-browser support\n                //TODO (S.Panfilov) may be should add tests\n                var settings = {\n                    initDateModel: null,\n                    startDateTime: null,\n                    endDateTime: null\n                };\n\n                var ngModelWatcher = {\n                    handler: null,\n                    start: function (callback) {\n                        ngModelWatcher.handler = scope.$watch('ngModel.datetime', function (value, oldValue) {\n                            if (callback) {\n                                callback(value, oldValue)\n                            }\n\n                        }, true);\n                    },\n                    stop: function () {\n                        ngModelWatcher.handler();\n                        return true;\n                    }\n                };\n\n\n                function getLimitSafeDatetime(day, month, year) {\n\n                    var datetime = new Date(year, month, day).getTime();\n\n                    if (!LimitsModel.isDateBetweenLimits(datetime, settings.startDateTime, settings.endDateTime)) {\n                        if (!LimitsModel.isDateUpperStartLimit(datetime, settings.startDateTime)) {\n                            datetime = settings.startDateTime;\n                        } else if (!LimitsModel.isDateLowerEndLimit(datetime, settings.endDateTime)) {\n                            datetime = settings.endDateTime;\n                        }\n                    }\n\n                    return datetime;\n                }\n\n                function updateModel(datetime) {\n                    ngModelWatcher.stop();\n                    scope.data.selected = new DateModel(datetime, scope.apdIsUtc);\n                    scope.ngModel = scope.data.selected;\n                    ngModelWatcher.start(onModelChange);\n                }\n\n                function onModelChange(datetime, oldValue) {\n                    if (datetime === oldValue) {\n                        return;\n                    }\n\n                    var day = DateUtils.getDay(datetime, scope.apdIsUtc);\n                    var month = DateUtils.getMonth(datetime, scope.apdIsUtc);\n                    var year = DateUtils.getYear(datetime, scope.apdIsUtc);\n\n                    datetime = getLimitSafeDatetime(day, month, year);\n                    updateModel(datetime);\n\n                    scope.data.reloadYearsList();\n                    scope.data.reloadMonthList();\n                    scope.data.reloadDaysList();\n                }\n\n                function getInitDateModel(model) {\n                    var isInitModelValid = DateModel.validate(model);\n                    var initDatetime;\n\n                    if (isInitModelValid) {\n                        initDatetime = model.datetime\n                    } else {\n                        initDatetime = new Date().getTime();\n                    }\n\n                    var day = DateUtils.getDay(initDatetime, scope.apdIsUtc);\n                    var month = DateUtils.getMonth(initDatetime, scope.apdIsUtc);\n                    var year = DateUtils.getYear(initDatetime, scope.apdIsUtc);\n\n                    var limitSafeDatetime = getLimitSafeDatetime(day, month, year);\n\n                    return new DateModel(limitSafeDatetime, scope.apdIsUtc);\n                }\n\n                function _initData(initDateModel, startDateTime, endDateTime) {\n                    scope.data = new DataClass(initDateModel, startDateTime, endDateTime, scope.apdIsUtc);\n                    scope.ngModel = scope.data.selected;\n                }\n\n\n                scope.onDaySelectChanged = function (day) {\n                    if (!day) return;\n\n                    var datetime = getLimitSafeDatetime(scope.data.selected.day, scope.data.selected.month, scope.data.selected.year);\n                    updateModel(datetime);\n                };\n\n                scope.onMonthSelectChanged = function (month) {\n                    if (!month && month !== 0) return;\n\n                    var datetime;\n                    var year = scope.data.selected.year;\n                    var day = scope.data.selected.day;\n\n                    datetime = getLimitSafeDatetime(day, month, year);\n                    updateModel(datetime);\n\n                    scope.data.reloadDaysList();\n                };\n\n                scope.onYearSelectChanged = function (year) {\n                    if (!year && year !== 0) return;\n\n                    var month = scope.data.selected.month;\n                    var day = scope.data.selected.day;\n\n                    var datetime = getLimitSafeDatetime(day, month, year);\n                    updateModel(datetime);\n\n                    scope.data.reloadMonthList();\n                    scope.data.reloadDaysList();\n                };\n\n                (function _init() {\n                    settings.startDateTime = (scope.apdStart) ? +scope.apdStart : null;\n                    settings.endDateTime = (scope.apdEnd) ? +scope.apdEnd : null;\n                    settings.initDateModel = getInitDateModel(scope.ngModel);\n                    _initData(settings.initDateModel, settings.startDateTime, settings.endDateTime);\n\n                    var localization = scope.apdLocalization || null;\n                    //var week = new DaysClass(localization);\n                    //var year = new MonthClass(localization);\n                    scope.getDayName = week.getName;\n                    scope.getMonthName = year.getName;\n\n                    ngModelWatcher.start(onModelChange);\n                })();\n\n            }\n        }\n    });"],"sourceRoot":"/source/"}