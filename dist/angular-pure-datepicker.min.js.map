{"version":3,"sources":["angular-pure-datepicker.js"],"names":["angular","module","run","$templateCache","put","apd","directive","DayOfWeek","name","short","this","DaysOfWeek","days","_this","getListOfShorts","result","i","list","length","dayOfWeek","push","getListOfNames","getDayOfWeekShortName","dayNum","shorts","getDayOfWeekName","names","daysOfWeek","DateUtilsFactory","MessagesFactory","restrict","replace","templateUrl","scope","ngModel","apdStart","apdEnd","apdDayId","apdMonthId","apdYearId","apdDayClasses","apdMonthClasses","apdYearClasses","link","init","settings","initDateModel","getDateModel","startDateTime","endDateTime","_initData","data","getData","selected","updateModel","datetime","dateModel","getDateTime","day","month","year","throwInvalidParamsMessage","Date","getTime","isCorrectDay","daysInMonth","getDaysInMonth","onDaySelectChanged","onMonthSelectChanged","onYearSelectChanged","messages","MessagesFactoryClass","wrongInstance","invalidParams","invalidDateModel","throwDeveloperError","message","console","error","prototype","throwModelValidationMessage","field","throwWrongInstanceMessage","factory","dateUtils","DateModelClass","date","getDate","getDay","getMonth","getFullYear","timezone","getTimezoneOffset","DataClass","_getSelected","isBiggerThenStart","isEqualToStart","isLowerThenEnd","isEqualToEnd","_getDefaultDaysList","daysCount","_getIntArr","_getDefaultMonthList","_getArrayOfNumbers","_getDefaultYearsList","yearsCount","curYear","direction","_intArraySort","arr","desc","a","b","sort","start","end","_getFullYear","_getMonth","_getDay","_getNumList","timeFunc","callback","concat","self","years","bind","call","exports","validateModel","model","isValidModel","warn"],"mappings":"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","file":"angular-pure-datepicker.min.js","sourcesContent":["angular.module(\"angular-pd.templates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"apd.html\",\"<div class=apd_root><select ng-model=data.selected.day ng-options=\\\"day for day in data.days\\\" ng-init=\\\"data.selected.day = data.days[0]\\\" ng-change=onDaySelectChanged(data.selected.day) id={{::apdDayId}} class=\\\"apd_elem apd_select_day apd_select {{::apdDayClasses}}\\\"></select><span title={{getDayOfWeekName(data.selected.dayOfWeek)}} ng-bind=getDayOfWeekShortName(data.selected.dayOfWeek) class=\\\"apd_elem apd_day_of_week\\\"></span><select ng-model=data.selected.month ng-options=\\\"(month + 1) for month in data.month\\\" ng-init=\\\"data.selected.month = data.month[0]\\\" ng-change=onMonthSelectChanged(data.selected.month) id={{::apdMonthId}} class=\\\"apd_elem apd_select_month apd_select {{::apdMonthClasses}}\\\"></select><select ng-model=data.selected.year ng-options=\\\"year for year in data.years\\\" ng-init=\\\"data.selected.year = data.years[0]\\\" ng-change=onYearSelectChanged(data.selected.year) id={{::apdYearId}} class=\\\"apd_elem apd_select_year apd_select {{::apdYearClasses}}\\\"></select></div>\");}]);\n//module apd.main {\n//    'use strict';\nangular.module('angular-pd', [\n    'angular-pd.datepicker',\n    'angular-pd.date_utils',\n    'angular-pd.messages'\n]);\n//} \n\n/// <reference path=\"main.ts\" />\n//TODO (S.Panfilov)  is this references necessary?\nvar apd;\n(function (apd) {\n    var directive;\n    (function (directive) {\n        'use strict';\n        var DayOfWeek = (function () {\n            function DayOfWeek(name, short) {\n                if (!(this instanceof DayOfWeek)) {\n                }\n                this.name = name;\n                this.short = short;\n                return this;\n            }\n            return DayOfWeek;\n        })();\n        var DaysOfWeek = (function () {\n            function DaysOfWeek(days) {\n                var _this = this;\n                this.getListOfShorts = function () {\n                    var result = [];\n                    for (var i = 0; i < _this.list.length; i++) {\n                        var dayOfWeek = _this.list[i];\n                        result.push(dayOfWeek.short);\n                    }\n                    return result;\n                };\n                this.getListOfNames = function () {\n                    var result = [];\n                    for (var i = 0; i < _this.list.length; i++) {\n                        var dayOfWeek = _this.list[i];\n                        result.push(dayOfWeek.name);\n                    }\n                    return result;\n                };\n                this.getDayOfWeekShortName = function (dayNum) {\n                    return _this.shorts[dayNum];\n                };\n                this.getDayOfWeekName = function (dayNum) {\n                    return _this.names[dayNum];\n                };\n                if (!(this instanceof DaysOfWeek)) {\n                }\n                this.list = days;\n                this.shorts = this.getListOfShorts();\n                this.names = this.getListOfNames();\n                return this;\n            }\n            return DaysOfWeek;\n        })();\n        var daysOfWeek = new DaysOfWeek([\n            new DayOfWeek('Sunday', 'Sun'),\n            new DayOfWeek('Monday', 'Mon'),\n            new DayOfWeek('Tuesday', 'Tue'),\n            new DayOfWeek('Wednesday', 'Wed'),\n            new DayOfWeek('Thursday', 'Thu'),\n            new DayOfWeek('Friday', 'Fri'),\n            new DayOfWeek('Saturday', 'Sat')\n        ]);\n        angular.module('angular-pd.datepicker', [\n            'angular-pd.templates'\n        ]).directive('pureDatepicker', ['DateUtilsFactory', 'MessagesFactory', function (DateUtilsFactory, MessagesFactory) {\n            return {\n                restrict: 'E',\n                replace: true,\n                templateUrl: 'apd.html',\n                scope: {\n                    ngModel: '=',\n                    apdStart: '=?',\n                    apdEnd: '=?',\n                    apdDayId: '@?',\n                    apdMonthId: '@?',\n                    apdYearId: '@?',\n                    apdDayClasses: '@?',\n                    apdMonthClasses: '@?',\n                    apdYearClasses: '@?'\n                },\n                link: function (scope) {\n                    var settings = {\n                        initDateModel: null,\n                        startDateTime: null,\n                        endDateTime: null\n                    };\n                    function init() {\n                        settings.initDateModel = DateUtilsFactory.getDateModel(scope.ngModel);\n                        settings.startDateTime = (scope.apdStart) ? +scope.apdStart : null;\n                        settings.endDateTime = (scope.apdEnd) ? +scope.apdEnd : null;\n                        _initData(settings.initDateModel, settings.startDateTime, settings.endDateTime);\n                        scope.getDayOfWeekShortName = daysOfWeek.getDayOfWeekShortName;\n                        scope.getDayOfWeekName = daysOfWeek.getDayOfWeekName;\n                    }\n                    init();\n                    //TODO (S.Panfilov) missed type checking for a apd.dateUtils.DateModel\n                    function _initData(initDateModel, startDateTime, endDateTime) {\n                        scope.data = DateUtilsFactory.getData(initDateModel, startDateTime, endDateTime);\n                        scope.ngModel = scope.data.selected;\n                    }\n                    function updateModel(datetime) {\n                        var dateModel = { datetime: datetime };\n                        scope.data.selected = DateUtilsFactory.getDateModel(dateModel);\n                        scope.ngModel = scope.data.selected;\n                    }\n                    //scope.$watch('ngModel.datetime', function (value, oldValue) {\n                    //    if (value === oldValue) {\n                    //        return;\n                    //    }\n                    //\n                    //    _initData(settings.initDateModel, settings.startDateTime, settings.endDateTime);\n                    //}, true);\n                    scope.onDaySelectChanged = function (day) {\n                        if (!day)\n                            return;\n                        var datetime = getDateTime(scope.data.selected.day, scope.data.selected.month, scope.data.selected.year);\n                        updateModel(datetime);\n                    };\n                    scope.onMonthSelectChanged = function (month) {\n                        if (!month && month !== 0)\n                            return;\n                        var datetime;\n                        var year = scope.data.selected.year;\n                        var day = scope.data.selected.day;\n                        if (!isCorrectDay(day, month, year)) {\n                            day = scope.data.getDaysInMonth(month, year);\n                        }\n                        datetime = getDateTime(day, month, year);\n                        updateModel(datetime);\n                    };\n                    scope.onYearSelectChanged = function (year) {\n                        if (!year && year !== 0)\n                            return;\n                        var datetime;\n                        var month = scope.data.selected.month;\n                        var day = scope.data.selected.day;\n                        if (!isCorrectDay(day, month, year)) {\n                            day = scope.data.getDaysInMonth(year, year);\n                        }\n                        datetime = getDateTime(day, month, year);\n                        updateModel(datetime);\n                    };\n                    function getDateTime(day, month, year) {\n                        if (!day || (!month && month !== 0) || !year) {\n                            MessagesFactory.throwInvalidParamsMessage();\n                        }\n                        return new Date(year, month, day).getTime();\n                    }\n                    function isCorrectDay(day, month, year) {\n                        var daysInMonth = scope.data.getDaysInMonth(month, year);\n                        return day <= daysInMonth;\n                    }\n                }\n            };\n        }]);\n    })(directive = apd.directive || (apd.directive = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var messages;\n    (function (messages) {\n        'use strict';\n        var MessagesFactoryClass = (function () {\n            function MessagesFactoryClass() {\n                this.messages = {\n                    wrongInstance: 'Class created without \\'new\\', wrong \\'this\\'',\n                    invalidParams: 'Invalid params',\n                    invalidDateModel: 'Invalid date model'\n                };\n                this.throwDeveloperError = function (message) {\n                    console.error(message);\n                };\n            }\n            MessagesFactoryClass.prototype.throwModelValidationMessage = function (field) {\n                //TODO (S.Panfilov) possibly problems with this\n                this.throwDeveloperError(this.messages.invalidDateModel + ': error on field \\\"' + field + '+\\\"');\n            };\n            MessagesFactoryClass.prototype.throwInvalidParamsMessage = function () {\n                //TODO (S.Panfilov) possibly problems with this\n                this.throwDeveloperError(this.messages.invalidParams);\n            };\n            MessagesFactoryClass.prototype.throwWrongInstanceMessage = function () {\n                //TODO (S.Panfilov) possibly problems with this\n                this.throwDeveloperError(this.messages.wrongInstance);\n            };\n            return MessagesFactoryClass;\n        })();\n        angular.module('angular-pd.messages', []).factory('MessagesFactory', function () {\n            return new MessagesFactoryClass();\n        });\n    })(messages = apd.messages || (apd.messages = {}));\n})(apd || (apd = {}));\n\n/// <reference path=\"messages.ts\" />\nvar apd;\n(function (apd) {\n    var dateUtils;\n    (function (dateUtils) {\n        'use strict';\n        var DateModelClass = (function () {\n            function DateModelClass(datetime) {\n                if (!(this instanceof DateModelClass)) {\n                }\n                var date = new Date(datetime);\n                this.day = date.getDate();\n                this.dayOfWeek = date.getDay();\n                this.month = date.getMonth();\n                this.year = date.getFullYear();\n                this.datetime = datetime;\n                this.timezone = date.getTimezoneOffset();\n                return this;\n            }\n            return DateModelClass;\n        })();\n        var DataClass = (function () {\n            function DataClass(selected, startDateTime, endDateTime) {\n                this._getSelected = function (selected, startDateTime, endDateTime) {\n                    var result;\n                    var isBiggerThenStart = (selected.datetime > startDateTime);\n                    var isEqualToStart = (selected.datetime === startDateTime);\n                    var isLowerThenEnd = (selected.datetime > endDateTime);\n                    var isEqualToEnd = (selected.datetime === endDateTime);\n                    //start == 1; selected == 1 or 2 or 3; end == 3;\n                    if ((isBiggerThenStart || isEqualToStart) && (isLowerThenEnd || isEqualToEnd)) {\n                        result = new DateModelClass(selected.datetime);\n                    }\n                    else \n                    //start == 1; selected == 0\n                    if (!isBiggerThenStart) {\n                        result = new DateModelClass(startDateTime);\n                    }\n                    //selected == 4; end == 3;\n                    if (!isBiggerThenStart) {\n                        result = new DateModelClass(endDateTime);\n                    }\n                    else {\n                        result = new DateModelClass(new Date().getTime());\n                    }\n                    return result;\n                };\n                this._getDefaultDaysList = function (month, year) {\n                    var daysCount = this.getDaysInMonth(month, year);\n                    return this._getIntArr(daysCount);\n                };\n                this._getDefaultMonthList = function () {\n                    return this._getArrayOfNumbers(0, 11);\n                };\n                this._getDefaultYearsList = function () {\n                    var yearsCount = 20;\n                    var curYear = new Date().getFullYear();\n                    var direction = 'desc';\n                    return this._intArraySort(this._getArrayOfNumbers(curYear - (yearsCount - 1), curYear), direction);\n                };\n                this._intArraySort = function (arr, direction) {\n                    if (direction === void 0) { direction = 'asc'; }\n                    function desc(a, b) {\n                        return b - a;\n                    }\n                    switch (direction) {\n                        default:\n                            return arr.sort(function (a, b) {\n                                return a - b;\n                            });\n                        case \"desc\":\n                            return arr.sort(desc);\n                    }\n                };\n                this._getArrayOfNumbers = function (start, end) {\n                    var result = [];\n                    for (var i = start; i <= end; i++) {\n                        result.push(i);\n                    }\n                    return result;\n                };\n                this._getFullYear = function (date) {\n                    return date.getFullYear();\n                };\n                this._getMonth = function (date) {\n                    return date.getMonth();\n                };\n                this._getDay = function (date) {\n                    return date.getDate();\n                };\n                //TODO (S.Panfilov) not any, but functions types\n                this._getNumList = function (startDateTime, endDateTime, timeFunc, callback) {\n                    var result = [];\n                    var start;\n                    var end;\n                    //start = 2011, end = 2014\n                    if ((startDateTime && endDateTime) && (startDateTime < endDateTime)) {\n                        start = timeFunc(new Date(startDateTime));\n                        end = timeFunc(new Date(endDateTime));\n                        result = this._getArrayOfNumbers(start, end);\n                    }\n                    else if ((startDateTime && endDateTime) && (startDateTime > endDateTime)) {\n                        start = timeFunc(new Date(endDateTime));\n                        end = timeFunc(new Date(startDateTime));\n                        //TODO (S.Panfilov) throw warning here, that dates inverted\n                        //apd.messages.MessagesFactoryClass.throwMessage('asdsadasd');\n                        result = this._getArrayOfNumbers(start, end);\n                    }\n                    else if ((startDateTime && endDateTime) && (startDateTime === endDateTime)) {\n                        start = timeFunc(new Date(startDateTime));\n                        result = this._getArrayOfNumbers(start, start);\n                    }\n                    else if (startDateTime && !endDateTime) {\n                        start = timeFunc(new Date(startDateTime));\n                        result = this._getArrayOfNumbers(start, start);\n                    }\n                    else if (!startDateTime && endDateTime) {\n                        end = timeFunc(new Date(endDateTime));\n                        result = this._getArrayOfNumbers(end, end);\n                    }\n                    else if (!startDateTime && !endDateTime) {\n                        if (callback)\n                            return callback(timeFunc);\n                    }\n                    return result;\n                };\n                this._getIntArr = function (length) {\n                    if (!length && length !== 0) {\n                        //apd.messages.MessagesFactoryClass.throwInvalidParamsMessage();\n                        return false;\n                    }\n                    return length ? this._getIntArr(length - 1).concat(length) : [];\n                };\n                this.getDaysInMonth = function (month, year) {\n                    return new Date(year, month + 1, 0).getDate();\n                };\n                if (!(this instanceof DataClass)) {\n                }\n                var self = this;\n                self.years = self._getNumList(startDateTime, endDateTime, self._getFullYear, self._getDefaultYearsList.bind(self));\n                self.month = self._getNumList(startDateTime, endDateTime, self._getMonth, self._getDefaultMonthList.bind(self));\n                self.selected = self._getSelected(selected, startDateTime, endDateTime);\n                self.days = self._getNumList(startDateTime, endDateTime, self._getDay, function () {\n                    return self._getDefaultDaysList.call(self, self.selected.month, self.selected.year);\n                });\n                return this;\n            }\n            return DataClass;\n        })();\n        angular.module('angular-pd.date_utils', []).factory('DateUtilsFactory', function () {\n            var exports = {\n                getData: function (selected, startDateTime, endDateTime) {\n                    return new DataClass(selected, startDateTime, endDateTime);\n                },\n                validateModel: function (model) {\n                    return !!(model && model.datetime);\n                },\n                getDateModel: function (model) {\n                    var isValidModel = exports.validateModel(model);\n                    if (isValidModel) {\n                        return new DateModelClass(model.datetime);\n                    }\n                    else {\n                        //TODO (S.Panfilov) remove\n                        console.warn('model invalid');\n                        return new DateModelClass(new Date().getTime());\n                    }\n                }\n            };\n            return exports;\n        });\n    })(dateUtils = apd.dateUtils || (apd.dateUtils = {}));\n})(apd || (apd = {}));\n"],"sourceRoot":"/source/"}