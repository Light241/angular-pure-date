{"version":3,"sources":["angular-pure-datepicker.js"],"names":["angular","module","run","$templateCache","put","apd","directive","DayOfWeek","name","short","this","DaysOfWeek","days","_this","getListOfShorts","result","i","list","length","dayOfWeek","push","getListOfNames","getDayOfWeekShortName","dayNum","shorts","getDayOfWeekName","names","daysOfWeek","DateUtilsFactory","MessagesFactory","restrict","replace","templateUrl","scope","ngModel","apdStart","apdEnd","apdDayId","apdMonthId","apdYearId","apdDayClasses","apdMonthClasses","apdYearClasses","link","init","initDateModel","getDateModel","startDateTime","endDateTime","data","getData","selected","isInitialized","$watch","value","oldValue","messages","MessagesFactoryClass","throwModelValidationMessage","field","throwDeveloperError","invalidDateModel","throwInvalidParamsMessage","invalidParams","message","console","error","factory","dateUtils","DateModelClass","datetime","date","Date","day","getDate","getDay","month","getMonth","year","getFullYear","timezone","getTimezoneOffset","DataClass","_getSelected","isBiggerThenStart","isEqualToStart","isLowerThenEnd","isEqualToEnd","getTime","_getDefaultDaysList","daysCount","getDaysInMonth","_getIntArr","_getDefaultMonthList","_getArrayOfNumbers","_getDefaultYearsList","start","end","_getFullYear","_getMonth","_getDay","_getNumList","timeFunc","callback","concat","getDaysNumberArr","self","years","bind","call","exports","validateModel","model","isValidModel"],"mappings":"AAAAA,QAAQC,OAAO,2BAA4BC,KAAK,iBAAkB,SAASC,GAAiBA,EAAeC,IAAI,WAAW,m0BAG1HJ,QAAQC,OAAO,cACX,wBACA,wBACA,uBAMJ,IAAII,MACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,YACA,IAAIC,GAAY,WACZ,QAASA,GAAUC,EAAMC,GACrBC,KAAKF,KAAOA,EACZE,KAAAA,SAAaD,EAEjB,MAAOF,MAEPI,EAAa,WACb,QAASA,GAAWC,GAChB,GAAIC,GAAQH,IACZA,MAAKI,gBAAkB,WAEnB,IAAK,GADDC,MACKC,EAAI,EAAGA,EAAIH,EAAMI,KAAKC,OAAQF,IAAK,CACxC,GAAIG,GAAYN,EAAMI,KAAKD,EAC3BD,GAAOK,KAAKD,EAAAA,UAEhB,MAAOJ,IAEXL,KAAKW,eAAiB,WAElB,IAAK,GADDN,MACKC,EAAI,EAAGA,EAAIH,EAAMI,KAAKC,OAAQF,IAAK,CACxC,GAAIG,GAAYN,EAAMI,KAAKD,EAC3BD,GAAOK,KAAKD,EAAUX,MAE1B,MAAOO,IAEXL,KAAKY,sBAAwB,SAAUC,GACnC,MAAOV,GAAMW,OAAOD,IAExBb,KAAKe,iBAAmB,SAAUF,GAC9B,MAAOV,GAAMa,MAAMH,IAEvBb,KAAKO,KAAOL,EACZF,KAAKc,OAASd,KAAKI,kBACnBJ,KAAKgB,MAAQhB,KAAKW,iBAEtB,MAAOV,MAEPgB,EAAa,GAAIhB,IACjB,GAAIJ,GAAU,SAAU,OACxB,GAAIA,GAAU,SAAU,OACxB,GAAIA,GAAU,UAAW,OACzB,GAAIA,GAAU,YAAa,OAC3B,GAAIA,GAAU,WAAY,OAC1B,GAAIA,GAAU,SAAU,OACxB,GAAIA,GAAU,WAAY,QAE9BP,SAAQC,OAAO,yBACX,yBACDK,UAAU,kBAAmB,mBAAoB,kBAAmB,SAAUsB,EAAkBC,GAC/F,OACIC,SAAU,IACVC,SAAS,EACTC,YAAa,WACbC,OACIC,QAAS,IACTC,SAAU,KACVC,OAAQ,KACRC,SAAU,KACVC,WAAY,KACZC,UAAW,KACXC,cAAe,KACfC,gBAAiB,KACjBC,eAAgB,MAEpBC,KAAM,SAAUV,GAGZ,QAASW,KACL,GAAIC,GAAgBjB,EAAiBkB,aAAab,EAAMC,SACpDa,EAAiBd,EAAc,UAAKA,EAAME,SAAW,KACrDa,EAAef,EAAY,QAAKA,EAAMG,OAAS,IACnDH,GAAMgB,KAAOrB,EAAiBsB,QAAQL,EAAeE,EAAeC,GACpEf,EAAMC,QAAUD,EAAMgB,KAAKE,SAC3BC,GAAgB,EARpB,GAAIA,IAAgB,CAUpBnB,GAAMoB,OAAO,mBAAoB,SAAUC,EAAOC,GAC1CH,GAAkBE,IAAUC,GAGhCX,MACD,GAuCHX,EAAMX,sBAAwBK,EAAWL,sBACzCW,EAAMR,iBAAmBE,EAAWF,uBAIjDnB,EAAYD,EAAIC,YAAcD,EAAIC,gBACtCD,MAAQA,QAEX,IAAIA,MACJ,SAAWA,GACP,GAAImD,IACJ,SAAWA,GACP,YACA,IAAIC,GAAuB,WACvB,QAASA,MAiBT,MAfAA,GAAqBC,4BAA8B,SAAUC,GAEzDjD,KAAKkD,oBAAoBlD,KAAK8C,SAASK,iBAAmB,qBAAwBF,EAAQ,OAE9FF,EAAqBK,0BAA4B,WAE7CpD,KAAKkD,oBAAoBlD,KAAK8C,SAASO,gBAE3CN,EAAqBD,UACjBO,cAAe,iBACfF,iBAAkB,sBAEtBJ,EAAqBG,oBAAsB,SAAUI,GACjDC,QAAQC,MAAMF,IAEXP,IAEXzD,SAAQC,OAAO,0BAA2BkE,QAAQ,kBAAmB,WACjE,MAAO,IAAIV,MAEhBD,EAAWnD,EAAImD,WAAanD,EAAImD,eACpCnD,MAAQA,QAGX,IAAIA,MACJ,SAAWA,GACP,GAAI+D,IACJ,SAAWA,GACP,YACA,IAAIC,GAAiB,WACjB,QAASA,GAAeC,GACpB,GAAIC,GAAO,GAAIC,KACf9D,MAAK+D,IAAMF,EAAKG,UAChBhE,KAAKS,UAAYoD,EAAKI,SACtBjE,KAAKkE,MAAQL,EAAKM,WAClBnE,KAAKoE,KAAOP,EAAKQ,cACjBrE,KAAK4D,SAAWA,EAChB5D,KAAKsE,SAAWT,EAAKU,oBAEzB,MAAOZ,MAEPa,EAAY,WACZ,QAASA,GAAU/B,EAAUJ,EAAeC,GACxC,GAAInC,GAAQH,IACZA,MAAKyE,aAAe,SAAUhC,EAAUJ,EAAeC,GACnD,GAAIjC,GACAqE,EAAqBjC,EAASmB,SAAWvB,EACzCsC,EAAkBlC,EAASmB,WAAavB,EACxCuC,EAAkBnC,EAASmB,SAAWtB,EACtCuC,EAAgBpC,EAASmB,WAAatB,CAiB1C,QAfKoC,GAAqBC,KAAoBC,GAAkBC,GAC5DxE,EAAS,GAAIsD,GAAelB,EAASmB,UAIpCc,IACDrE,EAAS,GAAIsD,GAAetB,IAO5BhC,EAAS,GAAIsD,GAJZe,GAI2B,GAAIZ,OAAOgB,UAHXxC,IAOpCtC,KAAK+E,oBAAsB,SAAUb,EAAOE,GACxC,GAAIY,GAAYhF,KAAKiF,eAAef,EAAOE,EAC3C,OAAOpE,MAAKkF,WAAWF,IAE3BhF,KAAKmF,qBAAuB,WACxB,MAAOnF,MAAKoF,mBAAmB,EAAG,KAEtCpF,KAAKqF,qBAAuB,WACxB,QAAQ,GAAIvB,OAAOO,gBAEvBrE,KAAKoF,mBAAqB,SAAUE,EAAOC,GAEvC,IAAK,GADDlF,MACKC,EAAIgF,EAAYC,GAALjF,EAAUA,IAC1BD,EAAOK,KAAKJ,EAEhB,OAAOD,IAEXL,KAAKwF,aAAe,SAAU3B,GAC1B,MAAOA,GAAKQ,eAEhBrE,KAAKyF,UAAY,SAAU5B,GACvB,MAAOA,GAAKM,YAEhBnE,KAAK0F,QAAU,SAAU7B,GACrB,MAAOA,GAAKG,WAGhBhE,KAAK2F,YAAc,SAAUtD,EAAeC,EAAasD,EAAUC,GAC/D,GACIP,GACAC,EAFAlF,IAIJ,IAAKgC,GAAiBC,GAAiCA,EAAhBD,EACnCiD,EAAQM,EAAS,GAAI9B,MAAKzB,IAC1BkD,EAAMK,EAAS,GAAI9B,MAAKxB,IACxBjC,EAASL,KAAKoF,mBAAmBE,EAAOC,OAEvC,IAAKlD,GAAiBC,GAAiBD,EAAgBC,EACxDgD,EAAQM,EAAS,GAAI9B,MAAKxB,IAC1BiD,EAAMK,EAAS,GAAI9B,MAAKzB,IAGxBhC,EAASL,KAAKoF,mBAAmBE,EAAOC,OAEvC,IAAKlD,GAAiBC,GAAiBD,IAAkBC,EAC1DgD,EAAQM,EAAS,GAAI9B,MAAKzB,IAC1BhC,EAASL,KAAKoF,mBAAmBE,EAAOA,OAEvC,IAAIjD,IAAkBC,EACvBgD,EAAQM,EAAS,GAAI9B,MAAKzB,IAC1BhC,EAASL,KAAKoF,mBAAmBE,EAAOA,OAEvC,KAAKjD,GAAiBC,EACvBiD,EAAMK,EAAS,GAAI9B,MAAKxB,IACxBjC,EAASL,KAAKoF,mBAAmBG,EAAKA,OAErC,KAAKlD,IAAkBC,GACpBuD,EACA,MAAOA,GAASD,EAExB,OAAOvF,IAEXL,KAAKkF,WAAa,SAAU1E,GACxB,MAAKA,IAAqB,IAAXA,EAIRA,EAASR,KAAKkF,WAAW1E,EAAS,GAAGsF,OAAOtF,OAFxC,GAIfR,KAAK+F,iBAAmB,SAAU7B,EAAOE,GACrC,OAAMF,GAAmB,IAAVA,IAAiBE,GAErB,EAEJjE,EAAM+E,WAAW/E,EAAM8E,eAAef,EAAOE,KAExDpE,KAAKiF,eAAiB,SAAUf,EAAOE,GACnC,MAAO,IAAIN,MAAKM,EAAMF,EAAQ,EAAG,GAAGF,UAExC,IAAIgC,GAAOhG,IACXgG,GAAKC,MAAQD,EAAKL,YAAYtD,EAAeC,EAAa0D,EAAKR,aAAcQ,EAAKX,qBAAqBa,KAAKF,IAC5GA,EAAK9B,MAAQ8B,EAAKL,YAAYtD,EAAeC,EAAa0D,EAAKP,UAAWO,EAAKb,qBAAqBe,KAAKF,IACzGA,EAAKvD,SAAWuD,EAAKvB,aAAahC,EAAUJ,EAAeC,GAC3D0D,EAAK9F,KAAO8F,EAAKL,YAAYtD,EAAeC,EAAa0D,EAAKN,QAAS,WACnEM,EAAKjB,oBAAoBoB,KAAKH,EAAMA,EAAKvD,SAASyB,MAAO8B,EAAKvD,SAAS2B,QAG/E,MAAOI,KAEXlF,SAAQC,OAAO,4BAA6BkE,QAAQ,mBAAoB,WASpE,GAAI2C,IACA5D,QAAS,SAAUC,EAAUJ,EAAeC,GACxC,MAAO,IAAIkC,GAAU/B,EAAUJ,EAAeC,IAElD+D,cAAe,SAAUC,GACrB,MAAQA,IAASA,EAAM1C,UAE3BxB,aAAc,SAAUkE,GACpB,GAAIC,GAAeH,EAAQC,cAAcC,EACzC,OACW,IAAI3C,GADX4C,EAC0BD,EAAM1C,UAGN,GAAIE,OAAOgB,YAIjD,OAAOsB,MAEZ1C,EAAY/D,EAAI+D,YAAc/D,EAAI+D,gBACtC/D,MAAQA","file":"angular-pure-datepicker.min.js","sourcesContent":["angular.module(\"angular-pd.templates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"apd.html\",\"<div class=apd_root><select ng-model=data.selected.day ng-options=\\\"day for day in data.days\\\" ng-init=\\\"data.selected.day = data.days[0]\\\" id={{::apdDayId}} class=\\\"apd_elem apd_select_day apd_select {{::apdDayClasses}}\\\"></select><span title={{getDayOfWeekName(data.selected.dayOfWeek)}} ng-bind=getDayOfWeekShortName(data.selected.dayOfWeek) class=\\\"apd_elem apd_day_of_week\\\"></span><select ng-model=data.selected.month ng-options=\\\"(month + 1) for month in data.month\\\" ng-init=\\\"data.selected.month = data.month[0]\\\" id={{::apdMonthId}} class=\\\"apd_elem apd_select_month apd_select {{::apdMonthClasses}}\\\"></select><select ng-model=data.selected.year ng-options=\\\"year for year in data.years\\\" ng-init=\\\"data.selected.year = data.years[0]\\\" id={{::apdYearId}} class=\\\"apd_elem apd_select_year apd_select {{::apdYearClasses}}\\\"></select></div>\");}]);\n//module apd.main {\n//    'use strict';\nangular.module('angular-pd', [\n    'angular-pd.datepicker',\n    'angular-pd.date_utils',\n    'angular-pd.messages'\n]);\n//} \n\n/// <reference path=\"main.ts\" />\n//TODO (S.Panfilov)  is this references necessary?\nvar apd;\n(function (apd) {\n    var directive;\n    (function (directive) {\n        'use strict';\n        var DayOfWeek = (function () {\n            function DayOfWeek(name, short) {\n                this.name = name;\n                this.short = short;\n            }\n            return DayOfWeek;\n        })();\n        var DaysOfWeek = (function () {\n            function DaysOfWeek(days) {\n                var _this = this;\n                this.getListOfShorts = function () {\n                    var result = [];\n                    for (var i = 0; i < _this.list.length; i++) {\n                        var dayOfWeek = _this.list[i];\n                        result.push(dayOfWeek.short);\n                    }\n                    return result;\n                };\n                this.getListOfNames = function () {\n                    var result = [];\n                    for (var i = 0; i < _this.list.length; i++) {\n                        var dayOfWeek = _this.list[i];\n                        result.push(dayOfWeek.name);\n                    }\n                    return result;\n                };\n                this.getDayOfWeekShortName = function (dayNum) {\n                    return _this.shorts[dayNum];\n                };\n                this.getDayOfWeekName = function (dayNum) {\n                    return _this.names[dayNum];\n                };\n                this.list = days;\n                this.shorts = this.getListOfShorts();\n                this.names = this.getListOfNames();\n            }\n            return DaysOfWeek;\n        })();\n        var daysOfWeek = new DaysOfWeek([\n            new DayOfWeek('Sunday', 'Sun'),\n            new DayOfWeek('Monday', 'Mon'),\n            new DayOfWeek('Tuesday', 'Tue'),\n            new DayOfWeek('Wednesday', 'Wed'),\n            new DayOfWeek('Thursday', 'Thu'),\n            new DayOfWeek('Friday', 'Fri'),\n            new DayOfWeek('Saturday', 'Sat')\n        ]);\n        angular.module('angular-pd.datepicker', [\n            'angular-pd.templates'\n        ]).directive('pureDatepicker', ['DateUtilsFactory', 'MessagesFactory', function (DateUtilsFactory, MessagesFactory) {\n            return {\n                restrict: 'E',\n                replace: true,\n                templateUrl: 'apd.html',\n                scope: {\n                    ngModel: '=',\n                    apdStart: '=?',\n                    apdEnd: '=?',\n                    apdDayId: '@?',\n                    apdMonthId: '@?',\n                    apdYearId: '@?',\n                    apdDayClasses: '@?',\n                    apdMonthClasses: '@?',\n                    apdYearClasses: '@?'\n                },\n                link: function (scope) {\n                    var isInitialized = false;\n                    var isReInitializing = false;\n                    function init() {\n                        var initDateModel = DateUtilsFactory.getDateModel(scope.ngModel);\n                        var startDateTime = (scope.apdStart) ? +scope.apdStart : null;\n                        var endDateTime = (scope.apdEnd) ? +scope.apdEnd : null;\n                        scope.data = DateUtilsFactory.getData(initDateModel, startDateTime, endDateTime);\n                        scope.ngModel = scope.data.selected;\n                        isInitialized = true;\n                    }\n                    scope.$watch('ngModel.datetime', function (value, oldValue) {\n                        if (isInitialized && (value === oldValue)) {\n                            return;\n                        }\n                        init();\n                    }, true);\n                    //\n                    //scope.$watch('data.selected.day', function (day) {\n                    //    if (!day && !isReInitializing) return;\n                    //    reloadSelectedDay(scope.data.selected.datetime);\n                    //});\n                    //\n                    //scope.$watch('data.selected.month', function (month) {\n                    //    if (!month && month !== 0 && !isReInitializing) return;\n                    //    reloadDaysCount(scope.data.selected.datetime);\n                    //    reloadSelectedDay(scope.data.selected.datetime);\n                    //});\n                    //\n                    //scope.$watch('data.selected.year', function (year) {\n                    //    if (!year && !isReInitializing) return;\n                    //    reloadDaysCount(scope.data.selected.datetime);\n                    //    reloadSelectedDay(scope.data.selected.datetime);\n                    //});\n                    function reloadDaysCount(datetime) {\n                        if (!datetime && datetime !== 0) {\n                            MessagesFactory.throwInvalidParamsMessage();\n                            return false;\n                        }\n                        var date = new Date(datetime);\n                        scope.data.days = scope.data.getDaysNumberArr(date.getMonth(), date.getFullYear());\n                    }\n                    function reloadSelectedDay(datetime) {\n                        if (!datetime && datetime !== 0) {\n                            MessagesFactory.throwInvalidParamsMessage();\n                            return false;\n                        }\n                        var date = new Date(datetime);\n                        var daysInSelectedMonth = scope.data.getDaysInMonth(date.getMonth(), date.getFullYear());\n                        if (scope.data.selected.day > daysInSelectedMonth) {\n                            scope.data.selected.day = daysInSelectedMonth;\n                        }\n                        scope.data.selected.dayOfWeek = date.getDay();\n                        scope.data.selected.datetime = date.getTime() * 1000;\n                    }\n                    scope.getDayOfWeekShortName = daysOfWeek.getDayOfWeekShortName;\n                    scope.getDayOfWeekName = daysOfWeek.getDayOfWeekName;\n                }\n            };\n        }]);\n    })(directive = apd.directive || (apd.directive = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var messages;\n    (function (messages) {\n        'use strict';\n        var MessagesFactoryClass = (function () {\n            function MessagesFactoryClass() {\n            }\n            MessagesFactoryClass.throwModelValidationMessage = function (field) {\n                //TODO (S.Panfilov) possibly problems with this\n                this.throwDeveloperError(this.messages.invalidDateModel + ': error on field \\\"' + field + '+\\\"');\n            };\n            MessagesFactoryClass.throwInvalidParamsMessage = function () {\n                //TODO (S.Panfilov) possibly problems with this\n                this.throwDeveloperError(this.messages.invalidParams);\n            };\n            MessagesFactoryClass.messages = {\n                invalidParams: 'Invalid params',\n                invalidDateModel: 'Invalid date model'\n            };\n            MessagesFactoryClass.throwDeveloperError = function (message) {\n                console.error(message);\n            };\n            return MessagesFactoryClass;\n        })();\n        angular.module('angular-pd.messages', []).factory('MessagesFactory', function () {\n            return new MessagesFactoryClass();\n        });\n    })(messages = apd.messages || (apd.messages = {}));\n})(apd || (apd = {}));\n\n/// <reference path=\"messages.ts\" />\nvar apd;\n(function (apd) {\n    var dateUtils;\n    (function (dateUtils) {\n        'use strict';\n        var DateModelClass = (function () {\n            function DateModelClass(datetime) {\n                var date = new Date();\n                this.day = date.getDate();\n                this.dayOfWeek = date.getDay();\n                this.month = date.getMonth();\n                this.year = date.getFullYear();\n                this.datetime = datetime;\n                this.timezone = date.getTimezoneOffset();\n            }\n            return DateModelClass;\n        })();\n        var DataClass = (function () {\n            function DataClass(selected, startDateTime, endDateTime) {\n                var _this = this;\n                this._getSelected = function (selected, startDateTime, endDateTime) {\n                    var result;\n                    var isBiggerThenStart = (selected.datetime > startDateTime);\n                    var isEqualToStart = (selected.datetime === startDateTime);\n                    var isLowerThenEnd = (selected.datetime > endDateTime);\n                    var isEqualToEnd = (selected.datetime === endDateTime);\n                    //start == 1; selected == 1 or 2 or 3; end == 3;\n                    if ((isBiggerThenStart || isEqualToStart) && (isLowerThenEnd || isEqualToEnd)) {\n                        result = new DateModelClass(selected.datetime);\n                    }\n                    else \n                    //start == 1; selected == 0\n                    if (!isBiggerThenStart) {\n                        result = new DateModelClass(startDateTime);\n                    }\n                    //selected == 4; end == 3;\n                    if (!isBiggerThenStart) {\n                        result = new DateModelClass(endDateTime);\n                    }\n                    else {\n                        result = new DateModelClass(new Date().getTime());\n                    }\n                    return result;\n                };\n                this._getDefaultDaysList = function (month, year) {\n                    var daysCount = this.getDaysInMonth(month, year);\n                    return this._getIntArr(daysCount);\n                };\n                this._getDefaultMonthList = function () {\n                    return this._getArrayOfNumbers(0, 11);\n                };\n                this._getDefaultYearsList = function () {\n                    return [new Date().getFullYear()];\n                };\n                this._getArrayOfNumbers = function (start, end) {\n                    var result = [];\n                    for (var i = start; i <= end; i++) {\n                        result.push(i);\n                    }\n                    return result;\n                };\n                this._getFullYear = function (date) {\n                    return date.getFullYear();\n                };\n                this._getMonth = function (date) {\n                    return date.getMonth();\n                };\n                this._getDay = function (date) {\n                    return date.getDate();\n                };\n                //TODO (S.Panfilov) not any, but functions types\n                this._getNumList = function (startDateTime, endDateTime, timeFunc, callback) {\n                    var result = [];\n                    var start;\n                    var end;\n                    //start = 2011, end = 2014\n                    if ((startDateTime && endDateTime) && (startDateTime < endDateTime)) {\n                        start = timeFunc(new Date(startDateTime));\n                        end = timeFunc(new Date(endDateTime));\n                        result = this._getArrayOfNumbers(start, end);\n                    }\n                    else if ((startDateTime && endDateTime) && (startDateTime > endDateTime)) {\n                        start = timeFunc(new Date(endDateTime));\n                        end = timeFunc(new Date(startDateTime));\n                        //TODO (S.Panfilov) throw warning here, that dates inverted\n                        //apd.messages.MessagesFactoryClass.throwMessage('asdsadasd');\n                        result = this._getArrayOfNumbers(start, end);\n                    }\n                    else if ((startDateTime && endDateTime) && (startDateTime === endDateTime)) {\n                        start = timeFunc(new Date(startDateTime));\n                        result = this._getArrayOfNumbers(start, start);\n                    }\n                    else if (startDateTime && !endDateTime) {\n                        start = timeFunc(new Date(startDateTime));\n                        result = this._getArrayOfNumbers(start, start);\n                    }\n                    else if (!startDateTime && endDateTime) {\n                        end = timeFunc(new Date(endDateTime));\n                        result = this._getArrayOfNumbers(end, end);\n                    }\n                    else if (!startDateTime && !endDateTime) {\n                        if (callback)\n                            return callback(timeFunc);\n                    }\n                    return result;\n                };\n                this._getIntArr = function (length) {\n                    if (!length && length !== 0) {\n                        //apd.messages.MessagesFactoryClass.throwInvalidParamsMessage();\n                        return false;\n                    }\n                    return length ? this._getIntArr(length - 1).concat(length) : [];\n                };\n                this.getDaysNumberArr = function (month, year) {\n                    if ((!month && month !== 0) || !year) {\n                        //apd.messages.MessagesFactoryClass.throwInvalidParamsMessage();\n                        return false;\n                    }\n                    return _this._getIntArr(_this.getDaysInMonth(month, year));\n                };\n                this.getDaysInMonth = function (month, year) {\n                    return new Date(year, month + 1, 0).getDate();\n                };\n                var self = this;\n                self.years = self._getNumList(startDateTime, endDateTime, self._getFullYear, self._getDefaultYearsList.bind(self));\n                self.month = self._getNumList(startDateTime, endDateTime, self._getMonth, self._getDefaultMonthList.bind(self));\n                self.selected = self._getSelected(selected, startDateTime, endDateTime);\n                self.days = self._getNumList(startDateTime, endDateTime, self._getDay, function () {\n                    self._getDefaultDaysList.call(self, self.selected.month, self.selected.year);\n                });\n            }\n            return DataClass;\n        })();\n        angular.module('angular-pd.date_utils', []).factory('DateUtilsFactory', function () {\n            function preserveModelValues(model) {\n                for (var value in model) {\n                    if (model.hasOwnProperty(value)) {\n                        model[value] = +model[value];\n                    }\n                }\n                return model;\n            }\n            var exports = {\n                getData: function (selected, startDateTime, endDateTime) {\n                    return new DataClass(selected, startDateTime, endDateTime);\n                },\n                validateModel: function (model) {\n                    return (model && model.datetime);\n                },\n                getDateModel: function (model) {\n                    var isValidModel = exports.validateModel(model);\n                    if (isValidModel) {\n                        return new DateModelClass(model.datetime);\n                    }\n                    else {\n                        return new DateModelClass(new Date().getTime());\n                    }\n                }\n            };\n            return exports;\n        });\n    })(dateUtils = apd.dateUtils || (apd.dateUtils = {}));\n})(apd || (apd = {}));\n"],"sourceRoot":"/source/"}