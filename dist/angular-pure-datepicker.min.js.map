{"version":3,"sources":["angular-pure-datepicker.js"],"names":["angular","module","run","$templateCache","put","apd","Model","DataClass","selected","startDateTime","endDateTime","yearsListDirection","monthListDirection","daysListDirection","this","_getSelected","result","isBiggerThenStart","datetime","isEqualToStart","isLowerThenEnd","isEqualToEnd","DateModelClass","Date","getTime","_intArraySort","arr","direction","desc","a","b","sort","_getArrayOfNumbers","start","end","i","push","reloadYearsList","years","_getYearsList","_startDateTime","_endDateTime","_limitDates","MessagesFactoryClass","throwWrongInstanceMessage","limitDates","DEFAULT_YEARS_COUNT","startDate","year","endDate","now","nowDate","selectedYear","getFullYear","latestPossibleYear","firstPossibleYear","throwDatesInvertedMessage","reloadMonthList","month","_getMonthList","START_MONTH","END_MONTH","isYearOfLowerLimit","isYearOfUpperLimit","reloadDaysList","selectedMonth","getMonth","days","_getDaysList","START_DAY","lastDayInMonth","getDaysInMonth","isMonthOfLowerLimit","isMonthOfUpperLimit","isLowerLimit","isUpperLimit","day","_getIntArr","length","concat","throwInvalidParamsMessage","throwWrongClassCreationMessage","self","LimitDatesClass","getDate","DayOfWeek","name","short","DaysOfWeek","_this","getListOfShorts","list","dayOfWeek","getListOfNames","getDayOfWeekShortName","dayNum","shorts","getDayOfWeekName","names","date","getDay","timezone","getTimezoneOffset","validate","model","messages","wrongClassCreation","wrongInstance","invalidParams","invalidDateModel","datesInverted","throwDeveloperError","message","console","error","throwModelValidationMessage","field","factory","directive","daysOfWeek","MessagesFactory","restrict","replace","templateUrl","scope","ngModel","apdStart","apdEnd","apdDayId","apdMonthId","apdYearId","apdDayClasses","apdMonthClasses","apdYearClasses","link","getInitDateModel","initDatetime","isInitModelValid","limitSafeDatetime","getLimitSafeDatetime","_initData","initDateModel","data","isDayInMonth","getDateTime","isDateBetweenLimits","settings","isDateUpperStartLimit","isDateLowerEndLimit","updateModel","ngModelWatcher","stop","onModelChange","oldValue","daysInMonth","handler","callback","$watch","value","onDaySelectChanged","onMonthSelectChanged","onYearSelectChanged","_setStartDate","_setEndDate","_setNowDate","startLimitTime","endLimitTime"],"mappings":"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","file":"angular-pure-datepicker.min.js","sourcesContent":["angular.module(\"angular-pd.templates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"apd.html\",\"<div class=apd_root><select ng-model=data.selected.day ng-options=\\\"day for day in data.days\\\" ng-init=\\\"data.selected.day = data.days[0]\\\" ng-change=onDaySelectChanged(data.selected.day) id={{::apdDayId}} class=\\\"apd_elem apd_select_day apd_select {{::apdDayClasses}}\\\"></select><span title={{getDayOfWeekName(data.selected.dayOfWeek)}} ng-bind=getDayOfWeekShortName(data.selected.dayOfWeek) class=\\\"apd_elem apd_day_of_week\\\"></span><select ng-model=data.selected.month ng-options=\\\"(month + 1) for month in data.month\\\" ng-init=\\\"data.selected.month = data.month[0]\\\" ng-change=onMonthSelectChanged(data.selected.month) id={{::apdMonthId}} class=\\\"apd_elem apd_select_month apd_select {{::apdMonthClasses}}\\\"></select><select ng-model=data.selected.year ng-options=\\\"year for year in data.years\\\" ng-init=\\\"data.selected.year = data.years[0]\\\" ng-change=onYearSelectChanged(data.selected.year) id={{::apdYearId}} class=\\\"apd_elem apd_select_year apd_select {{::apdYearClasses}}\\\"></select></div>\");}]);\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var DataClass = (function () {\n            function DataClass(selected, startDateTime, endDateTime, yearsListDirection, monthListDirection, daysListDirection) {\n                this.yearsListDirection = 'desc';\n                this.monthListDirection = 'asc';\n                this.daysListDirection = 'asc';\n                this._getSelected = function (selected, startDateTime, endDateTime) {\n                    var result;\n                    var isBiggerThenStart = (selected.datetime > startDateTime);\n                    var isEqualToStart = (selected.datetime === startDateTime);\n                    var isLowerThenEnd = (selected.datetime > endDateTime);\n                    var isEqualToEnd = (selected.datetime === endDateTime);\n                    if ((isBiggerThenStart || isEqualToStart) || (isLowerThenEnd || isEqualToEnd)) {\n                        result = new Model.DateModelClass(selected.datetime);\n                    }\n                    else if (!isBiggerThenStart) {\n                        result = new Model.DateModelClass(startDateTime);\n                    }\n                    else if (!isBiggerThenStart) {\n                        result = new Model.DateModelClass(endDateTime);\n                    }\n                    else {\n                        result = new Model.DateModelClass(new Date().getTime());\n                    }\n                    return result;\n                };\n                this._intArraySort = function (arr, direction) {\n                    if (direction === void 0) { direction = 'asc'; }\n                    function desc(a, b) {\n                        return b - a;\n                    }\n                    switch (direction) {\n                        default:\n                            return arr.sort(function (a, b) {\n                                return a - b;\n                            });\n                        case \"desc\":\n                            return arr.sort(desc);\n                    }\n                };\n                this._getArrayOfNumbers = function (start, end) {\n                    var result = [];\n                    for (var i = start; i <= end; i++) {\n                        result.push(i);\n                    }\n                    return result;\n                };\n                this.reloadYearsList = function () {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    this.years = this._getYearsList(this._startDateTime, this._endDateTime, this._limitDates, this.yearsListDirection);\n                    return this;\n                };\n                this._getYearsList = function (startDateTime, endDateTime, limitDates, direction) {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    var result = [];\n                    var DEFAULT_YEARS_COUNT = 10;\n                    var start = limitDates.startDate.year;\n                    var end = limitDates.endDate.year;\n                    var now = limitDates.nowDate.year;\n                    var selectedYear = new Date(this.selected.datetime).getFullYear();\n                    var latestPossibleYear = (selectedYear > now) ? selectedYear : now;\n                    var firstPossibleYear = (selectedYear < now) ? selectedYear : now;\n                    latestPossibleYear = latestPossibleYear + (DEFAULT_YEARS_COUNT - 1);\n                    firstPossibleYear = firstPossibleYear - (DEFAULT_YEARS_COUNT - 1);\n                    if ((startDateTime && endDateTime) && (startDateTime < endDateTime)) {\n                        result = this._getArrayOfNumbers(start, end);\n                    }\n                    else if ((startDateTime && endDateTime) && (startDateTime > endDateTime)) {\n                        apd.Model.MessagesFactoryClass.throwDatesInvertedMessage();\n                        result = this._getArrayOfNumbers(end, start);\n                    }\n                    else if ((startDateTime && endDateTime) && (startDateTime === endDateTime)) {\n                        result = this._getArrayOfNumbers(start, end);\n                    }\n                    else if (startDateTime && !endDateTime) {\n                        result = this._getArrayOfNumbers(start, latestPossibleYear);\n                    }\n                    else if (!startDateTime && endDateTime) {\n                        if (limitDates.endDate.year >= limitDates.nowDate.year) {\n                            if ((firstPossibleYear - DEFAULT_YEARS_COUNT) > (end - DEFAULT_YEARS_COUNT)) {\n                                result = this._getArrayOfNumbers(firstPossibleYear, end);\n                            }\n                            else {\n                                result = this._getArrayOfNumbers(end - (DEFAULT_YEARS_COUNT - 1), end);\n                            }\n                        }\n                        else if (limitDates.endDate.year > limitDates.nowDate.year) {\n                            result = this._getArrayOfNumbers(end - (DEFAULT_YEARS_COUNT - 1), end);\n                        }\n                    }\n                    else if (!startDateTime && !endDateTime) {\n                        result = this._getArrayOfNumbers(firstPossibleYear, latestPossibleYear);\n                    }\n                    return this._intArraySort(result, direction);\n                };\n                this.reloadMonthList = function () {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    var selectedYear = new Date(this.selected.datetime).getFullYear();\n                    this.month = this._getMonthList(this._startDateTime, this._endDateTime, this._limitDates, selectedYear, this.monthListDirection);\n                    return this;\n                };\n                this._getMonthList = function (startDateTime, endDateTime, limitDates, selectedYear, direction) {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    var result;\n                    var START_MONTH = 0;\n                    var END_MONTH = 11;\n                    if (startDateTime || endDateTime) {\n                        var isYearOfLowerLimit = (startDateTime) ? limitDates.startDate.year === selectedYear : false;\n                        var isYearOfUpperLimit = (endDateTime) ? limitDates.endDate.year === selectedYear : false;\n                        var start = (startDateTime) ? limitDates.startDate.month : START_MONTH;\n                        var end = (endDateTime) ? limitDates.endDate.month : END_MONTH;\n                        if (isYearOfLowerLimit && isYearOfUpperLimit) {\n                            result = this._getArrayOfNumbers(start, end);\n                        }\n                        else if (isYearOfLowerLimit && !isYearOfUpperLimit) {\n                            result = this._getArrayOfNumbers(start, END_MONTH);\n                        }\n                        else if (!isYearOfLowerLimit && isYearOfUpperLimit) {\n                            result = this._getArrayOfNumbers(START_MONTH, end);\n                        }\n                        else {\n                            result = this._getArrayOfNumbers(START_MONTH, END_MONTH);\n                        }\n                    }\n                    else {\n                        result = this._getArrayOfNumbers(START_MONTH, END_MONTH);\n                    }\n                    return this._intArraySort(result, direction);\n                };\n                this.reloadDaysList = function () {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    var selectedYear = new Date(this.selected.datetime).getFullYear();\n                    var selectedMonth = new Date(this.selected.datetime).getMonth();\n                    this.days = this._getDaysList(this._startDateTime, this._endDateTime, this._limitDates, selectedYear, selectedMonth, this.daysListDirection);\n                    return this;\n                };\n                this._getDaysList = function (startDateTime, endDateTime, limitDates, selectedYear, selectedMonth, direction) {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    var result;\n                    var START_DAY = 1;\n                    var lastDayInMonth = DataClass.getDaysInMonth(selectedMonth, selectedYear);\n                    if (startDateTime || endDateTime) {\n                        var isYearOfLowerLimit = (startDateTime) ? limitDates.startDate.year === selectedYear : false;\n                        var isYearOfUpperLimit = (endDateTime) ? limitDates.endDate.year === selectedYear : false;\n                        var isMonthOfLowerLimit = (startDateTime) ? limitDates.startDate.month === selectedMonth : false;\n                        var isMonthOfUpperLimit = (endDateTime) ? limitDates.endDate.month === selectedMonth : false;\n                        var isLowerLimit = (isYearOfLowerLimit && isMonthOfLowerLimit);\n                        var isUpperLimit = (isYearOfUpperLimit && isMonthOfUpperLimit);\n                        var start = (startDateTime) ? limitDates.startDate.day : START_DAY;\n                        var end = (endDateTime) ? limitDates.endDate.day : lastDayInMonth;\n                        if (isLowerLimit && isUpperLimit) {\n                            result = this._getArrayOfNumbers(start, end);\n                        }\n                        else if (isLowerLimit && !isUpperLimit) {\n                            result = this._getArrayOfNumbers(start, lastDayInMonth);\n                        }\n                        else if (!isLowerLimit && isUpperLimit) {\n                            result = this._getArrayOfNumbers(START_DAY, end);\n                        }\n                        else {\n                            result = this._getArrayOfNumbers(START_DAY, lastDayInMonth);\n                        }\n                    }\n                    else {\n                        result = this._getArrayOfNumbers(START_DAY, lastDayInMonth);\n                    }\n                    return this._intArraySort(result, direction);\n                };\n                this._getIntArr = function (length) {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    if (!length && length !== 0) {\n                        apd.Model.MessagesFactoryClass.throwInvalidParamsMessage();\n                        return null;\n                    }\n                    return length ? this._getIntArr(length - 1).concat(length) : [];\n                };\n                if (!(this instanceof DataClass)) {\n                    apd.Model.MessagesFactoryClass.throwWrongClassCreationMessage();\n                    return new DataClass(selected, startDateTime, endDateTime, yearsListDirection, monthListDirection, daysListDirection);\n                }\n                var self = this;\n                self.selected = self._getSelected(selected, startDateTime, endDateTime);\n                var selectedYear = new Date(this.selected.datetime).getFullYear();\n                var selectedMonth = new Date(this.selected.datetime).getMonth();\n                self.yearsListDirection = yearsListDirection || self.yearsListDirection;\n                self.monthListDirection = monthListDirection || self.monthListDirection;\n                self.daysListDirection = daysListDirection || self.daysListDirection;\n                self._limitDates = new Model.LimitDatesClass(startDateTime, endDateTime);\n                self._startDateTime = startDateTime;\n                self._endDateTime = endDateTime;\n                self.years = self._getYearsList(startDateTime, endDateTime, self._limitDates, self.yearsListDirection);\n                self.month = self._getMonthList(startDateTime, endDateTime, self._limitDates, selectedYear, self.monthListDirection);\n                self.days = self._getDaysList(startDateTime, endDateTime, self._limitDates, selectedYear, selectedMonth, self.daysListDirection);\n                return this;\n            }\n            DataClass.getDaysInMonth = function (month, year) {\n                return new Date(year, month + 1, 0).getDate();\n            };\n            return DataClass;\n        })();\n        Model.DataClass = DataClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var DayOfWeek = (function () {\n            function DayOfWeek(name, short) {\n                if (!(this instanceof DayOfWeek)) {\n                    apd.Model.MessagesFactoryClass.throwWrongClassCreationMessage();\n                    return new DayOfWeek(name, short);\n                }\n                this.name = name;\n                this.short = short;\n                return this;\n            }\n            return DayOfWeek;\n        })();\n        Model.DayOfWeek = DayOfWeek;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var DaysOfWeek = (function () {\n            function DaysOfWeek(days) {\n                var _this = this;\n                this.getListOfShorts = function () {\n                    if (!(_this instanceof DaysOfWeek)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    var result = [];\n                    for (var i = 0; i < _this.list.length; i++) {\n                        var dayOfWeek = _this.list[i];\n                        result.push(dayOfWeek.short);\n                    }\n                    return result;\n                };\n                this.getListOfNames = function () {\n                    if (!(_this instanceof DaysOfWeek)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    var result = [];\n                    for (var i = 0; i < _this.list.length; i++) {\n                        var dayOfWeek = _this.list[i];\n                        result.push(dayOfWeek.name);\n                    }\n                    return result;\n                };\n                this.getDayOfWeekShortName = function (dayNum) {\n                    if (!(_this instanceof DaysOfWeek)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    return _this.shorts[dayNum];\n                };\n                this.getDayOfWeekName = function (dayNum) {\n                    if (!(_this instanceof DaysOfWeek)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    return _this.names[dayNum];\n                };\n                if (!(this instanceof DaysOfWeek)) {\n                    apd.Model.MessagesFactoryClass.throwWrongClassCreationMessage();\n                    return new DaysOfWeek(days);\n                }\n                this.list = days;\n                this.shorts = this.getListOfShorts();\n                this.names = this.getListOfNames();\n                return this;\n            }\n            return DaysOfWeek;\n        })();\n        Model.DaysOfWeek = DaysOfWeek;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var DateModelClass = (function () {\n            function DateModelClass(datetime) {\n                if (!(this instanceof DateModelClass)) {\n                    apd.Model.MessagesFactoryClass.throwWrongClassCreationMessage();\n                    return new DateModelClass(datetime);\n                }\n                var date = new Date(datetime);\n                this.day = date.getDate();\n                this.dayOfWeek = date.getDay();\n                this.month = date.getMonth();\n                this.year = date.getFullYear();\n                this.datetime = datetime;\n                this.timezone = date.getTimezoneOffset();\n                return this;\n            }\n            DateModelClass.validate = function (model) {\n                return !!(model && model.datetime);\n            };\n            return DateModelClass;\n        })();\n        Model.DateModelClass = DateModelClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var MessagesFactoryClass = (function () {\n            function MessagesFactoryClass() {\n                this.messages = {\n                    wrongClassCreation: 'Class created without \\'new\\', wrong \\'this\\'',\n                    wrongInstance: 'Wrong \\'this\\' instance',\n                    invalidParams: 'Invalid params',\n                    invalidDateModel: 'Invalid date model',\n                    datesInverted: 'Warning! Start date > End date'\n                };\n            }\n            MessagesFactoryClass.throwDeveloperError = function (message) {\n                console.error(message);\n            };\n            MessagesFactoryClass.throwModelValidationMessage = function (field) {\n                if (!(this instanceof MessagesFactoryClass)) {\n                    console.error('Wrong \\'this\\' instance');\n                    return false;\n                }\n                this.throwDeveloperError(this.messages.invalidDateModel + ': error on field \\\"' + field + '+\\\"');\n            };\n            MessagesFactoryClass.throwInvalidParamsMessage = function () {\n                if (!(this instanceof MessagesFactoryClass)) {\n                    console.error('Wrong \\'this\\' instance');\n                    return false;\n                }\n                this.throwDeveloperError(this.messages.invalidParams);\n            };\n            MessagesFactoryClass.throwWrongClassCreationMessage = function () {\n                if (!(this instanceof MessagesFactoryClass)) {\n                    console.error('Wrong \\'this\\' instance');\n                    return false;\n                }\n                this.throwDeveloperError(this.messages.wrongClassCreation);\n            };\n            MessagesFactoryClass.throwWrongInstanceMessage = function () {\n                if (!(this instanceof MessagesFactoryClass)) {\n                    console.error('Wrong \\'this\\' instance');\n                    return false;\n                }\n                this.throwDeveloperError(this.messages.wrongInstance);\n            };\n            MessagesFactoryClass.throwDatesInvertedMessage = function () {\n                if (!(this instanceof MessagesFactoryClass)) {\n                    console.error('Wrong \\'this\\' instance');\n                    return false;\n                }\n                this.throwDeveloperError(this.messages.datesInverted);\n            };\n            return MessagesFactoryClass;\n        })();\n        Model.MessagesFactoryClass = MessagesFactoryClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var messages;\n    (function (messages) {\n        'use strict';\n        angular.module('angular-pd.messages', []).factory('MessagesFactory', function () {\n            return new apd.Model.MessagesFactoryClass();\n        });\n    })(messages = apd.messages || (apd.messages = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var directive;\n    (function (directive) {\n        'use strict';\n        var daysOfWeek = new apd.Model.DaysOfWeek([\n            new apd.Model.DayOfWeek('Sunday', 'Sun'),\n            new apd.Model.DayOfWeek('Monday', 'Mon'),\n            new apd.Model.DayOfWeek('Tuesday', 'Tue'),\n            new apd.Model.DayOfWeek('Wednesday', 'Wed'),\n            new apd.Model.DayOfWeek('Thursday', 'Thu'),\n            new apd.Model.DayOfWeek('Friday', 'Fri'),\n            new apd.Model.DayOfWeek('Saturday', 'Sat')\n        ]);\n        angular.module('angular-pd', [\n            'angular-pd.templates',\n            'angular-pd.messages'\n        ]).directive('pureDatepicker', ['MessagesFactory', function (MessagesFactory) {\n            return {\n                restrict: 'E',\n                replace: true,\n                templateUrl: 'apd.html',\n                scope: {\n                    ngModel: '=',\n                    apdStart: '=?',\n                    apdEnd: '=?',\n                    apdDayId: '@?',\n                    apdMonthId: '@?',\n                    apdYearId: '@?',\n                    apdDayClasses: '@?',\n                    apdMonthClasses: '@?',\n                    apdYearClasses: '@?'\n                },\n                link: function (scope) {\n                    var settings = {\n                        initDateModel: null,\n                        startDateTime: null,\n                        endDateTime: null\n                    };\n                    var ngModelWatcher = {\n                        handler: null,\n                        start: function (callback) {\n                            ngModelWatcher.handler = scope.$watch('ngModel.datetime', function (value, oldValue) {\n                                if (callback) {\n                                    callback(value, oldValue);\n                                }\n                            }, true);\n                        },\n                        stop: function () {\n                            if (!ngModelWatcher.handler) {\n                                MessagesFactory.throwInvalidParamsMessage();\n                                return false;\n                            }\n                            ngModelWatcher.handler();\n                            return true;\n                        }\n                    };\n                    function getInitDateModel(model) {\n                        var isInitModelValid = apd.Model.DateModelClass.validate(model);\n                        var initDatetime;\n                        if (isInitModelValid) {\n                            initDatetime = model.datetime;\n                        }\n                        else {\n                            initDatetime = new Date().getTime();\n                        }\n                        var date = new Date(initDatetime);\n                        var day = date.getDate();\n                        var month = date.getMonth();\n                        var year = date.getFullYear();\n                        var limitSafeDatetime = getLimitSafeDatetime(day, month, year);\n                        return new apd.Model.DateModelClass(limitSafeDatetime);\n                    }\n                    function _initData(initDateModel, startDateTime, endDateTime) {\n                        scope.data = new apd.Model.DataClass(initDateModel, startDateTime, endDateTime);\n                        scope.ngModel = scope.data.selected;\n                    }\n                    function getLimitSafeDatetime(day, month, year) {\n                        if (!isDayInMonth(day, month, year)) {\n                            day = apd.Model.DataClass.getDaysInMonth(month, year);\n                        }\n                        var datetime = getDateTime(day, month, year);\n                        if (!apd.Model.LimitDatesClass.isDateBetweenLimits(datetime, settings.startDateTime, settings.endDateTime)) {\n                            if (!apd.Model.LimitDatesClass.isDateUpperStartLimit(datetime, settings.startDateTime)) {\n                                datetime = settings.startDateTime;\n                            }\n                            else if (!apd.Model.LimitDatesClass.isDateLowerEndLimit(datetime, settings.endDateTime)) {\n                                datetime = settings.endDateTime;\n                            }\n                        }\n                        return datetime;\n                    }\n                    function updateModel(datetime) {\n                        ngModelWatcher.stop();\n                        scope.data.selected = new apd.Model.DateModelClass(datetime);\n                        scope.ngModel = scope.data.selected;\n                        ngModelWatcher.start(onModelChange);\n                    }\n                    function onModelChange(datetime, oldValue) {\n                        if (datetime === oldValue) {\n                            return;\n                        }\n                        var date = new Date(datetime);\n                        var day = date.getDate();\n                        var month = date.getMonth();\n                        var year = date.getFullYear();\n                        datetime = getLimitSafeDatetime(day, month, year);\n                        updateModel(datetime);\n                        scope.data.reloadYearsList();\n                        scope.data.reloadMonthList();\n                        scope.data.reloadDaysList();\n                    }\n                    scope.onDaySelectChanged = function (day) {\n                        if (!day)\n                            return;\n                        var datetime = getLimitSafeDatetime(scope.data.selected.day, scope.data.selected.month, scope.data.selected.year);\n                        updateModel(datetime);\n                    };\n                    scope.onMonthSelectChanged = function (month) {\n                        if (!month && month !== 0)\n                            return;\n                        var datetime;\n                        var year = scope.data.selected.year;\n                        var day = scope.data.selected.day;\n                        datetime = getLimitSafeDatetime(day, month, year);\n                        updateModel(datetime);\n                        scope.data.reloadDaysList();\n                    };\n                    scope.onYearSelectChanged = function (year) {\n                        if (!year && year !== 0)\n                            return;\n                        var month = scope.data.selected.month;\n                        var day = scope.data.selected.day;\n                        var datetime = getLimitSafeDatetime(day, month, year);\n                        updateModel(datetime);\n                        scope.data.reloadMonthList();\n                        scope.data.reloadDaysList();\n                    };\n                    function getDateTime(day, month, year) {\n                        if (!day || (!month && month !== 0) || !year) {\n                            MessagesFactory.throwInvalidParamsMessage();\n                        }\n                        return new Date(year, month, day).getTime();\n                    }\n                    function isDayInMonth(day, month, year) {\n                        var daysInMonth = apd.Model.DataClass.getDaysInMonth(month, year);\n                        return day <= daysInMonth;\n                    }\n                    (function _init() {\n                        settings.startDateTime = (scope.apdStart) ? +scope.apdStart : null;\n                        settings.endDateTime = (scope.apdEnd) ? +scope.apdEnd : null;\n                        settings.initDateModel = getInitDateModel(scope.ngModel);\n                        _initData(settings.initDateModel, settings.startDateTime, settings.endDateTime);\n                        scope.getDayOfWeekShortName = daysOfWeek.getDayOfWeekShortName;\n                        scope.getDayOfWeekName = daysOfWeek.getDayOfWeekName;\n                        ngModelWatcher.start(onModelChange);\n                    })();\n                }\n            };\n        }]);\n    })(directive = apd.directive || (apd.directive = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var LimitDatesClass = (function () {\n            function LimitDatesClass(startDateTime, endDateTime) {\n                this._setStartDate = function (datetime) {\n                    if (!(this instanceof LimitDatesClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return false;\n                    }\n                    this.startDate.day = new Date(datetime).getDate();\n                    this.startDate.month = new Date(datetime).getMonth();\n                    this.startDate.year = new Date(datetime).getFullYear();\n                    this.startDate.datetime = datetime;\n                    return this;\n                };\n                this._setEndDate = function (datetime) {\n                    if (!(this instanceof LimitDatesClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return false;\n                    }\n                    this.endDate.day = new Date(datetime).getDate();\n                    this.endDate.month = new Date(datetime).getMonth();\n                    this.endDate.year = new Date(datetime).getFullYear();\n                    this.endDate.datetime = datetime;\n                    return this;\n                };\n                this._setNowDate = function () {\n                    if (!(this instanceof LimitDatesClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return false;\n                    }\n                    this.nowDate.day = new Date().getDate();\n                    this.nowDate.month = new Date().getMonth();\n                    this.nowDate.year = new Date().getFullYear();\n                    this.nowDate.datetime = new Date().getTime();\n                    return this;\n                };\n                if (!(this instanceof LimitDatesClass)) {\n                    apd.Model.MessagesFactoryClass.throwWrongClassCreationMessage();\n                    return new LimitDatesClass(startDateTime, endDateTime);\n                }\n                this.startDate = { day: null, month: null, year: null, datetime: null };\n                this.endDate = { day: null, month: null, year: null, datetime: null };\n                this.nowDate = { day: null, month: null, year: null, datetime: null };\n                this._setStartDate(startDateTime);\n                this._setEndDate(endDateTime);\n                this._setNowDate();\n            }\n            LimitDatesClass.isDateUpperStartLimit = function (datetime, startLimitTime) {\n                if (!startLimitTime)\n                    return true;\n                return (datetime > startLimitTime);\n            };\n            LimitDatesClass.isDateLowerEndLimit = function (datetime, endLimitTime) {\n                if (!endLimitTime)\n                    return true;\n                return (datetime < endLimitTime);\n            };\n            LimitDatesClass.isDateBetweenLimits = function (datetime, startLimitTime, endLimitTime) {\n                return (this.isDateUpperStartLimit(datetime, startLimitTime) && this.isDateLowerEndLimit(datetime, endLimitTime));\n            };\n            return LimitDatesClass;\n        })();\n        Model.LimitDatesClass = LimitDatesClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n"],"sourceRoot":"/source/"}