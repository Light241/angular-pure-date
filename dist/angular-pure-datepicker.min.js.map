{"version":3,"sources":["angular-pure-datepicker.js"],"names":["angular","module","run","$templateCache","put","apd","directive","DayOfWeek","name","short","this","messages","MessagesFactoryClass","throwWrongInstanceMessage","DaysOfWeek","days","_this","getListOfShorts","result","i","list","length","dayOfWeek","push","getListOfNames","getDayOfWeekShortName","dayNum","shorts","getDayOfWeekName","names","daysOfWeek","DateUtilsFactory","MessagesFactory","restrict","replace","templateUrl","scope","ngModel","apdStart","apdEnd","apdDayId","apdMonthId","apdYearId","apdDayClasses","apdMonthClasses","apdYearClasses","link","init","settings","initDateModel","getInitDateModel","startDateTime","endDateTime","_initData","model","initDatetime","isInitModelValid","validateModel","datetime","Date","getTime","dateUtils","DateModelClass","data","getData","selected","updateModel","getDateTime","day","month","year","throwInvalidParamsMessage","isCorrectDay","daysInMonth","getDaysInMonth","onDaySelectChanged","onMonthSelectChanged","onYearSelectChanged","date","getDate","getDay","getMonth","getFullYear","timezone","getTimezoneOffset","DataClass","_getSelected","isBiggerThenStart","isEqualToStart","isLowerThenEnd","isEqualToEnd","_getDefaultDaysList","daysCount","_getIntArr","_getDefaultMonthList","_getArrayOfNumbers","_intArraySort","arr","direction","desc","a","b","sort","start","end","_getYearsList","nowDateTime","DEFAULT_YEARS_COUNT","DIRECTION","startDate","endDate","nowDate","throwDatesInvertedMessage","concat","self","years","factory","exports","wrongInstance","invalidParams","invalidDateModel","datesInverted","throwDeveloperError","message","console","error","throwModelValidationMessage","field"],"mappings":"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","file":"angular-pure-datepicker.min.js","sourcesContent":["angular.module(\"angular-pd.templates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"apd.html\",\"<div class=apd_root><select ng-model=data.selected.day ng-options=\\\"day for day in data.days\\\" ng-init=\\\"data.selected.day = data.days[0]\\\" ng-change=onDaySelectChanged(data.selected.day) id={{::apdDayId}} class=\\\"apd_elem apd_select_day apd_select {{::apdDayClasses}}\\\"></select><span title={{getDayOfWeekName(data.selected.dayOfWeek)}} ng-bind=getDayOfWeekShortName(data.selected.dayOfWeek) class=\\\"apd_elem apd_day_of_week\\\"></span><select ng-model=data.selected.month ng-options=\\\"(month + 1) for month in data.month\\\" ng-init=\\\"data.selected.month = data.month[0]\\\" ng-change=onMonthSelectChanged(data.selected.month) id={{::apdMonthId}} class=\\\"apd_elem apd_select_month apd_select {{::apdMonthClasses}}\\\"></select><select ng-model=data.selected.year ng-options=\\\"year for year in data.years\\\" ng-init=\\\"data.selected.year = data.years[0]\\\" ng-change=onYearSelectChanged(data.selected.year) id={{::apdYearId}} class=\\\"apd_elem apd_select_year apd_select {{::apdYearClasses}}\\\"></select></div>\");}]);\nvar apd;\n(function (apd) {\n    var directive;\n    (function (directive) {\n        'use strict';\n        var DayOfWeek = (function () {\n            function DayOfWeek(name, short) {\n                if (!(this instanceof DayOfWeek)) {\n                    apd.messages.MessagesFactoryClass.throwWrongInstanceMessage();\n                    return new DayOfWeek(name, short);\n                }\n                this.name = name;\n                this.short = short;\n                return this;\n            }\n            return DayOfWeek;\n        })();\n        var DaysOfWeek = (function () {\n            function DaysOfWeek(days) {\n                var _this = this;\n                this.getListOfShorts = function () {\n                    var result = [];\n                    for (var i = 0; i < _this.list.length; i++) {\n                        var dayOfWeek = _this.list[i];\n                        result.push(dayOfWeek.short);\n                    }\n                    return result;\n                };\n                this.getListOfNames = function () {\n                    var result = [];\n                    for (var i = 0; i < _this.list.length; i++) {\n                        var dayOfWeek = _this.list[i];\n                        result.push(dayOfWeek.name);\n                    }\n                    return result;\n                };\n                this.getDayOfWeekShortName = function (dayNum) {\n                    return _this.shorts[dayNum];\n                };\n                this.getDayOfWeekName = function (dayNum) {\n                    return _this.names[dayNum];\n                };\n                if (!(this instanceof DaysOfWeek)) {\n                    apd.messages.MessagesFactoryClass.throwWrongInstanceMessage();\n                    return new DaysOfWeek(days);\n                }\n                this.list = days;\n                this.shorts = this.getListOfShorts();\n                this.names = this.getListOfNames();\n                return this;\n            }\n            return DaysOfWeek;\n        })();\n        var daysOfWeek = new DaysOfWeek([\n            new DayOfWeek('Sunday', 'Sun'),\n            new DayOfWeek('Monday', 'Mon'),\n            new DayOfWeek('Tuesday', 'Tue'),\n            new DayOfWeek('Wednesday', 'Wed'),\n            new DayOfWeek('Thursday', 'Thu'),\n            new DayOfWeek('Friday', 'Fri'),\n            new DayOfWeek('Saturday', 'Sat')\n        ]);\n        angular.module('angular-pd.datepicker', [\n            'angular-pd.templates'\n        ]).directive('pureDatepicker', ['DateUtilsFactory', 'MessagesFactory', function (DateUtilsFactory, MessagesFactory) {\n            return {\n                restrict: 'E',\n                replace: true,\n                templateUrl: 'apd.html',\n                scope: {\n                    ngModel: '=',\n                    apdStart: '=?',\n                    apdEnd: '=?',\n                    apdDayId: '@?',\n                    apdMonthId: '@?',\n                    apdYearId: '@?',\n                    apdDayClasses: '@?',\n                    apdMonthClasses: '@?',\n                    apdYearClasses: '@?'\n                },\n                link: function (scope) {\n                    var settings = {\n                        initDateModel: null,\n                        startDateTime: null,\n                        endDateTime: null\n                    };\n                    function init() {\n                        settings.initDateModel = getInitDateModel(scope.ngModel);\n                        settings.startDateTime = (scope.apdStart) ? +scope.apdStart : null;\n                        settings.endDateTime = (scope.apdEnd) ? +scope.apdEnd : null;\n                        _initData(settings.initDateModel, settings.startDateTime, settings.endDateTime);\n                        scope.getDayOfWeekShortName = daysOfWeek.getDayOfWeekShortName;\n                        scope.getDayOfWeekName = daysOfWeek.getDayOfWeekName;\n                    }\n                    init();\n                    function getInitDateModel(model) {\n                        var isInitModelValid = DateUtilsFactory.validateModel(model);\n                        var initDatetime;\n                        if (isInitModelValid) {\n                            initDatetime = model.datetime;\n                        }\n                        else {\n                            initDatetime = new Date().getTime();\n                        }\n                        return new apd.dateUtils.DateModelClass(initDatetime);\n                    }\n                    function _initData(initDateModel, startDateTime, endDateTime) {\n                        scope.data = DateUtilsFactory.getData(initDateModel, startDateTime, endDateTime);\n                        scope.ngModel = scope.data.selected;\n                    }\n                    function updateModel(datetime) {\n                        scope.data.selected = new apd.dateUtils.DateModelClass(datetime);\n                        scope.ngModel = scope.data.selected;\n                    }\n                    //TODO (S.Panfilov) fixes for external model change\n                    //scope.$watch('ngModel.datetime', function (value, oldValue) {\n                    //    if (value === oldValue) {\n                    //        return;\n                    //    }\n                    //\n                    //    _initData(settings.initDateModel, settings.startDateTime, settings.endDateTime);\n                    //}, true);\n                    scope.onDaySelectChanged = function (day) {\n                        if (!day)\n                            return;\n                        var datetime = getDateTime(scope.data.selected.day, scope.data.selected.month, scope.data.selected.year);\n                        updateModel(datetime);\n                    };\n                    scope.onMonthSelectChanged = function (month) {\n                        if (!month && month !== 0)\n                            return;\n                        var datetime;\n                        var year = scope.data.selected.year;\n                        var day = scope.data.selected.day;\n                        if (!isCorrectDay(day, month, year)) {\n                            day = scope.data.getDaysInMonth(month, year);\n                        }\n                        datetime = getDateTime(day, month, year);\n                        updateModel(datetime);\n                    };\n                    scope.onYearSelectChanged = function (year) {\n                        if (!year && year !== 0)\n                            return;\n                        var datetime;\n                        var month = scope.data.selected.month;\n                        var day = scope.data.selected.day;\n                        if (!isCorrectDay(day, month, year)) {\n                            day = scope.data.getDaysInMonth(year, year);\n                        }\n                        datetime = getDateTime(day, month, year);\n                        updateModel(datetime);\n                    };\n                    function getDateTime(day, month, year) {\n                        if (!day || (!month && month !== 0) || !year) {\n                            MessagesFactory.throwInvalidParamsMessage();\n                        }\n                        return new Date(year, month, day).getTime();\n                    }\n                    function isCorrectDay(day, month, year) {\n                        var daysInMonth = scope.data.getDaysInMonth(month, year);\n                        return day <= daysInMonth;\n                    }\n                }\n            };\n        }]);\n    })(directive = apd.directive || (apd.directive = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var dateUtils;\n    (function (dateUtils) {\n        'use strict';\n        var DateModelClass = (function () {\n            function DateModelClass(datetime) {\n                if (!(this instanceof DateModelClass)) {\n                    apd.messages.MessagesFactoryClass.throwWrongInstanceMessage();\n                    return new DateModelClass(datetime);\n                }\n                var date = new Date(datetime);\n                this.day = date.getDate();\n                this.dayOfWeek = date.getDay();\n                this.month = date.getMonth();\n                this.year = date.getFullYear();\n                this.datetime = datetime;\n                this.timezone = date.getTimezoneOffset();\n                return this;\n            }\n            return DateModelClass;\n        })();\n        dateUtils.DateModelClass = DateModelClass;\n        var DataClass = (function () {\n            function DataClass(selected, startDateTime, endDateTime) {\n                this._getSelected = function (selected, startDateTime, endDateTime) {\n                    var result;\n                    var isBiggerThenStart = (selected.datetime > startDateTime);\n                    var isEqualToStart = (selected.datetime === startDateTime);\n                    var isLowerThenEnd = (selected.datetime > endDateTime);\n                    var isEqualToEnd = (selected.datetime === endDateTime);\n                    //start == 1; selected == 1 or 2 or 3; end == 3;\n                    if ((isBiggerThenStart || isEqualToStart) && (isLowerThenEnd || isEqualToEnd)) {\n                        result = new DateModelClass(selected.datetime);\n                    }\n                    else \n                    //start == 1; selected == 0\n                    if (!isBiggerThenStart) {\n                        result = new DateModelClass(startDateTime);\n                    }\n                    //selected == 4; end == 3;\n                    if (!isBiggerThenStart) {\n                        result = new DateModelClass(endDateTime);\n                    }\n                    else {\n                        result = new DateModelClass(new Date().getTime());\n                    }\n                    return result;\n                };\n                this._getDefaultDaysList = function (month, year) {\n                    var daysCount = this.getDaysInMonth(month, year);\n                    return this._getIntArr(daysCount);\n                };\n                this._getDefaultMonthList = function () {\n                    return this._getArrayOfNumbers(0, 11);\n                };\n                this._intArraySort = function (arr, direction) {\n                    if (direction === void 0) { direction = 'asc'; }\n                    function desc(a, b) {\n                        return b - a;\n                    }\n                    switch (direction) {\n                        default:\n                            return arr.sort(function (a, b) {\n                                return a - b;\n                            });\n                        case \"desc\":\n                            return arr.sort(desc);\n                    }\n                };\n                this._getArrayOfNumbers = function (start, end) {\n                    var result = [];\n                    for (var i = start; i <= end; i++) {\n                        result.push(i);\n                    }\n                    return result;\n                };\n                this._getYearsList = function (startDateTime, endDateTime) {\n                    var result = [];\n                    var nowDateTime = new Date().getTime();\n                    var DEFAULT_YEARS_COUNT = 20;\n                    var DIRECTION = 'desc';\n                    var startDate = {\n                        day: new Date(startDateTime).getDate(),\n                        month: new Date(startDateTime).getMonth(),\n                        year: new Date(startDateTime).getFullYear()\n                    };\n                    var endDate = {\n                        day: new Date(endDateTime).getDate(),\n                        month: new Date(endDateTime).getMonth(),\n                        year: new Date(endDateTime).getFullYear()\n                    };\n                    var nowDate = {\n                        day: new Date(nowDateTime).getDate(),\n                        month: new Date(nowDateTime).getMonth(),\n                        year: new Date(nowDateTime).getFullYear()\n                    };\n                    //start = 2011, end = 2014\n                    if ((startDateTime && endDateTime) && (startDateTime < endDateTime)) {\n                        result = this._getArrayOfNumbers(startDate.year, endDate.year);\n                    }\n                    else if ((startDateTime && endDateTime) && (startDateTime > endDateTime)) {\n                        apd.messages.MessagesFactoryClass.throwDatesInvertedMessage();\n                        result = this._getArrayOfNumbers(endDate.year, startDate.year);\n                    }\n                    else if ((startDateTime && endDateTime) && (startDateTime === endDateTime)) {\n                        result = this._getArrayOfNumbers(startDate.year, endDate.year);\n                    }\n                    else if (startDateTime && !endDateTime) {\n                        result = this._getArrayOfNumbers(startDate.year, nowDate.year);\n                    }\n                    else if (!startDateTime && endDateTime) {\n                        result = this._getArrayOfNumbers(endDate.year, endDate.year);\n                    }\n                    else if (!startDateTime && !endDateTime) {\n                        result = this._getArrayOfNumbers(nowDate.year - (DEFAULT_YEARS_COUNT - 1), nowDate.year);\n                    }\n                    return this._intArraySort(result, DIRECTION);\n                };\n                this._getIntArr = function (length) {\n                    if (!length && length !== 0) {\n                        apd.messages.MessagesFactoryClass.throwInvalidParamsMessage();\n                        return null;\n                    }\n                    return length ? this._getIntArr(length - 1).concat(length) : [];\n                };\n                this.getDaysInMonth = function (month, year) {\n                    return new Date(year, month + 1, 0).getDate();\n                };\n                if (!(this instanceof DataClass)) {\n                    apd.messages.MessagesFactoryClass.throwWrongInstanceMessage();\n                    return new DataClass(selected, startDateTime, endDateTime);\n                }\n                var self = this;\n                //TODO (S.Panfilov) why I'm cannot pass self._getFullYear this without casting to TimeFunction?\n                self.years = self._getYearsList(startDateTime, endDateTime);\n                //self.month = self._getNumList(startDateTime, endDateTime, self._getDefaultMonthList.bind(self));\n                self.selected = self._getSelected(selected, startDateTime, endDateTime);\n                //self.days = self._getNumList(startDateTime, endDateTime, function () {\n                //    return self._getDefaultDaysList.call(self, self.selected.month, self.selected.year);\n                //});\n                return this;\n            }\n            return DataClass;\n        })();\n        angular.module('angular-pd.date_utils', []).factory('DateUtilsFactory', function () {\n            var exports = {\n                getData: function (selected, startDateTime, endDateTime) {\n                    return new DataClass(selected, startDateTime, endDateTime);\n                },\n                validateModel: function (model) {\n                    return !!(model && model.datetime);\n                }\n            };\n            return exports;\n        });\n    })(dateUtils = apd.dateUtils || (apd.dateUtils = {}));\n})(apd || (apd = {}));\n\n//module apd.main {\n//    'use strict';\nangular.module('angular-pd', [\n    'angular-pd.datepicker',\n    'angular-pd.date_utils',\n    'angular-pd.messages'\n]);\n//} \n\nvar apd;\n(function (apd) {\n    var messages;\n    (function (messages) {\n        'use strict';\n        var MessagesFactoryClass = (function () {\n            function MessagesFactoryClass() {\n                this.messages = {\n                    wrongInstance: 'Class created without \\'new\\', wrong \\'this\\'',\n                    invalidParams: 'Invalid params',\n                    invalidDateModel: 'Invalid date model',\n                    datesInverted: 'Warning! Start date > End date'\n                };\n            }\n            MessagesFactoryClass.throwDeveloperError = function (message) {\n                console.error(message);\n            };\n            MessagesFactoryClass.throwModelValidationMessage = function (field) {\n                this.throwDeveloperError(this.messages.invalidDateModel + ': error on field \\\"' + field + '+\\\"');\n            };\n            MessagesFactoryClass.throwInvalidParamsMessage = function () {\n                this.throwDeveloperError(this.messages.invalidParams);\n            };\n            MessagesFactoryClass.throwWrongInstanceMessage = function () {\n                this.throwDeveloperError(this.messages.wrongInstance);\n            };\n            MessagesFactoryClass.throwDatesInvertedMessage = function () {\n                this.throwDeveloperError(this.messages.datesInverted);\n            };\n            return MessagesFactoryClass;\n        })();\n        messages.MessagesFactoryClass = MessagesFactoryClass;\n        angular.module('angular-pd.messages', []).factory('MessagesFactory', function () {\n            return new MessagesFactoryClass();\n        });\n    })(messages = apd.messages || (apd.messages = {}));\n})(apd || (apd = {}));\n"],"sourceRoot":"/source/"}