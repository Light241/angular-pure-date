{"version":3,"sources":["angular-pure-datepicker.js"],"names":["angular","module","run","$templateCache","put","directive","restrict","replace","templateUrl","scope","ngModel","apdStart","apdEnd","apdDayId","apdMonthId","apdYearId","apdDayClasses","apdMonthClasses","apdYearClasses","apdLocalization","apdIsUtc","link","getLimitSafeDatetime","day","month","year","datetime","Date","getTime","LimitsModel","isDateBetweenLimits","settings","startDateTime","endDateTime","isDateUpperStartLimit","isDateLowerEndLimit","updateModel","ngModelWatcher","stop","data","selected","DateModel","start","onModelChange","oldValue","DateUtils","getDay","getMonth","getYear","reloadYearsList","reloadMonthList","reloadDaysList","getInitDateModel","model","initDatetime","isInitModelValid","validate","limitSafeDatetime","_initData","initDateModel","DataClass","handler","callback","$watch","value","onDaySelectChanged","onMonthSelectChanged","onYearSelectChanged","getDayName","week","getName","getMonthName","Settings","isUtc","monthDirection","daysDirection","yearsDirection","daysList","monthList","CommonUtils","exports","isValidNumber","num","isNumber","isNaN","isNotInfinity","isFinite","getArrayOfNumbers","result","i","end","push","intArraySort","arr","direction","desc","a","b","sort","getIntArr","length","_getIntArr","concat","getVal","method","date","call","prototype","getUTCDate","getDate","getDayOfWeek","getUTCDay","getUTCFullYear","getFullYear","getUTCMonth","getDaysInMonth","startDt","endDt","_setStart","dt","d","m","y","this","_setEnd","_setNow","now","startLimitTime","endLimitTime","dayOfWeek","timezone","getTimezoneOffset","YearsUtils","limitDates","getYearsList","DEFAULT_YEARS_COUNT","startDate","endDate","nowDate","selectedYear","latestPossibleYear","firstPossibleYear","yearsListDirection","MonthUtils","getMonthList","START_MONTH","END_MONTH","isYearOfLowerLimit","isYearOfUpperLimit","monthListDirection","DaysUtils","getDaysList","selectedMonth","START_DAY","lastDayInMonth","isMonthOfLowerLimit","isMonthOfUpperLimit","isLowerLimit","isUpperLimit","daysListDirection","_getSelected","isBiggerThenStart","isEqualToStart","isLowerThenEnd","isEqualToEnd","years","_startDateTime","_endDateTime","days"],"mappings":"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","file":"angular-pure-datepicker.min.js","sourcesContent":["angular.module(\"angular-pd.templates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"apd.html\",\"<div class=apd_root><select ng-model=data.selected.day ng-options=\\\"day for day in data.days\\\" ng-init=\\\"data.selected.day = data.days[0]\\\" ng-change=onDaySelectChanged(data.selected.day) id={{::apdDayId}} class=\\\"apd_elem apd_select_day apd_select {{::apdDayClasses}}\\\"></select><span ng-bind=getDayName(data.selected.dayOfWeek) class=\\\"apd_elem apd_day_of_week\\\"></span><select ng-model=data.selected.month ng-options=\\\"getMonthName(month) for month in data.month\\\" ng-init=\\\"data.selected.month = data.month[0]\\\" ng-change=onMonthSelectChanged(data.selected.month) id={{::apdMonthId}} class=\\\"apd_elem apd_select_month apd_select {{::apdMonthClasses}}\\\"></select><select ng-model=data.selected.year ng-options=\\\"year for year in data.years\\\" ng-init=\\\"data.selected.year = data.years[0]\\\" ng-change=onYearSelectChanged(data.selected.year) id={{::apdYearId}} class=\\\"apd_elem apd_select_year apd_select {{::apdYearClasses}}\\\"></select></div>\");}]);\n'use strict';\n\nangular.module('angular-pd', [\n    'angular-pd.templates'\n])\n\n    .directive('pureDatepicker', function () {\n        return {\n            restrict: 'E',\n            replace: true,\n            templateUrl: 'apd.html',\n            scope: {\n                ngModel: '=',\n                apdStart: '=?',\n                apdEnd: '=?',\n                apdDayId: '@?',\n                apdMonthId: '@?',\n                apdYearId: '@?',\n                apdDayClasses: '@?',\n                apdMonthClasses: '@?',\n                apdYearClasses: '@?',\n                apdLocalization: '=?',\n                apdIsUtc: '=?'\n            },\n            link: function (scope) {\n\n                scope.apdIsUtc = scope.apdIsUtc || false;\n\n                //TODO (S.Panfilov) check for cross-browser support\n                //TODO (S.Panfilov) may be should add tests\n                var settings = {\n                    initDateModel: null,\n                    startDateTime: null,\n                    endDateTime: null\n                };\n\n                var ngModelWatcher = {\n                    handler: null,\n                    start: function (callback) {\n                        ngModelWatcher.handler = scope.$watch('ngModel.datetime', function (value, oldValue) {\n                            if (callback) {\n                                callback(value, oldValue)\n                            }\n\n                        }, true);\n                    },\n                    stop: function () {\n                        ngModelWatcher.handler();\n                        return true;\n                    }\n                };\n\n\n                function getLimitSafeDatetime(day, month, year) {\n\n                    var datetime = new Date(year, month, day).getTime();\n\n                    if (!LimitsModel.isDateBetweenLimits(datetime, settings.startDateTime, settings.endDateTime)) {\n                        if (!LimitsModel.isDateUpperStartLimit(datetime, settings.startDateTime)) {\n                            datetime = settings.startDateTime;\n                        } else if (!LimitsModel.isDateLowerEndLimit(datetime, settings.endDateTime)) {\n                            datetime = settings.endDateTime;\n                        }\n                    }\n\n                    return datetime;\n                }\n\n                function updateModel(datetime) {\n                    ngModelWatcher.stop();\n                    scope.data.selected = new DateModel(datetime, scope.apdIsUtc);\n                    scope.ngModel = scope.data.selected;\n                    ngModelWatcher.start(onModelChange);\n                }\n\n                function onModelChange(datetime, oldValue) {\n                    if (datetime === oldValue) {\n                        return;\n                    }\n\n                    var day = DateUtils.getDay(datetime, scope.apdIsUtc);\n                    var month = DateUtils.getMonth(datetime, scope.apdIsUtc);\n                    var year = DateUtils.getYear(datetime, scope.apdIsUtc);\n\n                    datetime = getLimitSafeDatetime(day, month, year);\n                    updateModel(datetime);\n\n                    scope.data.reloadYearsList();\n                    scope.data.reloadMonthList();\n                    scope.data.reloadDaysList();\n                }\n\n                function getInitDateModel(model) {\n                    var isInitModelValid = DateModel.validate(model);\n                    var initDatetime;\n\n                    if (isInitModelValid) {\n                        initDatetime = model.datetime\n                    } else {\n                        initDatetime = new Date().getTime();\n                    }\n\n                    var day = DateUtils.getDay(initDatetime, scope.apdIsUtc);\n                    var month = DateUtils.getMonth(initDatetime, scope.apdIsUtc);\n                    var year = DateUtils.getYear(initDatetime, scope.apdIsUtc);\n\n                    var limitSafeDatetime = getLimitSafeDatetime(day, month, year);\n\n                    return new DateModel(limitSafeDatetime, scope.apdIsUtc);\n                }\n\n                function _initData(initDateModel, startDateTime, endDateTime) {\n                    scope.data = new DataClass(initDateModel, startDateTime, endDateTime, scope.apdIsUtc);\n                    scope.ngModel = scope.data.selected;\n                }\n\n\n                scope.onDaySelectChanged = function (day) {\n                    if (!day) return;\n\n                    var datetime = getLimitSafeDatetime(scope.data.selected.day, scope.data.selected.month, scope.data.selected.year);\n                    updateModel(datetime);\n                };\n\n                scope.onMonthSelectChanged = function (month) {\n                    if (!month && month !== 0) return;\n\n                    var datetime;\n                    var year = scope.data.selected.year;\n                    var day = scope.data.selected.day;\n\n                    datetime = getLimitSafeDatetime(day, month, year);\n                    updateModel(datetime);\n\n                    scope.data.reloadDaysList();\n                };\n\n                scope.onYearSelectChanged = function (year) {\n                    if (!year && year !== 0) return;\n\n                    var month = scope.data.selected.month;\n                    var day = scope.data.selected.day;\n\n                    var datetime = getLimitSafeDatetime(day, month, year);\n                    updateModel(datetime);\n\n                    scope.data.reloadMonthList();\n                    scope.data.reloadDaysList();\n                };\n\n                (function _init() {\n                    settings.startDateTime = (scope.apdStart) ? +scope.apdStart : null;\n                    settings.endDateTime = (scope.apdEnd) ? +scope.apdEnd : null;\n                    settings.initDateModel = getInitDateModel(scope.ngModel);\n                    _initData(settings.initDateModel, settings.startDateTime, settings.endDateTime);\n\n                    var localization = scope.apdLocalization || null;\n                    //var week = new DaysClass(localization);\n                    //var year = new MonthClass(localization);\n                    scope.getDayName = week.getName;\n                    scope.getMonthName = year.getName;\n\n                    ngModelWatcher.start(onModelChange);\n                })();\n\n            }\n        }\n    });\n'use strict';\n\nvar Settings = {\n    isUtc: false,\n    monthDirection: 'asc',\n    daysDirection: 'asc',\n    yearsDirection: 'desc',\n    daysList: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    monthList: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\n\n\nvar CommonUtils = (function () {\n    'use strict';\n\n    var exports = {\n        isValidNumber: function (num) {\n            var isNumber = !isNaN(num);\n            var isNotInfinity = isFinite(num);\n            return isNumber && isNotInfinity;\n        },\n        getArrayOfNumbers: function (start) {\n            var result = [];\n\n            for (var i = start; i <= end; i++) {\n                result.push(i);\n            }\n\n            return result;\n        },\n        intArraySort: function (arr, direction) {\n            function desc(a, b) {\n                return b - a;\n            }\n\n            switch (direction) {\n                default:\n                    return arr.sort(function (a, b) {\n                        return a - b;\n                    });\n                case \"desc\":\n                    return arr.sort(desc);\n            }\n        },\n        getIntArr: function (length) {\n            if (!length && length !== 0) return;\n            return length ? exports._getIntArr(length - 1).concat(length) : [];\n        }\n    };\n\n    return exports;\n})();\n'use strict';\n\nvar DateUtils = (function (Settings) {\n\n    function getVal(datetime, method) {\n        var date = new Date(datetime);\n        return method.call(date);\n    }\n\n    var exports = {\n        getDay: function (datetime) {\n            var method = (Settings.isUTC) ? Date.prototype.getUTCDate : Date.prototype.getDate;\n            return getVal(datetime, method);\n        },\n        getDayOfWeek: function (datetime) {\n            var method = (Settings.isUTC) ? Date.prototype.getUTCDay : Date.prototype.getDay;\n            return getVal(datetime, method);\n        },\n        getYear: function (datetime) {\n            var method = (Settings.isUTC) ? Date.prototype.getUTCFullYear : Date.prototype.getFullYear;\n            return getVal(datetime, method);\n        },\n        getMonth: function (datetime) {\n            var method = (Settings.isUTC) ? Date.prototype.getUTCMonth : Date.prototype.getMonth;\n            return getVal(datetime, method);\n        },\n        getDaysInMonth: function (month, year) {\n            return new Date(year, month + 1, 0).getDate();\n        }\n    };\n\n    return exports;\n})(Settings);\nvar LimitsModel = (function (DateUtils) {\n    'use strict';\n\n    function LimitsModel(startDt, endDt) {\n\n        var exports = {\n            start: {},\n            end: {},\n            now: {},\n            isDateUpperStartLimit: function (dt, startLimitTime) {\n                if (!startLimitTime) return true;\n                return (dt > startLimitTime);\n            },\n            isDateLowerEndLimit: function (dt, endLimitTime) {\n                if (!endLimitTime) return true;\n                return (dt < endLimitTime);\n            },\n            isDateBetweenLimits: function (dt, startLimitTime, endLimitTime) {\n                return (exports.isDateUpperStartLimit(dt, startLimitTime) && exports.isDateLowerEndLimit(dt, endLimitTime));\n            }\n        };\n\n        function _setStart(dt) {\n            exports.start.d = DateUtils.getDay(dt);\n            exports.start.m = DateUtils.getMonth(dt);\n            exports.start.y = DateUtils.getYear(dt);\n            exports.start.dt = dt;\n            return this;\n        }\n\n        function _setEnd(dt) {\n            exports.end.d = DateUtils.getDay(dt);\n            exports.end.m = DateUtils.getMonth(dt);\n            exports.end.y = DateUtils.getYear(dt);\n            exports.end.dt = dt;\n            return this;\n        }\n\n        function _setNow() {\n            var dt = new Date().getTime();\n            exports.now.d = DateUtils.getDay(dt);\n            exports.now.m = DateUtils.getMonth(dt);\n            exports.now.y = DateUtils.getYear(dt);\n            exports.now.dt = dt;\n            return this;\n        }\n\n        _setStart(startDt);\n        _setEnd(endDt);\n        _setNow();\n        \n        return exports;\n    }\n    \n    return LimitsModel;\n})(DateUtils);\nvar DateModel = (function (DateUtils) {\n    'use strict';\n\n    function DateModel(datetime) {\n        this.day = DateUtils.getDay(datetime);\n        this.dayOfWeek = DateUtils.getDayOfWeek(datetime);\n        this.month = DateUtils.getMonth(datetime);\n        this.year = DateUtils.getYear(datetime);\n        this.datetime = datetime;\n        this.timezone = new Date(datetime).getTimezoneOffset();\n\n        return this;\n    }\n\n    return DateModel;\n})(DateUtils);\nvar YearsUtils = (function (limitDates, DateUtils, CommonUtils) {\n    'use strict';\n\n    var exports = {\n        getYearsList: function (startDateTime, endDateTime) {\n            var result = [];\n            var DEFAULT_YEARS_COUNT = 10;\n\n            var start = limitDates.startDate.year;\n            var end = limitDates.endDate.year;\n            var now = limitDates.nowDate.year;\n            var selectedYear = DateUtils.getYear(this.selected.datetime);\n            var latestPossibleYear = (selectedYear > now) ? selectedYear : now;\n            var firstPossibleYear = (selectedYear < now) ? selectedYear : now;\n            latestPossibleYear = latestPossibleYear + (DEFAULT_YEARS_COUNT - 1);\n            firstPossibleYear = firstPossibleYear - (DEFAULT_YEARS_COUNT - 1);\n\n            //start = 2011, end = 2014\n            if ((startDateTime && endDateTime) && (startDateTime < endDateTime)) {\n                result = CommonUtils.getArrayOfNumbers(start, end);\n            }\n\n            //start = 2014, end = 2011\n            else if ((startDateTime && endDateTime) && (startDateTime > endDateTime)) {\n                result = CommonUtils.getArrayOfNumbers(end, start);\n            }\n\n            //start = 2011, end = 2011\n            else if ((startDateTime && endDateTime) && (startDateTime === endDateTime)) {\n                result = CommonUtils.getArrayOfNumbers(start, end);\n            }\n\n            //start = 2014, end = null\n            else if (startDateTime && !endDateTime) {\n                result = CommonUtils.getArrayOfNumbers(start, latestPossibleYear);\n            }\n\n            //start = null, end = 2014\n            else if (!startDateTime && endDateTime) {\n                //now = 2013 (or 2014),  end = 2014\n                if (limitDates.endDate.year >= limitDates.nowDate.year) {\n\n                    if ((firstPossibleYear - DEFAULT_YEARS_COUNT) > (end - DEFAULT_YEARS_COUNT)) {\n                        result = CommonUtils.getArrayOfNumbers(firstPossibleYear, end);\n                    } else {\n                        result = CommonUtils.getArrayOfNumbers(end - (DEFAULT_YEARS_COUNT - 1), end);\n                    }\n\n                }\n                //now = 2015,  end = 2014\n                else if (limitDates.endDate.year > limitDates.nowDate.year) {\n                    result = CommonUtils.getArrayOfNumbers(end - (DEFAULT_YEARS_COUNT - 1), end);\n                }\n\n            }\n\n            //start = null, end = null\n            else if (!startDateTime && !endDateTime) {\n                result = CommonUtils.getArrayOfNumbers(firstPossibleYear, latestPossibleYear);\n            }\n\n            return CommonUtils.intArraySort(result, Settings.yearsListDirection);\n        }\n    };\n\n    return exports;\n})(limitDates, DateUtils, CommonUtils);\nvar MonthUtils = (function (limitDates, DateUtils, CommonUtils) {\n    'use strict';\n\n    var exports = {\n        getMonthList: function (startDateTime, endDateTime, selectedYear) {\n            var result;\n            var START_MONTH = 0;\n            var END_MONTH = 11;\n\n            //TODO (S.Panfilov)  check\n            if (startDateTime || endDateTime) {\n                var isYearOfLowerLimit = (startDateTime) ? limitDates.startDate.year === selectedYear : false;\n                var isYearOfUpperLimit = (endDateTime) ? limitDates.endDate.year === selectedYear : false;\n                var start = (startDateTime) ? limitDates.startDate.month : START_MONTH;\n                var end = (endDateTime) ? limitDates.endDate.month : END_MONTH;\n\n                // startYear == 2015, nowYear == 2015, endYear == 2015\n                if (isYearOfLowerLimit && isYearOfUpperLimit) {\n                    result = CommonUtils.getArrayOfNumbers(start, end);\n                }\n                // startYear == 2015, nowYear == 2015, endYear == 2016 (or null)\n                else if (isYearOfLowerLimit && !isYearOfUpperLimit) {\n                    result = CommonUtils.getArrayOfNumbers(start, END_MONTH);\n                }\n                // startYear == 2014 (or null), nowYear == 2015, endYear == 2015\n                else if (!isYearOfLowerLimit && isYearOfUpperLimit) {\n                    result = CommonUtils.getArrayOfNumbers(START_MONTH, end);\n                }\n                else {\n                    // in all other cases return array of 12 month\n                    result = CommonUtils.getArrayOfNumbers(START_MONTH, END_MONTH);\n                }\n            } else {\n                // in all other cases return array of 12 month\n                result = CommonUtils.getArrayOfNumbers(START_MONTH, END_MONTH);\n            }\n\n            return CommonUtils.intArraySort(result, Settings.monthListDirection);\n        }\n    };\n\n    return exports;\n})(limitDates, DateUtils, CommonUtils);\nvar DaysUtils = (function (limitDates, DateUtils, CommonUtils) {\n    'use strict';\n\n    var exports = {\n        getDaysList: function (startDateTime, endDateTime, selectedYear, selectedMonth) {\n            var result;\n            var START_DAY = 1;\n            var lastDayInMonth = DataClass.getDaysInMonth(selectedMonth, selectedYear);\n\n            //TODO (S.Panfilov)  check\n            if (startDateTime || endDateTime) {\n                var isYearOfLowerLimit = (startDateTime) ? limitDates.startDate.year === selectedYear : false;\n                var isYearOfUpperLimit = (endDateTime) ? limitDates.endDate.year === selectedYear : false;\n                var isMonthOfLowerLimit = (startDateTime) ? limitDates.startDate.month === selectedMonth : false;\n                var isMonthOfUpperLimit = (endDateTime) ? limitDates.endDate.month === selectedMonth : false;\n\n                var isLowerLimit = (isYearOfLowerLimit && isMonthOfLowerLimit);\n                var isUpperLimit = (isYearOfUpperLimit && isMonthOfUpperLimit);\n\n                var start = (startDateTime) ? limitDates.startDate.day : START_DAY;\n                var end = (endDateTime) ? limitDates.endDate.day : lastDayInMonth;\n\n                if (isLowerLimit && isUpperLimit) {\n                    result = CommonUtils.getArrayOfNumbers(start, end);\n                } else if (isLowerLimit && !isUpperLimit) {\n                    result = CommonUtils.getArrayOfNumbers(start, lastDayInMonth);\n                } else if (!isLowerLimit && isUpperLimit) {\n                    result = CommonUtils.getArrayOfNumbers(START_DAY, end);\n                } else {\n                    // in all other cases return array of 12 month\n                    result = CommonUtils.getArrayOfNumbers(START_DAY, lastDayInMonth);\n                }\n            } else {\n                // in all other cases return array of 12 month\n                result = CommonUtils.getArrayOfNumbers(START_DAY, lastDayInMonth);\n            }\n\n            return CommonUtils.intArraySort(result, Settings.daysListDirection);\n        }\n    };\n\n    return exports;\n})(limitDates, DateUtils, CommonUtils);\nvar DataClass = (function (DateUtils, CommonUtils, YearsUtils, MonthUtils, DaysUtils, DateModel) {\n\n    function DataClass(selected, startDateTime, endDateTime) {\n        selected.datetime = CommonUtils.isValidNumber(selected.datetime) ? selected.datetime : null;\n        startDateTime = CommonUtils.isValidNumber(startDateTime) ? startDateTime : null;\n        endDateTime = CommonUtils.isValidNumber(endDateTime) ? endDateTime : null;\n\n        this.selected = this._getSelected(selected, startDateTime, endDateTime);\n        var selectedYear = DateUtils.getYear(this.selected.datetime);\n        var selectedMonth = DateUtils.getMonth(this.selected.datetime);\n\n        this._limitDates = new LimitsModel(startDateTime, endDateTime);\n        this._startDateTime = startDateTime;\n        this._endDateTime = endDateTime;\n        this.years = YearsUtils.getYearsList(startDateTime, endDateTime);\n        this.month = MonthUtils.getMonthList(startDateTime, endDateTime, selectedYear);\n        this.days = DaysUtils.getDaysList(startDateTime, endDateTime, selectedYear, selectedMonth);\n\n        return this;\n    }\n\n    _getSelected = function (selected, startDateTime, endDateTime) {\n        var result;\n\n        var isBiggerThenStart = (selected.datetime > startDateTime);\n        var isEqualToStart = (selected.datetime === startDateTime);\n        var isLowerThenEnd = (selected.datetime > endDateTime);\n        var isEqualToEnd = (selected.datetime === endDateTime);\n\n        //start == 1; selected == 1 or 2 or 3; end == 3;\n        if ((isBiggerThenStart || isEqualToStart) || (isLowerThenEnd || isEqualToEnd)) {\n            result = new DateModel(selected.datetime);\n        } else\n        //start == 1; selected == 0\n        if (!isBiggerThenStart) {\n            result = new DateModel(startDateTime);\n        } else\n        //selected == 4; end == 3;\n        if (!isBiggerThenStart) {\n            result = new DateModel(endDateTime);\n        }\n        //paranoid case\n        else {\n            result = new DateModel(new Date().getTime());\n        }\n\n        return result;\n    };\n\n    reloadYearsList = function () {\n        this.years = YearsUtils.getYearsList(this._startDateTime, this._endDateTime);\n        return this;\n    };\n\n    reloadMonthList = function () {\n        var selectedYear = DateUtils.getYear(this.selected.datetime);\n        this.month = MonthUtils.getMonthList(this._startDateTime, this._endDateTime, selectedYear);\n        return this;\n    };\n\n    reloadDaysList = function () {\n        var selectedYear = DateUtils.getYear(this.selected.datetime);\n        var selectedMonth = DateUtils.getMonth(this.selected.datetime);\n        this.days = DaysUtils.getDaysList(this._startDateTime, this._endDateTime, selectedYear, selectedMonth);\n        return this;\n    };\n\n})(DateUtils, CommonUtils, YearsUtils, MonthUtils, DaysUtils, DateModel);"],"sourceRoot":"/source/"}