{"version":3,"sources":["angular-pure-datepicker.js"],"names":["angular","module","run","$templateCache","put","apd","Model","DataClass","selected","startDateTime","endDateTime","yearsListDirection","monthListDirection","daysListDirection","this","isValidNumber","num","isNumber","isNaN","isNotInfinity","isFinite","_getSelected","result","isBiggerThenStart","datetime","isEqualToStart","isLowerThenEnd","isEqualToEnd","DateModelClass","Date","getTime","_intArraySort","arr","direction","desc","a","b","sort","_getArrayOfNumbers","start","end","i","push","reloadYearsList","years","_getYearsList","_startDateTime","_endDateTime","_limitDates","MessagesFactoryClass","throwWrongInstanceMessage","limitDates","DEFAULT_YEARS_COUNT","startDate","year","endDate","now","nowDate","selectedYear","getFullYear","latestPossibleYear","firstPossibleYear","throwDatesInvertedMessage","reloadMonthList","month","_getMonthList","START_MONTH","END_MONTH","isYearOfLowerLimit","isYearOfUpperLimit","reloadDaysList","selectedMonth","getMonth","days","_getDaysList","START_DAY","lastDayInMonth","getDaysInMonth","isMonthOfLowerLimit","isMonthOfUpperLimit","isLowerLimit","isUpperLimit","day","_getIntArr","length","concat","throwInvalidParamsMessage","throwWrongClassCreationMessage","self","LimitDatesClass","getDate","WeekClass","_setDefaultWeek","date","dayOfWeek","getDay","timezone","getTimezoneOffset","validate","model","directive","restrict","replace","templateUrl","scope","ngModel","apdStart","apdEnd","apdDayId","apdMonthId","apdYearId","apdDayClasses","apdMonthClasses","apdYearClasses","apdLocalization","link","getInitDateModel","initDatetime","isInitModelValid","limitSafeDatetime","getLimitSafeDatetime","_initData","initDateModel","data","isDayInMonth","getDateTime","isDateBetweenLimits","settings","isDateUpperStartLimit","isDateLowerEndLimit","updateModel","ngModelWatcher","stop","onModelChange","oldValue","daysInMonth","handler","callback","$watch","value","onDaySelectChanged","onMonthSelectChanged","onYearSelectChanged","localization","week","getDayName","_setStartDate","_setEndDate","_setNowDate","startLimitTime","endLimitTime","messages","wrongClassCreation","wrongInstance","invalidParams","invalidDateModel","datesInverted","throwDeveloperError","message","console","error","throwModelValidationMessage","field"],"mappings":"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","file":"angular-pure-datepicker.min.js","sourcesContent":["angular.module(\"angular-pd.templates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"apd.html\",\"<div class=apd_root><select ng-model=data.selected.day ng-options=\\\"day for day in data.days\\\" ng-init=\\\"data.selected.day = data.days[0]\\\" ng-change=onDaySelectChanged(data.selected.day) id={{::apdDayId}} class=\\\"apd_elem apd_select_day apd_select {{::apdDayClasses}}\\\"></select><span ng-bind=getDayName(data.selected.dayOfWeek) class=\\\"apd_elem apd_day_of_week\\\"></span><select ng-model=data.selected.month ng-options=\\\"(month + 1) for month in data.month\\\" ng-init=\\\"data.selected.month = data.month[0]\\\" ng-change=onMonthSelectChanged(data.selected.month) id={{::apdMonthId}} class=\\\"apd_elem apd_select_month apd_select {{::apdMonthClasses}}\\\"></select><select ng-model=data.selected.year ng-options=\\\"year for year in data.years\\\" ng-init=\\\"data.selected.year = data.years[0]\\\" ng-change=onYearSelectChanged(data.selected.year) id={{::apdYearId}} class=\\\"apd_elem apd_select_year apd_select {{::apdYearClasses}}\\\"></select></div>\");}]);\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var DataClass = (function () {\n            function DataClass(selected, startDateTime, endDateTime, yearsListDirection, monthListDirection, daysListDirection) {\n                this.yearsListDirection = 'desc';\n                this.monthListDirection = 'asc';\n                this.daysListDirection = 'asc';\n                this.isValidNumber = function (num) {\n                    var isNumber = !isNaN(num);\n                    var isNotInfinity = isFinite(num);\n                    return isNumber && isNotInfinity;\n                };\n                this._getSelected = function (selected, startDateTime, endDateTime) {\n                    var result;\n                    var isBiggerThenStart = (selected.datetime > startDateTime);\n                    var isEqualToStart = (selected.datetime === startDateTime);\n                    var isLowerThenEnd = (selected.datetime > endDateTime);\n                    var isEqualToEnd = (selected.datetime === endDateTime);\n                    if ((isBiggerThenStart || isEqualToStart) || (isLowerThenEnd || isEqualToEnd)) {\n                        result = new Model.DateModelClass(selected.datetime);\n                    }\n                    else if (!isBiggerThenStart) {\n                        result = new Model.DateModelClass(startDateTime);\n                    }\n                    else if (!isBiggerThenStart) {\n                        result = new Model.DateModelClass(endDateTime);\n                    }\n                    else {\n                        result = new Model.DateModelClass(new Date().getTime());\n                    }\n                    return result;\n                };\n                this._intArraySort = function (arr, direction) {\n                    if (direction === void 0) { direction = 'asc'; }\n                    function desc(a, b) {\n                        return b - a;\n                    }\n                    switch (direction) {\n                        default:\n                            return arr.sort(function (a, b) {\n                                return a - b;\n                            });\n                        case \"desc\":\n                            return arr.sort(desc);\n                    }\n                };\n                this._getArrayOfNumbers = function (start, end) {\n                    var result = [];\n                    for (var i = start; i <= end; i++) {\n                        result.push(i);\n                    }\n                    return result;\n                };\n                this.reloadYearsList = function () {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    this.years = this._getYearsList(this._startDateTime, this._endDateTime, this._limitDates, this.yearsListDirection);\n                    return this;\n                };\n                this._getYearsList = function (startDateTime, endDateTime, limitDates, direction) {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    var result = [];\n                    var DEFAULT_YEARS_COUNT = 10;\n                    var start = limitDates.startDate.year;\n                    var end = limitDates.endDate.year;\n                    var now = limitDates.nowDate.year;\n                    var selectedYear = new Date(this.selected.datetime).getFullYear();\n                    var latestPossibleYear = (selectedYear > now) ? selectedYear : now;\n                    var firstPossibleYear = (selectedYear < now) ? selectedYear : now;\n                    latestPossibleYear = latestPossibleYear + (DEFAULT_YEARS_COUNT - 1);\n                    firstPossibleYear = firstPossibleYear - (DEFAULT_YEARS_COUNT - 1);\n                    if ((startDateTime && endDateTime) && (startDateTime < endDateTime)) {\n                        result = this._getArrayOfNumbers(start, end);\n                    }\n                    else if ((startDateTime && endDateTime) && (startDateTime > endDateTime)) {\n                        apd.Model.MessagesFactoryClass.throwDatesInvertedMessage();\n                        result = this._getArrayOfNumbers(end, start);\n                    }\n                    else if ((startDateTime && endDateTime) && (startDateTime === endDateTime)) {\n                        result = this._getArrayOfNumbers(start, end);\n                    }\n                    else if (startDateTime && !endDateTime) {\n                        result = this._getArrayOfNumbers(start, latestPossibleYear);\n                    }\n                    else if (!startDateTime && endDateTime) {\n                        if (limitDates.endDate.year >= limitDates.nowDate.year) {\n                            if ((firstPossibleYear - DEFAULT_YEARS_COUNT) > (end - DEFAULT_YEARS_COUNT)) {\n                                result = this._getArrayOfNumbers(firstPossibleYear, end);\n                            }\n                            else {\n                                result = this._getArrayOfNumbers(end - (DEFAULT_YEARS_COUNT - 1), end);\n                            }\n                        }\n                        else if (limitDates.endDate.year > limitDates.nowDate.year) {\n                            result = this._getArrayOfNumbers(end - (DEFAULT_YEARS_COUNT - 1), end);\n                        }\n                    }\n                    else if (!startDateTime && !endDateTime) {\n                        result = this._getArrayOfNumbers(firstPossibleYear, latestPossibleYear);\n                    }\n                    return this._intArraySort(result, direction);\n                };\n                this.reloadMonthList = function () {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    var selectedYear = new Date(this.selected.datetime).getFullYear();\n                    this.month = this._getMonthList(this._startDateTime, this._endDateTime, this._limitDates, selectedYear, this.monthListDirection);\n                    return this;\n                };\n                this._getMonthList = function (startDateTime, endDateTime, limitDates, selectedYear, direction) {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    var result;\n                    var START_MONTH = 0;\n                    var END_MONTH = 11;\n                    if (startDateTime || endDateTime) {\n                        var isYearOfLowerLimit = (startDateTime) ? limitDates.startDate.year === selectedYear : false;\n                        var isYearOfUpperLimit = (endDateTime) ? limitDates.endDate.year === selectedYear : false;\n                        var start = (startDateTime) ? limitDates.startDate.month : START_MONTH;\n                        var end = (endDateTime) ? limitDates.endDate.month : END_MONTH;\n                        if (isYearOfLowerLimit && isYearOfUpperLimit) {\n                            result = this._getArrayOfNumbers(start, end);\n                        }\n                        else if (isYearOfLowerLimit && !isYearOfUpperLimit) {\n                            result = this._getArrayOfNumbers(start, END_MONTH);\n                        }\n                        else if (!isYearOfLowerLimit && isYearOfUpperLimit) {\n                            result = this._getArrayOfNumbers(START_MONTH, end);\n                        }\n                        else {\n                            result = this._getArrayOfNumbers(START_MONTH, END_MONTH);\n                        }\n                    }\n                    else {\n                        result = this._getArrayOfNumbers(START_MONTH, END_MONTH);\n                    }\n                    return this._intArraySort(result, direction);\n                };\n                this.reloadDaysList = function () {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    var selectedYear = new Date(this.selected.datetime).getFullYear();\n                    var selectedMonth = new Date(this.selected.datetime).getMonth();\n                    this.days = this._getDaysList(this._startDateTime, this._endDateTime, this._limitDates, selectedYear, selectedMonth, this.daysListDirection);\n                    return this;\n                };\n                this._getDaysList = function (startDateTime, endDateTime, limitDates, selectedYear, selectedMonth, direction) {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    var result;\n                    var START_DAY = 1;\n                    var lastDayInMonth = DataClass.getDaysInMonth(selectedMonth, selectedYear);\n                    if (startDateTime || endDateTime) {\n                        var isYearOfLowerLimit = (startDateTime) ? limitDates.startDate.year === selectedYear : false;\n                        var isYearOfUpperLimit = (endDateTime) ? limitDates.endDate.year === selectedYear : false;\n                        var isMonthOfLowerLimit = (startDateTime) ? limitDates.startDate.month === selectedMonth : false;\n                        var isMonthOfUpperLimit = (endDateTime) ? limitDates.endDate.month === selectedMonth : false;\n                        var isLowerLimit = (isYearOfLowerLimit && isMonthOfLowerLimit);\n                        var isUpperLimit = (isYearOfUpperLimit && isMonthOfUpperLimit);\n                        var start = (startDateTime) ? limitDates.startDate.day : START_DAY;\n                        var end = (endDateTime) ? limitDates.endDate.day : lastDayInMonth;\n                        if (isLowerLimit && isUpperLimit) {\n                            result = this._getArrayOfNumbers(start, end);\n                        }\n                        else if (isLowerLimit && !isUpperLimit) {\n                            result = this._getArrayOfNumbers(start, lastDayInMonth);\n                        }\n                        else if (!isLowerLimit && isUpperLimit) {\n                            result = this._getArrayOfNumbers(START_DAY, end);\n                        }\n                        else {\n                            result = this._getArrayOfNumbers(START_DAY, lastDayInMonth);\n                        }\n                    }\n                    else {\n                        result = this._getArrayOfNumbers(START_DAY, lastDayInMonth);\n                    }\n                    return this._intArraySort(result, direction);\n                };\n                this._getIntArr = function (length) {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    if (!length && length !== 0) {\n                        apd.Model.MessagesFactoryClass.throwInvalidParamsMessage();\n                        return null;\n                    }\n                    return length ? this._getIntArr(length - 1).concat(length) : [];\n                };\n                if (!(this instanceof DataClass)) {\n                    apd.Model.MessagesFactoryClass.throwWrongClassCreationMessage();\n                    return new DataClass(selected, startDateTime, endDateTime, yearsListDirection, monthListDirection, daysListDirection);\n                }\n                var self = this;\n                selected.datetime = self.isValidNumber(selected.datetime) ? selected.datetime : null;\n                startDateTime = self.isValidNumber(startDateTime) ? startDateTime : null;\n                endDateTime = self.isValidNumber(endDateTime) ? endDateTime : null;\n                self.selected = self._getSelected(selected, startDateTime, endDateTime);\n                var selectedYear = new Date(this.selected.datetime).getFullYear();\n                var selectedMonth = new Date(this.selected.datetime).getMonth();\n                self.yearsListDirection = yearsListDirection || self.yearsListDirection;\n                self.monthListDirection = monthListDirection || self.monthListDirection;\n                self.daysListDirection = daysListDirection || self.daysListDirection;\n                self._limitDates = new Model.LimitDatesClass(startDateTime, endDateTime);\n                self._startDateTime = startDateTime;\n                self._endDateTime = endDateTime;\n                self.years = self._getYearsList(startDateTime, endDateTime, self._limitDates, self.yearsListDirection);\n                self.month = self._getMonthList(startDateTime, endDateTime, self._limitDates, selectedYear, self.monthListDirection);\n                self.days = self._getDaysList(startDateTime, endDateTime, self._limitDates, selectedYear, selectedMonth, self.daysListDirection);\n                return this;\n            }\n            DataClass.getDaysInMonth = function (month, year) {\n                return new Date(year, month + 1, 0).getDate();\n            };\n            return DataClass;\n        })();\n        Model.DataClass = DataClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var WeekClass = (function () {\n            function WeekClass(days) {\n                this._setDefaultWeek = function () {\n                    return new WeekClass(['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']);\n                };\n                if (!(this instanceof WeekClass)) {\n                    apd.Model.MessagesFactoryClass.throwWrongClassCreationMessage();\n                    return new WeekClass(days);\n                }\n                if (days) {\n                    this.days = days;\n                    return this;\n                }\n                else {\n                    return this._setDefaultWeek();\n                }\n            }\n            return WeekClass;\n        })();\n        Model.WeekClass = WeekClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var DateModelClass = (function () {\n            function DateModelClass(datetime) {\n                if (!(this instanceof DateModelClass)) {\n                    apd.Model.MessagesFactoryClass.throwWrongClassCreationMessage();\n                    return new DateModelClass(datetime);\n                }\n                var date = new Date(datetime);\n                this.day = date.getDate();\n                this.dayOfWeek = date.getDay();\n                this.month = date.getMonth();\n                this.year = date.getFullYear();\n                this.datetime = datetime;\n                this.timezone = date.getTimezoneOffset();\n                return this;\n            }\n            DateModelClass.validate = function (model) {\n                return !!(model && model.datetime);\n            };\n            return DateModelClass;\n        })();\n        Model.DateModelClass = DateModelClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var directive;\n    (function (directive) {\n        'use strict';\n        angular.module('angular-pd', [\n            'angular-pd.templates'\n        ]).directive('pureDatepicker', function () {\n            return {\n                restrict: 'E',\n                replace: true,\n                templateUrl: 'apd.html',\n                scope: {\n                    ngModel: '=',\n                    apdStart: '=?',\n                    apdEnd: '=?',\n                    apdDayId: '@?',\n                    apdMonthId: '@?',\n                    apdYearId: '@?',\n                    apdDayClasses: '@?',\n                    apdMonthClasses: '@?',\n                    apdYearClasses: '@?',\n                    apdLocalization: '=?'\n                },\n                link: function (scope) {\n                    var settings = {\n                        initDateModel: null,\n                        startDateTime: null,\n                        endDateTime: null\n                    };\n                    var ngModelWatcher = {\n                        handler: null,\n                        start: function (callback) {\n                            ngModelWatcher.handler = scope.$watch('ngModel.datetime', function (value, oldValue) {\n                                if (callback) {\n                                    callback(value, oldValue);\n                                }\n                            }, true);\n                        },\n                        stop: function () {\n                            if (!ngModelWatcher.handler) {\n                                apd.Model.MessagesFactoryClass.throwInvalidParamsMessage();\n                                return false;\n                            }\n                            ngModelWatcher.handler();\n                            return true;\n                        }\n                    };\n                    function getInitDateModel(model) {\n                        var isInitModelValid = apd.Model.DateModelClass.validate(model);\n                        var initDatetime;\n                        if (isInitModelValid) {\n                            initDatetime = model.datetime;\n                        }\n                        else {\n                            initDatetime = new Date().getTime();\n                        }\n                        var date = new Date(initDatetime);\n                        var day = date.getDate();\n                        var month = date.getMonth();\n                        var year = date.getFullYear();\n                        var limitSafeDatetime = getLimitSafeDatetime(day, month, year);\n                        return new apd.Model.DateModelClass(limitSafeDatetime);\n                    }\n                    function _initData(initDateModel, startDateTime, endDateTime) {\n                        scope.data = new apd.Model.DataClass(initDateModel, startDateTime, endDateTime);\n                        scope.ngModel = scope.data.selected;\n                    }\n                    function getLimitSafeDatetime(day, month, year) {\n                        if (!isDayInMonth(day, month, year)) {\n                            day = apd.Model.DataClass.getDaysInMonth(month, year);\n                        }\n                        var datetime = getDateTime(day, month, year);\n                        if (!apd.Model.LimitDatesClass.isDateBetweenLimits(datetime, settings.startDateTime, settings.endDateTime)) {\n                            if (!apd.Model.LimitDatesClass.isDateUpperStartLimit(datetime, settings.startDateTime)) {\n                                datetime = settings.startDateTime;\n                            }\n                            else if (!apd.Model.LimitDatesClass.isDateLowerEndLimit(datetime, settings.endDateTime)) {\n                                datetime = settings.endDateTime;\n                            }\n                        }\n                        return datetime;\n                    }\n                    function updateModel(datetime) {\n                        ngModelWatcher.stop();\n                        scope.data.selected = new apd.Model.DateModelClass(datetime);\n                        scope.ngModel = scope.data.selected;\n                        ngModelWatcher.start(onModelChange);\n                    }\n                    function onModelChange(datetime, oldValue) {\n                        if (datetime === oldValue) {\n                            return;\n                        }\n                        var date = new Date(datetime);\n                        var day = date.getDate();\n                        var month = date.getMonth();\n                        var year = date.getFullYear();\n                        datetime = getLimitSafeDatetime(day, month, year);\n                        updateModel(datetime);\n                        scope.data.reloadYearsList();\n                        scope.data.reloadMonthList();\n                        scope.data.reloadDaysList();\n                    }\n                    scope.onDaySelectChanged = function (day) {\n                        if (!day)\n                            return;\n                        var datetime = getLimitSafeDatetime(scope.data.selected.day, scope.data.selected.month, scope.data.selected.year);\n                        updateModel(datetime);\n                    };\n                    scope.onMonthSelectChanged = function (month) {\n                        if (!month && month !== 0)\n                            return;\n                        var datetime;\n                        var year = scope.data.selected.year;\n                        var day = scope.data.selected.day;\n                        datetime = getLimitSafeDatetime(day, month, year);\n                        updateModel(datetime);\n                        scope.data.reloadDaysList();\n                    };\n                    scope.onYearSelectChanged = function (year) {\n                        if (!year && year !== 0)\n                            return;\n                        var month = scope.data.selected.month;\n                        var day = scope.data.selected.day;\n                        var datetime = getLimitSafeDatetime(day, month, year);\n                        updateModel(datetime);\n                        scope.data.reloadMonthList();\n                        scope.data.reloadDaysList();\n                    };\n                    function getDateTime(day, month, year) {\n                        if (!day || (!month && month !== 0) || !year) {\n                            apd.Model.MessagesFactoryClass.throwInvalidParamsMessage();\n                        }\n                        return new Date(year, month, day).getTime();\n                    }\n                    function isDayInMonth(day, month, year) {\n                        var daysInMonth = apd.Model.DataClass.getDaysInMonth(month, year);\n                        return day <= daysInMonth;\n                    }\n                    (function _init() {\n                        settings.startDateTime = (scope.apdStart) ? +scope.apdStart : null;\n                        settings.endDateTime = (scope.apdEnd) ? +scope.apdEnd : null;\n                        settings.initDateModel = getInitDateModel(scope.ngModel);\n                        _initData(settings.initDateModel, settings.startDateTime, settings.endDateTime);\n                        var localization = scope.apdLocalization || null;\n                        var week = new apd.Model.WeekClass(localization);\n                        scope.getDayName = week.getDayName;\n                        ngModelWatcher.start(onModelChange);\n                    })();\n                }\n            };\n        });\n    })(directive = apd.directive || (apd.directive = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var LimitDatesClass = (function () {\n            function LimitDatesClass(startDateTime, endDateTime) {\n                this._setStartDate = function (datetime) {\n                    if (!(this instanceof LimitDatesClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return false;\n                    }\n                    this.startDate.day = new Date(datetime).getDate();\n                    this.startDate.month = new Date(datetime).getMonth();\n                    this.startDate.year = new Date(datetime).getFullYear();\n                    this.startDate.datetime = datetime;\n                    return this;\n                };\n                this._setEndDate = function (datetime) {\n                    if (!(this instanceof LimitDatesClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return false;\n                    }\n                    this.endDate.day = new Date(datetime).getDate();\n                    this.endDate.month = new Date(datetime).getMonth();\n                    this.endDate.year = new Date(datetime).getFullYear();\n                    this.endDate.datetime = datetime;\n                    return this;\n                };\n                this._setNowDate = function () {\n                    if (!(this instanceof LimitDatesClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return false;\n                    }\n                    this.nowDate.day = new Date().getDate();\n                    this.nowDate.month = new Date().getMonth();\n                    this.nowDate.year = new Date().getFullYear();\n                    this.nowDate.datetime = new Date().getTime();\n                    return this;\n                };\n                if (!(this instanceof LimitDatesClass)) {\n                    apd.Model.MessagesFactoryClass.throwWrongClassCreationMessage();\n                    return new LimitDatesClass(startDateTime, endDateTime);\n                }\n                this.startDate = { day: null, month: null, year: null, datetime: null };\n                this.endDate = { day: null, month: null, year: null, datetime: null };\n                this.nowDate = { day: null, month: null, year: null, datetime: null };\n                this._setStartDate(startDateTime);\n                this._setEndDate(endDateTime);\n                this._setNowDate();\n            }\n            LimitDatesClass.isDateUpperStartLimit = function (datetime, startLimitTime) {\n                if (!startLimitTime)\n                    return true;\n                return (datetime > startLimitTime);\n            };\n            LimitDatesClass.isDateLowerEndLimit = function (datetime, endLimitTime) {\n                if (!endLimitTime)\n                    return true;\n                return (datetime < endLimitTime);\n            };\n            LimitDatesClass.isDateBetweenLimits = function (datetime, startLimitTime, endLimitTime) {\n                return (this.isDateUpperStartLimit(datetime, startLimitTime) && this.isDateLowerEndLimit(datetime, endLimitTime));\n            };\n            return LimitDatesClass;\n        })();\n        Model.LimitDatesClass = LimitDatesClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var MessagesFactoryClass = (function () {\n            function MessagesFactoryClass() {\n                this.messages = {\n                    wrongClassCreation: 'Class created without \\'new\\', wrong \\'this\\'',\n                    wrongInstance: 'Wrong \\'this\\' instance',\n                    invalidParams: 'Invalid params',\n                    invalidDateModel: 'Invalid date model',\n                    datesInverted: 'Warning! Start date > End date'\n                };\n            }\n            MessagesFactoryClass.throwDeveloperError = function (message) {\n                console.error(message);\n            };\n            MessagesFactoryClass.throwModelValidationMessage = function (field) {\n                if (!(this instanceof MessagesFactoryClass)) {\n                    console.error('Wrong \\'this\\' instance');\n                    return false;\n                }\n                this.throwDeveloperError(this.messages.invalidDateModel + ': error on field \\\"' + field + '+\\\"');\n            };\n            MessagesFactoryClass.throwInvalidParamsMessage = function () {\n                if (!(this instanceof MessagesFactoryClass)) {\n                    console.error('Wrong \\'this\\' instance');\n                    return false;\n                }\n                this.throwDeveloperError(this.messages.invalidParams);\n            };\n            MessagesFactoryClass.throwWrongClassCreationMessage = function () {\n                if (!(this instanceof MessagesFactoryClass)) {\n                    console.error('Wrong \\'this\\' instance');\n                    return false;\n                }\n                this.throwDeveloperError(this.messages.wrongClassCreation);\n            };\n            MessagesFactoryClass.throwWrongInstanceMessage = function () {\n                if (!(this instanceof MessagesFactoryClass)) {\n                    console.error('Wrong \\'this\\' instance');\n                    return false;\n                }\n                this.throwDeveloperError(this.messages.wrongInstance);\n            };\n            MessagesFactoryClass.throwDatesInvertedMessage = function () {\n                if (!(this instanceof MessagesFactoryClass)) {\n                    console.error('Wrong \\'this\\' instance');\n                    return false;\n                }\n                this.throwDeveloperError(this.messages.datesInverted);\n            };\n            return MessagesFactoryClass;\n        })();\n        Model.MessagesFactoryClass = MessagesFactoryClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n"],"sourceRoot":"/source/"}