{"version":3,"sources":["angular-pure-datepicker.js"],"names":["angular","module","run","$templateCache","put","apd","directive","DayOfWeek","name","short","this","DaysOfWeek","days","_this","getListOfShorts","result","i","list","length","dayOfWeek","push","getListOfNames","getDayOfWeekShortName","dayNum","shorts","getDayOfWeekName","names","daysOfWeek","DateUtilsFactory","MessgesFactory","restrict","replace","templateUrl","scope","ngModel","apdDayId","apdMonthId","apdYearId","apdDayClasses","apdMonthClasses","apdYearClasses","link","reloadDaysCount","month","year","throwInvalidParamsMessage","data","getDaysCount","reloadSelectedDay","day","date","Date","daysInSelectedMonth","getDaysInMonth","selected","getDay","datetime","getTime","selectedDate","getDefaultSelectedDate","years","getDefaultYearsList","createData","$watch","dateUtils","DateModelClass","timezone","DateModelValidatorClass","config","isFieldExist","model","fieldName","validator","isZero","isZeroAllowed","validate","hasOwnProperty","isRequired","isFieldValid","DateModelFieldClass","DateModelValidatorConfigClass","object","DataClass","allowZero","factory","preserveModelValues","value","_getIntArr","concat","dateModelValidatorConfig","exports","validateModel","groupResults","getMandatoryGroupsResilts","modelFields","checkMandatoryValidsInGroups","getDate","isValidModel","getMonth","getFullYear","dateTime","getTimezoneOffset","messages","_messages","invalidParams","invalidDateModel","throwDeveloperError","message","console","error","throwModelValidationMessage","field"],"mappings":"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","file":"angular-pure-datepicker.min.js","sourcesContent":["angular.module(\"angular-pd.templates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"apd.html\",\"<div class=apd_root><select ng-model=data.selected.day ng-options=\\\"day for day in data.days\\\" ng-init=\\\"data.selected.day = data.days[0]\\\" id={{::apdDayId}} class=\\\"apd_elem apd_select_day apd_select {{::apdDayClasses}}\\\"></select><span title={{getDayOfWeekName(data.selected.dayOfWeek)}} ng-bind=getDayOfWeekShortName(data.selected.dayOfWeek) class=\\\"apd_elem apd_day_of_week\\\"></span><select ng-model=data.selected.month ng-options=\\\"(month + 1) for month in data.month\\\" ng-init=\\\"data.selected.month = data.month[0]\\\" id={{::apdMonthId}} class=\\\"apd_elem apd_select_month apd_select {{::apdMonthClasses}}\\\"></select><select ng-model=data.selected.year ng-options=\\\"year for year in data.years\\\" ng-init=\\\"data.selected.year = data.years[0]\\\" id={{::apdYearId}} class=\\\"apd_elem apd_select_year apd_select {{::apdYearClasses}}\\\"></select></div>\");}]);\n//module apd.main {\n//    'use strict';\nangular.module('angular-pd', [\n    'angular-pd.datepicker',\n    'angular-pd.date_utils',\n    'angular-pd.messages'\n]);\n//} \n\n/// <reference path=\"main.ts\" />\n//TODO (S.Panfilov)  is this references necessary?\nvar apd;\n(function (apd) {\n    var directive;\n    (function (directive) {\n        'use strict';\n        var DayOfWeek = (function () {\n            function DayOfWeek(name, short) {\n                this.name = name;\n                this.short = short;\n            }\n            return DayOfWeek;\n        })();\n        var DaysOfWeek = (function () {\n            function DaysOfWeek(days) {\n                var _this = this;\n                this.getListOfShorts = function () {\n                    var result = [];\n                    for (var i = 0; i < _this.list.length; i++) {\n                        var dayOfWeek = _this.list[i];\n                        result.push(dayOfWeek.short);\n                    }\n                    return result;\n                };\n                this.getListOfNames = function () {\n                    var result = [];\n                    for (var i = 0; i < _this.list.length; i++) {\n                        var dayOfWeek = _this.list[i];\n                        result.push(dayOfWeek.name);\n                    }\n                    return result;\n                };\n                this.getDayOfWeekShortName = function (dayNum) {\n                    return _this.shorts[dayNum];\n                };\n                this.getDayOfWeekName = function (dayNum) {\n                    return _this.names[dayNum];\n                };\n                this.list = days;\n                this.shorts = this.getListOfShorts();\n                this.names = this.getListOfNames();\n            }\n            return DaysOfWeek;\n        })();\n        var daysOfWeek = new DaysOfWeek([\n            new DayOfWeek('Sunday', 'Sun'),\n            new DayOfWeek('Monday', 'Mon'),\n            new DayOfWeek('Tuesday', 'Tue'),\n            new DayOfWeek('Wednesday', 'Wed'),\n            new DayOfWeek('Thursday', 'Thu'),\n            new DayOfWeek('Friday', 'Fri'),\n            new DayOfWeek('Saturday', 'Sat')\n        ]);\n        angular.module('angular-pd.datepicker', [\n            'angular-pd.templates'\n        ]).directive('pureDatepicker', ['DateUtilsFactory', 'MessgesFactory', function (DateUtilsFactory, MessgesFactory) {\n            return {\n                restrict: 'E',\n                replace: true,\n                templateUrl: 'apd.html',\n                scope: {\n                    ngModel: '=',\n                    apdDayId: '@?',\n                    apdMonthId: '@?',\n                    apdYearId: '@?',\n                    apdDayClasses: '@?',\n                    apdMonthClasses: '@?',\n                    apdYearClasses: '@?'\n                },\n                link: function (scope) {\n                    var selectedDate = DateUtilsFactory.getDefaultSelectedDate(scope.ngModel);\n                    var years = DateUtilsFactory.getDefaultYearsList();\n                    var days = DateUtilsFactory.getDaysCount(selectedDate.month, selectedDate.year);\n                    scope.data = DateUtilsFactory.createData(selectedDate, days, years);\n                    scope.$watch('data.selected.day', function (day) {\n                        if (!day)\n                            return;\n                        reloadSelectedDay(scope.data.selected.year, scope.data.selected.month, scope.data.selected.day);\n                    });\n                    scope.$watch('data.selected.month', function (month) {\n                        if (!month && month !== 0)\n                            return;\n                        reloadDaysCount(scope.data.selected.month, scope.data.selected.year);\n                        reloadSelectedDay(scope.data.selected.year, scope.data.selected.month, scope.data.selected.day);\n                    });\n                    scope.$watch('data.selected.year', function (year) {\n                        //TODO (S.Panfilov) may be we should watch also timezone and datetime - those fields may be changed externally\n                        if (!year)\n                            return;\n                        reloadDaysCount(scope.data.selected.month, scope.data.selected.year);\n                        reloadSelectedDay(scope.data.selected.year, scope.data.selected.month, scope.data.selected.day);\n                    });\n                    function reloadDaysCount(month, year) {\n                        if ((!month && month !== 0) || !year) {\n                            MessgesFactory.throwInvalidParamsMessage();\n                            return false;\n                        }\n                        scope.data.days = DateUtilsFactory.getDaysCount(month, year);\n                    }\n                    function reloadSelectedDay(year, month, day) {\n                        if (!year || (!month && month !== 0) || !day) {\n                            MessgesFactory.throwInvalidParamsMessage();\n                            return false;\n                        }\n                        var date = new Date(year, month, day);\n                        var daysInSelectedMonth = DateUtilsFactory.getDaysInMonth(month, year);\n                        if (scope.data.selected.day > daysInSelectedMonth) {\n                            scope.data.selected.day = daysInSelectedMonth;\n                        }\n                        scope.data.selected.dayOfWeek = date.getDay();\n                        scope.data.selected.datetime = date.getTime() * 1000;\n                    }\n                    scope.getDayOfWeekShortName = daysOfWeek.getDayOfWeekShortName;\n                    scope.getDayOfWeekName = daysOfWeek.getDayOfWeekName;\n                }\n            };\n        }]);\n    })(directive = apd.directive || (apd.directive = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var dateUtils;\n    (function (dateUtils) {\n        'use strict';\n        var DateModelClass = (function () {\n            function DateModelClass(day, dayOfWeek, month, year, datetime, timezone) {\n                this.day = day;\n                this.dayOfWeek = dayOfWeek;\n                this.month = month;\n                this.year = year;\n                this.datetime = datetime;\n                this.timezone = timezone;\n            }\n            return DateModelClass;\n        })();\n        var DateModelValidatorClass = (function () {\n            function DateModelValidatorClass(config) {\n                var _this = this;\n                this.isFieldExist = function (model, fieldName) {\n                    var validator = _this;\n                    var isZero = (model[fieldName] === 0);\n                    var isZeroAllowed = validator[fieldName].isZeroAllowed;\n                    if (isZero && !isZeroAllowed) {\n                        return false;\n                    }\n                    if (!model[fieldName]) {\n                        return false;\n                    }\n                    return true;\n                };\n                this.validate = function (model) {\n                    var validator = _this;\n                    for (var fieldName in validator) {\n                        if (validator.hasOwnProperty(fieldName)) {\n                            if (validator[fieldName].isRequired) {\n                                var isFieldValid = validator.isFieldExist(model, fieldName);\n                                if (!isFieldValid) {\n                                    return false;\n                                }\n                            }\n                        }\n                    }\n                };\n                this.day = new DateModelFieldClass(config.day.name, config.day.isZeroAllowed, config.day.isRequired);\n                this.dayOfWeek = new DateModelFieldClass(config.dayOfWeek.name, config.dayOfWeek.isZeroAllowed, config.dayOfWeek.isRequired);\n                this.month = new DateModelFieldClass(config.month.name, config.month.isZeroAllowed, config.month.isRequired);\n                this.year = new DateModelFieldClass(config.year.name, config.year.isZeroAllowed, config.year.isRequired);\n                this.datetime = new DateModelFieldClass(config.datetime.name, config.datetime.isZeroAllowed, config.datetime.isRequired);\n                this.timezone = new DateModelFieldClass(config.timezone.name, config.timezone.isZeroAllowed, config.timezone.isRequired);\n            }\n            return DateModelValidatorClass;\n        })();\n        var DateModelValidatorConfigClass = (function () {\n            //TODO (S.Panfilov) any?\n            function DateModelValidatorConfigClass(object) {\n                this.day = object.day;\n                this.dayOfWeek = object.dayOfWeek;\n                this.month = object.month;\n                this.year = object.year;\n                this.datetime = object.datetime;\n                this.timezone = object.timezone;\n            }\n            return DateModelValidatorConfigClass;\n        })();\n        var DataClass = (function () {\n            function DataClass(selected, days, years) {\n                this.selected = selected;\n                this.days = days;\n                this.month = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n                this.years = years;\n            }\n            return DataClass;\n        })();\n        var DateModelFieldClass = (function () {\n            function DateModelFieldClass(name, allowZero, isRequired) {\n                this.name = name;\n                this.isZeroAllowed = allowZero;\n                this.isRequired = isRequired;\n            }\n            return DateModelFieldClass;\n        })();\n        angular.module('angular-pd.date_utils', []).factory('DateUtilsFactory', ['MessgesFactory', function (MessgesFactory) {\n            var dateModelValidatorConfig = new DateModelValidatorConfigClass({\n                day: { name: 'day', isZeroAllowed: false, isRequired: false },\n                dayOfWeek: { name: 'day', isZeroAllowed: false, isRequired: false },\n                month: { name: 'day', isZeroAllowed: true, isRequired: false },\n                year: { name: 'day', isZeroAllowed: false, isRequired: false },\n                datetime: { name: 'day', isZeroAllowed: true, isRequired: true },\n                timezone: { name: 'day', isZeroAllowed: true, isRequired: false }\n            });\n            var dateModelValidator = new DateModelValidatorClass(dateModelValidatorConfig);\n            function preserveModelValues(model) {\n                for (var value in model) {\n                    if (model.hasOwnProperty(value)) {\n                        model[value] = +model[value];\n                    }\n                }\n                return model;\n            }\n            function _getIntArr(length) {\n                if (!length && length !== 0) {\n                    MessgesFactory.throwInvalidParamsMessage();\n                    return false;\n                }\n                return length ? _getIntArr(length - 1).concat(length) : [];\n            }\n            var exports = {\n                createData: function (selected, days, years) {\n                    return new DataClass(selected, days, years);\n                },\n                validateModel: function (model) {\n                    //TODO (S.Panfilov)  may be we should extract this logic to the classes\n                    var groupResults = getMandatoryGroupsResilts(modelFields, model);\n                    return checkMandatoryValidsInGroups(groupResults);\n                },\n                getDaysCount: function (month, year) {\n                    if ((!month && month !== 0) || !year) {\n                        MessgesFactory.throwInvalidParamsMessage();\n                        return false;\n                    }\n                    return _getIntArr(exports.getDaysInMonth(month, year));\n                },\n                getDaysInMonth: function (month, year) {\n                    return new Date(year, month + 1, 0).getDate();\n                },\n                getDefaultSelectedDate: function (model) {\n                    var isValidModel = exports.validateModel(model);\n                    if (isValidModel) {\n                        return preserveModelValues(model);\n                    }\n                    else {\n                        var date = new Date();\n                        var day = date.getDate();\n                        var month = date.getMonth();\n                        var year = date.getFullYear();\n                        var dateTime = date.getTime();\n                        var dayOfWeek = date.getDay();\n                        var timezone = date.getTimezoneOffset();\n                        return new DateModelClass(day, dayOfWeek, month, year, dateTime, timezone);\n                    }\n                },\n                getDefaultYearsList: function () {\n                    //TODO (S.Panfilov) fix for case with date limits\n                    return [\n                        (new Date()).getFullYear() - 3,\n                        (new Date()).getFullYear() - 2,\n                        (new Date()).getFullYear() - 1,\n                        (new Date()).getFullYear()\n                    ];\n                }\n            };\n            return exports;\n        }]);\n    })(dateUtils = apd.dateUtils || (apd.dateUtils = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var messages;\n    (function (messages) {\n        'use strict';\n        angular.module('angular-pd.messages', []).factory('MessgesFactory', function () {\n            var _messages = {\n                invalidParams: 'Invalid params',\n                invalidDateModel: 'Invalid date model'\n            };\n            var exports = {\n                throwDeveloperError: function (message) {\n                    console.error(message);\n                },\n                throwModelValidationMessage: function (field) {\n                    exports.throwDeveloperError(_messages.invalidDateModel + ': error on field \\\"' + field + \"+\\\"\");\n                },\n                throwInvalidParamsMessage: function () {\n                    exports.throwDeveloperError(_messages.invalidParams);\n                }\n            };\n            return exports;\n        });\n    })(messages = apd.messages || (apd.messages = {}));\n})(apd || (apd = {}));\n"],"sourceRoot":"/source/"}