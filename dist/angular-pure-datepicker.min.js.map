{"version":3,"sources":["angular-pure-datepicker.js"],"names":["angular","module","run","$templateCache","put","apd","directive","DayOfWeek","name","short","this","DaysOfWeek","days","_this","getListOfShorts","result","i","list","length","dayOfWeek","push","getListOfNames","getDayOfWeekShortName","dayNum","shorts","getDayOfWeekName","names","daysOfWeek","DateUtilsFactory","MessagesFactory","restrict","replace","templateUrl","scope","ngModel","apdStart","apdEnd","apdDayId","apdMonthId","apdYearId","apdDayClasses","apdMonthClasses","apdYearClasses","link","init","initDateModel","getDateModel","startDateTime","endDateTime","data","getData","selected","isInitialized","startWatchDay","$watch","day","oldValue","datetime","getDateTime","month","year","reloadSelectedDay","throwInvalidParamsMessage","Date","getTime","date","daysInSelectedMonth","getDaysInMonth","getMonth","getFullYear","getDay","messages","MessagesFactoryClass","invalidParams","invalidDateModel","throwDeveloperError","message","console","error","prototype","throwModelValidationMessage","field","factory","dateUtils","DateModelClass","getDate","timezone","getTimezoneOffset","DataClass","_getSelected","isBiggerThenStart","isEqualToStart","isLowerThenEnd","isEqualToEnd","_getDefaultDaysList","daysCount","_getIntArr","_getDefaultMonthList","_getArrayOfNumbers","_getDefaultYearsList","yearsCount","curYear","direction","_intArraySort","arr","desc","a","b","sort","start","end","_getFullYear","_getMonth","_getDay","_getNumList","timeFunc","callback","concat","getDaysNumberArr","self","years","bind","call","exports","validateModel","model","isValidModel"],"mappings":"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","file":"angular-pure-datepicker.min.js","sourcesContent":["angular.module(\"angular-pd.templates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"apd.html\",\"<div class=apd_root><select ng-model=data.selected.day ng-options=\\\"day for day in data.days\\\" ng-init=\\\"data.selected.day = data.days[0]\\\" id={{::apdDayId}} class=\\\"apd_elem apd_select_day apd_select {{::apdDayClasses}}\\\"></select><span title={{getDayOfWeekName(data.selected.dayOfWeek)}} ng-bind=getDayOfWeekShortName(data.selected.dayOfWeek) class=\\\"apd_elem apd_day_of_week\\\"></span><select ng-model=data.selected.month ng-options=\\\"(month + 1) for month in data.month\\\" ng-init=\\\"data.selected.month = data.month[0]\\\" id={{::apdMonthId}} class=\\\"apd_elem apd_select_month apd_select {{::apdMonthClasses}}\\\"></select><select ng-model=data.selected.year ng-options=\\\"year for year in data.years\\\" ng-init=\\\"data.selected.year = data.years[0]\\\" id={{::apdYearId}} class=\\\"apd_elem apd_select_year apd_select {{::apdYearClasses}}\\\"></select></div>\");}]);\n//module apd.main {\n//    'use strict';\nangular.module('angular-pd', [\n    'angular-pd.datepicker',\n    'angular-pd.date_utils',\n    'angular-pd.messages'\n]);\n//} \n\n/// <reference path=\"main.ts\" />\n//TODO (S.Panfilov)  is this references necessary?\nvar apd;\n(function (apd) {\n    var directive;\n    (function (directive) {\n        'use strict';\n        var DayOfWeek = (function () {\n            function DayOfWeek(name, short) {\n                this.name = name;\n                this.short = short;\n            }\n            return DayOfWeek;\n        })();\n        var DaysOfWeek = (function () {\n            function DaysOfWeek(days) {\n                var _this = this;\n                this.getListOfShorts = function () {\n                    var result = [];\n                    for (var i = 0; i < _this.list.length; i++) {\n                        var dayOfWeek = _this.list[i];\n                        result.push(dayOfWeek.short);\n                    }\n                    return result;\n                };\n                this.getListOfNames = function () {\n                    var result = [];\n                    for (var i = 0; i < _this.list.length; i++) {\n                        var dayOfWeek = _this.list[i];\n                        result.push(dayOfWeek.name);\n                    }\n                    return result;\n                };\n                this.getDayOfWeekShortName = function (dayNum) {\n                    return _this.shorts[dayNum];\n                };\n                this.getDayOfWeekName = function (dayNum) {\n                    return _this.names[dayNum];\n                };\n                this.list = days;\n                this.shorts = this.getListOfShorts();\n                this.names = this.getListOfNames();\n            }\n            return DaysOfWeek;\n        })();\n        var daysOfWeek = new DaysOfWeek([\n            new DayOfWeek('Sunday', 'Sun'),\n            new DayOfWeek('Monday', 'Mon'),\n            new DayOfWeek('Tuesday', 'Tue'),\n            new DayOfWeek('Wednesday', 'Wed'),\n            new DayOfWeek('Thursday', 'Thu'),\n            new DayOfWeek('Friday', 'Fri'),\n            new DayOfWeek('Saturday', 'Sat')\n        ]);\n        angular.module('angular-pd.datepicker', [\n            'angular-pd.templates'\n        ]).directive('pureDatepicker', ['DateUtilsFactory', 'MessagesFactory', function (DateUtilsFactory, MessagesFactory) {\n            return {\n                restrict: 'E',\n                replace: true,\n                templateUrl: 'apd.html',\n                scope: {\n                    ngModel: '=',\n                    apdStart: '=?',\n                    apdEnd: '=?',\n                    apdDayId: '@?',\n                    apdMonthId: '@?',\n                    apdYearId: '@?',\n                    apdDayClasses: '@?',\n                    apdMonthClasses: '@?',\n                    apdYearClasses: '@?'\n                },\n                link: function (scope) {\n                    var isInitialized = false;\n                    var isReInitializing = false;\n                    function init() {\n                        var initDateModel = DateUtilsFactory.getDateModel(scope.ngModel);\n                        var startDateTime = (scope.apdStart) ? +scope.apdStart : null;\n                        var endDateTime = (scope.apdEnd) ? +scope.apdEnd : null;\n                        scope.data = DateUtilsFactory.getData(initDateModel, startDateTime, endDateTime);\n                        scope.ngModel = scope.data.selected;\n                        isInitialized = true;\n                        startWatchDay();\n                    }\n                    init();\n                    //scope.$watch('ngModel.datetime', function (value, oldValue) {\n                    //    if (isInitialized && (value === oldValue)) {\n                    //        return;\n                    //    }\n                    //    init();\n                    //}, true);\n                    //\n                    function startWatchDay() {\n                        scope.$watch('data.selected.day', function (day, oldValue) {\n                            if (!day)\n                                return;\n                            if (day === oldValue)\n                                return;\n                            var datetime = getDateTime(scope.data.selected.day, scope.data.selected.month, scope.data.selected.year);\n                            reloadSelectedDay(datetime);\n                        });\n                    }\n                    function startWatchMonth() {\n                        scope.$watch('data.selected.month', function (month, oldValue) {\n                            if (!month && month !== 0)\n                                return;\n                            if (month === oldValue)\n                                return;\n                            var datetime = getDateTime(scope.data.selected.day, scope.data.selected.month, scope.data.selected.year);\n                            reloadDaysCount(scope.data.selected.datetime);\n                            reloadSelectedDay(scope.data.selected.datetime);\n                        });\n                    }\n                    function getDateTime(day, month, year) {\n                        if (!day || (!month && month !== 0) || !year) {\n                            MessagesFactory.throwInvalidParamsMessage();\n                        }\n                        return new Date(year, month, day).getTime();\n                    }\n                    //\n                    //\n                    //scope.$watch('data.selected.year', function (year) {\n                    //    if (!year && !isReInitializing) return;\n                    //    reloadDaysCount(scope.data.selected.datetime);\n                    //    reloadSelectedDay(scope.data.selected.datetime);\n                    //});\n                    function reloadDaysCount(datetime) {\n                        if (!datetime && datetime !== 0) {\n                            MessagesFactory.throwInvalidParamsMessage();\n                            return false;\n                        }\n                        var date = new Date(datetime);\n                        scope.data.days = scope.data.getDaysNumberArr(date.getMonth(), date.getFullYear());\n                    }\n                    function reloadSelectedDay(datetime) {\n                        if (!datetime && datetime !== 0) {\n                            MessagesFactory.throwInvalidParamsMessage();\n                            return false;\n                        }\n                        var date = new Date(datetime);\n                        var daysInSelectedMonth = scope.data.getDaysInMonth(date.getMonth(), date.getFullYear());\n                        if (scope.data.selected.day > daysInSelectedMonth) {\n                            scope.data.selected.day = daysInSelectedMonth;\n                        }\n                        scope.data.selected.dayOfWeek = date.getDay();\n                        scope.data.selected.datetime = date.getTime();\n                    }\n                    scope.getDayOfWeekShortName = daysOfWeek.getDayOfWeekShortName;\n                    scope.getDayOfWeekName = daysOfWeek.getDayOfWeekName;\n                }\n            };\n        }]);\n    })(directive = apd.directive || (apd.directive = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var messages;\n    (function (messages) {\n        'use strict';\n        var MessagesFactoryClass = (function () {\n            function MessagesFactoryClass() {\n                this.messages = {\n                    invalidParams: 'Invalid params',\n                    invalidDateModel: 'Invalid date model'\n                };\n                this.throwDeveloperError = function (message) {\n                    console.error(message);\n                };\n            }\n            MessagesFactoryClass.prototype.throwModelValidationMessage = function (field) {\n                //TODO (S.Panfilov) possibly problems with this\n                this.throwDeveloperError(this.messages.invalidDateModel + ': error on field \\\"' + field + '+\\\"');\n            };\n            MessagesFactoryClass.prototype.throwInvalidParamsMessage = function () {\n                //TODO (S.Panfilov) possibly problems with this\n                this.throwDeveloperError(this.messages.invalidParams);\n            };\n            return MessagesFactoryClass;\n        })();\n        angular.module('angular-pd.messages', []).factory('MessagesFactory', function () {\n            return new MessagesFactoryClass();\n        });\n    })(messages = apd.messages || (apd.messages = {}));\n})(apd || (apd = {}));\n\n/// <reference path=\"messages.ts\" />\nvar apd;\n(function (apd) {\n    var dateUtils;\n    (function (dateUtils) {\n        'use strict';\n        var DateModelClass = (function () {\n            function DateModelClass(datetime) {\n                var date = new Date();\n                this.day = date.getDate();\n                this.dayOfWeek = date.getDay();\n                this.month = date.getMonth();\n                this.year = date.getFullYear();\n                this.datetime = datetime;\n                this.timezone = date.getTimezoneOffset();\n            }\n            return DateModelClass;\n        })();\n        var DataClass = (function () {\n            function DataClass(selected, startDateTime, endDateTime) {\n                var _this = this;\n                this._getSelected = function (selected, startDateTime, endDateTime) {\n                    var result;\n                    var isBiggerThenStart = (selected.datetime > startDateTime);\n                    var isEqualToStart = (selected.datetime === startDateTime);\n                    var isLowerThenEnd = (selected.datetime > endDateTime);\n                    var isEqualToEnd = (selected.datetime === endDateTime);\n                    //start == 1; selected == 1 or 2 or 3; end == 3;\n                    if ((isBiggerThenStart || isEqualToStart) && (isLowerThenEnd || isEqualToEnd)) {\n                        result = new DateModelClass(selected.datetime);\n                    }\n                    else \n                    //start == 1; selected == 0\n                    if (!isBiggerThenStart) {\n                        result = new DateModelClass(startDateTime);\n                    }\n                    //selected == 4; end == 3;\n                    if (!isBiggerThenStart) {\n                        result = new DateModelClass(endDateTime);\n                    }\n                    else {\n                        result = new DateModelClass(new Date().getTime());\n                    }\n                    return result;\n                };\n                this._getDefaultDaysList = function (month, year) {\n                    var daysCount = this.getDaysInMonth(month, year);\n                    return this._getIntArr(daysCount);\n                };\n                this._getDefaultMonthList = function () {\n                    return this._getArrayOfNumbers(0, 11);\n                };\n                this._getDefaultYearsList = function () {\n                    var yearsCount = 20;\n                    var curYear = new Date().getFullYear();\n                    var direction = 'desc';\n                    return this._intArraySort(this._getArrayOfNumbers(curYear - (yearsCount - 1), curYear), direction);\n                };\n                this._intArraySort = function (arr, direction) {\n                    if (direction === void 0) { direction = 'asc'; }\n                    function desc(a, b) {\n                        return b - a;\n                    }\n                    switch (direction) {\n                        default:\n                            return arr.sort(function (a, b) {\n                                return a - b;\n                            });\n                        case \"desc\":\n                            return arr.sort(desc);\n                    }\n                };\n                this._getArrayOfNumbers = function (start, end) {\n                    var result = [];\n                    for (var i = start; i <= end; i++) {\n                        result.push(i);\n                    }\n                    return result;\n                };\n                this._getFullYear = function (date) {\n                    return date.getFullYear();\n                };\n                this._getMonth = function (date) {\n                    return date.getMonth();\n                };\n                this._getDay = function (date) {\n                    return date.getDate();\n                };\n                //TODO (S.Panfilov) not any, but functions types\n                this._getNumList = function (startDateTime, endDateTime, timeFunc, callback) {\n                    var result = [];\n                    var start;\n                    var end;\n                    //start = 2011, end = 2014\n                    if ((startDateTime && endDateTime) && (startDateTime < endDateTime)) {\n                        start = timeFunc(new Date(startDateTime));\n                        end = timeFunc(new Date(endDateTime));\n                        result = this._getArrayOfNumbers(start, end);\n                    }\n                    else if ((startDateTime && endDateTime) && (startDateTime > endDateTime)) {\n                        start = timeFunc(new Date(endDateTime));\n                        end = timeFunc(new Date(startDateTime));\n                        //TODO (S.Panfilov) throw warning here, that dates inverted\n                        //apd.messages.MessagesFactoryClass.throwMessage('asdsadasd');\n                        result = this._getArrayOfNumbers(start, end);\n                    }\n                    else if ((startDateTime && endDateTime) && (startDateTime === endDateTime)) {\n                        start = timeFunc(new Date(startDateTime));\n                        result = this._getArrayOfNumbers(start, start);\n                    }\n                    else if (startDateTime && !endDateTime) {\n                        start = timeFunc(new Date(startDateTime));\n                        result = this._getArrayOfNumbers(start, start);\n                    }\n                    else if (!startDateTime && endDateTime) {\n                        end = timeFunc(new Date(endDateTime));\n                        result = this._getArrayOfNumbers(end, end);\n                    }\n                    else if (!startDateTime && !endDateTime) {\n                        if (callback)\n                            return callback(timeFunc);\n                    }\n                    return result;\n                };\n                this._getIntArr = function (length) {\n                    if (!length && length !== 0) {\n                        //apd.messages.MessagesFactoryClass.throwInvalidParamsMessage();\n                        return false;\n                    }\n                    return length ? this._getIntArr(length - 1).concat(length) : [];\n                };\n                this.getDaysNumberArr = function (month, year) {\n                    if ((!month && month !== 0) || !year) {\n                        //apd.messages.MessagesFactoryClass.throwInvalidParamsMessage();\n                        return false;\n                    }\n                    return _this._getIntArr(_this.getDaysInMonth(month, year));\n                };\n                this.getDaysInMonth = function (month, year) {\n                    return new Date(year, month + 1, 0).getDate();\n                };\n                var self = this;\n                self.years = self._getNumList(startDateTime, endDateTime, self._getFullYear, self._getDefaultYearsList.bind(self));\n                self.month = self._getNumList(startDateTime, endDateTime, self._getMonth, self._getDefaultMonthList.bind(self));\n                self.selected = self._getSelected(selected, startDateTime, endDateTime);\n                self.days = self._getNumList(startDateTime, endDateTime, self._getDay, function () {\n                    return self._getDefaultDaysList.call(self, self.selected.month, self.selected.year);\n                });\n            }\n            return DataClass;\n        })();\n        angular.module('angular-pd.date_utils', []).factory('DateUtilsFactory', function () {\n            function preserveModelValues(model) {\n                for (var value in model) {\n                    if (model.hasOwnProperty(value)) {\n                        model[value] = +model[value];\n                    }\n                }\n                return model;\n            }\n            var exports = {\n                getData: function (selected, startDateTime, endDateTime) {\n                    return new DataClass(selected, startDateTime, endDateTime);\n                },\n                validateModel: function (model) {\n                    return (model && model.datetime);\n                },\n                getDateModel: function (model) {\n                    var isValidModel = exports.validateModel(model);\n                    if (isValidModel) {\n                        return new DateModelClass(model.datetime);\n                    }\n                    else {\n                        return new DateModelClass(new Date().getTime());\n                    }\n                }\n            };\n            return exports;\n        });\n    })(dateUtils = apd.dateUtils || (apd.dateUtils = {}));\n})(apd || (apd = {}));\n"],"sourceRoot":"/source/"}