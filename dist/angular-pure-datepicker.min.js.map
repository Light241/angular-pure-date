{"version":3,"sources":["angular-pure-datepicker.js"],"names":["angular","module","run","$templateCache","put","constant","invalidParams","apd","directive","DateModelClass","day","dayOfWeek","month","year","datetime","timezone","this","DataClass","selected","days","years","DayOfWeek","name","short","DaysOfWeek","_this","getListOfShorts","result","i","list","length","push","getListOfNames","getDayOfWeekShortName","dayNum","shorts","getDayOfWeekName","names","daysOfWeek","MESSAGES","restrict","replace","templateUrl","scope","ngModel","apdDayId","apdMonthId","apdYearId","apdDayClasses","apdMonthClasses","apdYearClasses","link","preserveModelValues","model","value","hasOwnProperty","getDefaultSelectedDate","isValidModel","validateModel","date","Date","getDate","getMonth","getFullYear","dateTime","getTime","getDay","getTimezoneOffset","getDefaultYearsList","getDaysInMonth","getDaysCount","console","error","getIntArr","concat","reloadDaysCount","data","reloadSelectedDay","daysInSelectedMonth","log","selectedDate","$watch","dateUtils","DateModelFieldClass","allowZero","isZeroAllowed","modelFieldsClass","factory","_validateField","fieldName","isZero","modelFields","mandatory","common","exports","field","isVald","throwModelValidationMessage"],"mappings":"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","file":"angular-pure-datepicker.min.js","sourcesContent":["angular.module(\"angular-pd.templates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"apd.html\",\"<div class=apd_root><select ng-model=data.selected.day ng-options=\\\"day for day in data.days\\\" ng-init=\\\"data.selected.day = data.days[0]\\\" id={{::apdDayId}} class=\\\"apd_elem apd_select_day apd_select {{::apdDayClasses}}\\\"></select><span title={{getDayOfWeekName(data.selected.dayOfWeek)}} ng-bind=getDayOfWeekShortName(data.selected.dayOfWeek) class=\\\"apd_elem apd_day_of_week\\\"></span><select ng-model=data.selected.month ng-options=\\\"(month + 1) for month in data.month\\\" ng-init=\\\"data.selected.month = data.month[0]\\\" id={{::apdMonthId}} class=\\\"apd_elem apd_select_month apd_select {{::apdMonthClasses}}\\\"></select><select ng-model=data.selected.year ng-options=\\\"year for year in data.years\\\" ng-init=\\\"data.selected.year = data.years[0]\\\" id={{::apdYearId}} class=\\\"apd_elem apd_select_year apd_select {{::apdYearClasses}}\\\"></select></div>\");}]);\n//module apd.main {\n//    'use strict';\nangular.module('angular-pd', [\n    'angular-pd.datepicker',\n    'angular-pd.date_utils'\n]).constant('MESSAGES', {\n    invalidParams: 'Invalid params'\n});\n//} \n\n/// <reference path=\"main.ts\" />\n//TODO (S.Panfilov)  is this references necessary?\nvar apd;\n(function (apd) {\n    var directive;\n    (function (directive) {\n        'use strict';\n        var DateModelClass = (function () {\n            function DateModelClass(day, dayOfWeek, month, year, datetime, timezone) {\n                this.day = day;\n                this.dayOfWeek = dayOfWeek;\n                this.month = month;\n                this.year = year;\n                this.datetime = datetime;\n                this.timezone = timezone;\n            }\n            return DateModelClass;\n        })();\n        var DataClass = (function () {\n            function DataClass(selected, days, years) {\n                this.selected = selected;\n                this.days = days;\n                this.month = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n                this.years = years;\n            }\n            return DataClass;\n        })();\n        var DayOfWeek = (function () {\n            function DayOfWeek(name, short) {\n                this.name = name;\n                this.short = short;\n            }\n            return DayOfWeek;\n        })();\n        var DaysOfWeek = (function () {\n            function DaysOfWeek(days) {\n                var _this = this;\n                this.getListOfShorts = function () {\n                    var result = [];\n                    for (var i = 0; i < _this.list.length; i++) {\n                        var dayOfWeek = _this.list[i];\n                        result.push(dayOfWeek.short);\n                    }\n                    return result;\n                };\n                this.getListOfNames = function () {\n                    var result = [];\n                    for (var i = 0; i < _this.list.length; i++) {\n                        var dayOfWeek = _this.list[i];\n                        result.push(dayOfWeek.name);\n                    }\n                    return result;\n                };\n                this.getDayOfWeekShortName = function (dayNum) {\n                    return _this.shorts[dayNum];\n                };\n                this.getDayOfWeekName = function (dayNum) {\n                    return _this.names[dayNum];\n                };\n                this.list = days;\n                this.shorts = this.getListOfShorts();\n                this.names = this.getListOfNames();\n            }\n            return DaysOfWeek;\n        })();\n        var daysOfWeek = new DaysOfWeek([\n            new DayOfWeek('Sunday', 'Sun'),\n            new DayOfWeek('Monday', 'Mon'),\n            new DayOfWeek('Tuesday', 'Tue'),\n            new DayOfWeek('Wednesday', 'Wed'),\n            new DayOfWeek('Thursday', 'Thu'),\n            new DayOfWeek('Friday', 'Fri'),\n            new DayOfWeek('Saturday', 'Sat')\n        ]);\n        angular.module('angular-pd.datepicker', [\n            'angular-pd.templates'\n        ]).directive('pureDatepicker', ['MESSAGES', function (MESSAGES) {\n            return {\n                restrict: 'E',\n                replace: true,\n                templateUrl: 'apd.html',\n                scope: {\n                    ngModel: '=',\n                    apdDayId: '@?',\n                    apdMonthId: '@?',\n                    apdYearId: '@?',\n                    apdDayClasses: '@?',\n                    apdMonthClasses: '@?',\n                    apdYearClasses: '@?'\n                },\n                link: function (scope) {\n                    console.log(scope.ngModel);\n                    var selectedDate = getDefaultSelectedDate();\n                    var years = getDefaultYearsList();\n                    var days = getDaysCount(selectedDate.month, selectedDate.year);\n                    scope.data = new DataClass(selectedDate, days, years);\n                    var _messages = {\n                        invalidParams: 'Invalid params',\n                        invalidDateModel: 'Invalid date model'\n                    };\n                    function throwDeveloperError(message) {\n                        console.error(message);\n                    }\n                    function throwModelValidationMessage(field) {\n                        throwDeveloperError(_messages.invalidDateModel + ': error on field \\\"' + field + \"+\\\"\");\n                    }\n                    function preserveModelValues(model) {\n                        for (var value in model) {\n                            if (model.hasOwnProperty(value)) {\n                                model[value] = +model[value];\n                            }\n                        }\n                        return model;\n                    }\n                    function getDefaultSelectedDate() {\n                        var isValidModel = validateModel(scope.ngModel);\n                        if (isValidModel) {\n                            return preserveModelValues(scope.ngModel);\n                        }\n                        else {\n                            var date = new Date();\n                            var day = date.getDate();\n                            var month = date.getMonth();\n                            var year = date.getFullYear();\n                            var dateTime = date.getTime();\n                            var dayOfWeek = date.getDay();\n                            var timezone = date.getTimezoneOffset();\n                            return new DateModelClass(day, dayOfWeek, month, year, dateTime, timezone);\n                        }\n                    }\n                    function getDefaultYearsList() {\n                        //TODO (S.Panfilov) fix for case with date limits\n                        return [\n                            (new Date()).getFullYear() - 3,\n                            (new Date()).getFullYear() - 2,\n                            (new Date()).getFullYear() - 1,\n                            (new Date()).getFullYear()\n                        ];\n                    }\n                    function getDaysInMonth(month, year) {\n                        return new Date(year, month + 1, 0).getDate();\n                    }\n                    function getDaysCount(month, year) {\n                        if ((!month && month !== 0) || !year)\n                            return console.error(MESSAGES.invalidParams);\n                        return getIntArr(getDaysInMonth(month, year));\n                    }\n                    scope.$watch('data.selected.day', function (day) {\n                        if (!day)\n                            return;\n                        reloadSelectedDay(scope.data.selected.year, scope.data.selected.month, scope.data.selected.day);\n                    });\n                    scope.$watch('data.selected.month', function (month) {\n                        if (!month && month !== 0)\n                            return;\n                        reloadDaysCount(scope.data.selected.month, scope.data.selected.year);\n                        reloadSelectedDay(scope.data.selected.year, scope.data.selected.month, scope.data.selected.day);\n                    });\n                    scope.$watch('data.selected.year', function (year) {\n                        //TODO (S.Panfilov) may be we should watch also timezone and datetime - those fields may be changed externally\n                        if (!year)\n                            return;\n                        reloadDaysCount(scope.data.selected.month, scope.data.selected.year);\n                        reloadSelectedDay(scope.data.selected.year, scope.data.selected.month, scope.data.selected.day);\n                    });\n                    function getIntArr(length) {\n                        if (!length && length !== 0)\n                            return console.error(MESSAGES.invalidParams);\n                        return length ? getIntArr(length - 1).concat(length) : [];\n                    }\n                    function reloadDaysCount(month, year) {\n                        if ((!month && month !== 0) || !year)\n                            return console.error(MESSAGES.invalidParams);\n                        scope.data.days = getDaysCount(month, year);\n                    }\n                    function reloadSelectedDay(year, month, day) {\n                        if (!year || (!month && month !== 0) || !day)\n                            return console.error(MESSAGES.invalidParams);\n                        var date = new Date(year, month, day);\n                        var daysInSelectedMonth = getDaysInMonth(month, year);\n                        if (scope.data.selected.day > daysInSelectedMonth) {\n                            scope.data.selected.day = daysInSelectedMonth;\n                        }\n                        scope.data.selected.dayOfWeek = date.getDay();\n                        scope.data.selected.datetime = date.getTime() * 1000;\n                    }\n                    scope.getDayOfWeekShortName = daysOfWeek.getDayOfWeekShortName;\n                    scope.getDayOfWeekName = daysOfWeek.getDayOfWeekName;\n                    (function init() {\n                    })();\n                }\n            };\n        }]);\n    })(directive = apd.directive || (apd.directive = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var dateUtils;\n    (function (dateUtils) {\n        'use strict';\n        var DateModelFieldClass = (function () {\n            function DateModelFieldClass(name, allowZero) {\n                this.name = name;\n                this.isZeroAllowed = allowZero;\n            }\n            return DateModelFieldClass;\n        })();\n        var modelFieldsClass = (function () {\n            function modelFieldsClass() {\n            }\n            return modelFieldsClass;\n        })();\n        angular.module('angular-pd.date_utils', []).factory('DateUtils', function () {\n            var modelFields = {\n                mandatory: [\n                    {\n                        day: new DateModelFieldClass('day', false),\n                        month: new DateModelFieldClass('month', true),\n                        year: new DateModelFieldClass('year', false)\n                    },\n                    {\n                        timezone: new DateModelFieldClass('timezone', true)\n                    }\n                ],\n                common: {\n                    dayOfWeek: new DateModelFieldClass('dayOfWeek', true),\n                    datetime: new DateModelFieldClass('datetime', true)\n                }\n            };\n            function _validateField(model, fieldName, isZeroAllowed) {\n                var isZero = (model[fieldName] === 0);\n                if (isZero && !isZeroAllowed) {\n                    return false;\n                }\n                if (!model[fieldName]) {\n                    return false;\n                }\n                return true;\n            }\n            var exports = {\n                validateModel: function (model) {\n                    //TODO (S.Panfilov) not all fields should be mandatory.\n                    //TODO (S.Panfilov) we may need only day month and year\n                    //TODO (S.Panfilov) or a dateTime\n                    for (var i = 0; i < modelFields.mandatory.length; i++) {\n                        var field = modelFields.mandatory[i];\n                        var isVald = _validateField(model, field.name, field.isZeroAllowed);\n                        if (!isVald) {\n                            throwModelValidationMessage(field.name);\n                            return false;\n                        }\n                    }\n                    return true;\n                }\n            };\n            return exports;\n        });\n    })(dateUtils = apd.dateUtils || (apd.dateUtils = {}));\n})(apd || (apd = {}));\n"],"sourceRoot":"/source/"}