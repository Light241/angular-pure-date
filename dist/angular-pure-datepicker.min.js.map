{"version":3,"sources":["angular-pure-datepicker.js"],"names":["angular","module","run","$templateCache","put","apd","directive","DayOfWeek","name","short","this","DaysOfWeek","days","_this","getListOfShorts","result","i","list","length","dayOfWeek","push","getListOfNames","getDayOfWeekShortName","dayNum","shorts","getDayOfWeekName","names","daysOfWeek","DateUtilsFactory","MessagesFactory","restrict","replace","templateUrl","scope","ngModel","apdStart","apdEnd","apdDayId","apdMonthId","apdYearId","apdDayClasses","apdMonthClasses","apdYearClasses","link","reloadDaysCount","month","year","throwInvalidParamsMessage","data","getDaysNumberArr","reloadSelectedDay","day","date","Date","daysInSelectedMonth","getDaysInMonth","selected","getDay","datetime","getTime","initDate","getInitDate","startDateTime","endDateTime","createData","$watch","messages","MessagesFactoryClass","throwModelValidationMessage","field","throwDeveloperError","invalidDateModel","invalidParams","message","console","error","factory","dateUtils","DateModelClass","timezone","DateModelValidatorClass","config","isFieldExist","model","fieldName","validator","isZero","isZeroAllowed","isValid","hasOwnProperty","isRequired","isFieldValid","DateModelFieldClass","DateModelValidatorConfigClass","object","DataClass","_getArrayOfNumbers","start","end","_getFullYear","getFullYear","_getMonth","getMonth","_getNumList","timeFunc","now","nowDateTime","_getIntArr","concat","getDate","years","allowZero","preserveModelValues","value","dateModelValidatorConfig","dateModelValidator","exports","validateModel","isValidModel","dateTime","getTimezoneOffset"],"mappings":"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","file":"angular-pure-datepicker.min.js","sourcesContent":["angular.module(\"angular-pd.templates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"apd.html\",\"<div class=apd_root><select ng-model=data.selected.day ng-options=\\\"day for day in data.days\\\" ng-init=\\\"data.selected.day = data.days[0]\\\" id={{::apdDayId}} class=\\\"apd_elem apd_select_day apd_select {{::apdDayClasses}}\\\"></select><span title={{getDayOfWeekName(data.selected.dayOfWeek)}} ng-bind=getDayOfWeekShortName(data.selected.dayOfWeek) class=\\\"apd_elem apd_day_of_week\\\"></span><select ng-model=data.selected.month ng-options=\\\"(month + 1) for month in data.month\\\" ng-init=\\\"data.selected.month = data.month[0]\\\" id={{::apdMonthId}} class=\\\"apd_elem apd_select_month apd_select {{::apdMonthClasses}}\\\"></select><select ng-model=data.selected.year ng-options=\\\"year for year in data.years\\\" ng-init=\\\"data.selected.year = data.years[0]\\\" id={{::apdYearId}} class=\\\"apd_elem apd_select_year apd_select {{::apdYearClasses}}\\\"></select></div>\");}]);\n//module apd.main {\n//    'use strict';\nangular.module('angular-pd', [\n    'angular-pd.datepicker',\n    'angular-pd.date_utils',\n    'angular-pd.messages'\n]);\n//} \n\n/// <reference path=\"main.ts\" />\n//TODO (S.Panfilov)  is this references necessary?\nvar apd;\n(function (apd) {\n    var directive;\n    (function (directive) {\n        'use strict';\n        var DayOfWeek = (function () {\n            function DayOfWeek(name, short) {\n                this.name = name;\n                this.short = short;\n            }\n            return DayOfWeek;\n        })();\n        var DaysOfWeek = (function () {\n            function DaysOfWeek(days) {\n                var _this = this;\n                this.getListOfShorts = function () {\n                    var result = [];\n                    for (var i = 0; i < _this.list.length; i++) {\n                        var dayOfWeek = _this.list[i];\n                        result.push(dayOfWeek.short);\n                    }\n                    return result;\n                };\n                this.getListOfNames = function () {\n                    var result = [];\n                    for (var i = 0; i < _this.list.length; i++) {\n                        var dayOfWeek = _this.list[i];\n                        result.push(dayOfWeek.name);\n                    }\n                    return result;\n                };\n                this.getDayOfWeekShortName = function (dayNum) {\n                    return _this.shorts[dayNum];\n                };\n                this.getDayOfWeekName = function (dayNum) {\n                    return _this.names[dayNum];\n                };\n                this.list = days;\n                this.shorts = this.getListOfShorts();\n                this.names = this.getListOfNames();\n            }\n            return DaysOfWeek;\n        })();\n        var daysOfWeek = new DaysOfWeek([\n            new DayOfWeek('Sunday', 'Sun'),\n            new DayOfWeek('Monday', 'Mon'),\n            new DayOfWeek('Tuesday', 'Tue'),\n            new DayOfWeek('Wednesday', 'Wed'),\n            new DayOfWeek('Thursday', 'Thu'),\n            new DayOfWeek('Friday', 'Fri'),\n            new DayOfWeek('Saturday', 'Sat')\n        ]);\n        angular.module('angular-pd.datepicker', [\n            'angular-pd.templates'\n        ]).directive('pureDatepicker', ['DateUtilsFactory', 'MessagesFactory', function (DateUtilsFactory, MessagesFactory) {\n            return {\n                restrict: 'E',\n                replace: true,\n                templateUrl: 'apd.html',\n                scope: {\n                    ngModel: '=',\n                    apdStart: '=?',\n                    apdEnd: '=?',\n                    apdDayId: '@?',\n                    apdMonthId: '@?',\n                    apdYearId: '@?',\n                    apdDayClasses: '@?',\n                    apdMonthClasses: '@?',\n                    apdYearClasses: '@?'\n                },\n                link: function (scope) {\n                    var initDate = DateUtilsFactory.getInitDate(scope.ngModel);\n                    var startDateTime = (scope.apdStart) ? +scope.apdStart : null;\n                    var endDateTime = (scope.apdEnd) ? +scope.apdEnd : null;\n                    scope.data = DateUtilsFactory.createData(initDate, startDateTime, endDateTime);\n                    scope.ngModel = scope.data.selected;\n                    scope.$watch('data.selected.day', function (day) {\n                        if (!day)\n                            return;\n                        reloadSelectedDay(scope.data.selected.year, scope.data.selected.month, scope.data.selected.day);\n                    });\n                    scope.$watch('data.selected.month', function (month) {\n                        if (!month && month !== 0)\n                            return;\n                        reloadDaysCount(scope.data.selected.month, scope.data.selected.year);\n                        reloadSelectedDay(scope.data.selected.year, scope.data.selected.month, scope.data.selected.day);\n                    });\n                    scope.$watch('data.selected.year', function (year) {\n                        //TODO (S.Panfilov) may be we should watch also timezone and datetime - those fields may be changed externally\n                        if (!year)\n                            return;\n                        reloadDaysCount(scope.data.selected.month, scope.data.selected.year);\n                        reloadSelectedDay(scope.data.selected.year, scope.data.selected.month, scope.data.selected.day);\n                    });\n                    function reloadDaysCount(month, year) {\n                        if ((!month && month !== 0) || !year) {\n                            MessagesFactory.throwInvalidParamsMessage();\n                            return false;\n                        }\n                        scope.data.days = scope.data.getDaysNumberArr(month, year);\n                    }\n                    function reloadSelectedDay(year, month, day) {\n                        if (!year || (!month && month !== 0) || !day) {\n                            MessagesFactory.throwInvalidParamsMessage();\n                            return false;\n                        }\n                        var date = new Date(year, month, day);\n                        var daysInSelectedMonth = scope.data.getDaysInMonth(month, year);\n                        if (scope.data.selected.day > daysInSelectedMonth) {\n                            scope.data.selected.day = daysInSelectedMonth;\n                        }\n                        scope.data.selected.dayOfWeek = date.getDay();\n                        scope.data.selected.datetime = date.getTime() * 1000;\n                    }\n                    scope.getDayOfWeekShortName = daysOfWeek.getDayOfWeekShortName;\n                    scope.getDayOfWeekName = daysOfWeek.getDayOfWeekName;\n                }\n            };\n        }]);\n    })(directive = apd.directive || (apd.directive = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var messages;\n    (function (messages) {\n        'use strict';\n        var MessagesFactoryClass = (function () {\n            function MessagesFactoryClass() {\n            }\n            MessagesFactoryClass.throwModelValidationMessage = function (field) {\n                //TODO (S.Panfilov) possibly problems with this\n                this.throwDeveloperError(this.messages.invalidDateModel + ': error on field \\\"' + field + '+\\\"');\n            };\n            MessagesFactoryClass.throwInvalidParamsMessage = function () {\n                //TODO (S.Panfilov) possibly problems with this\n                this.throwDeveloperError(this.messages.invalidParams);\n            };\n            MessagesFactoryClass.messages = {\n                invalidParams: 'Invalid params',\n                invalidDateModel: 'Invalid date model'\n            };\n            MessagesFactoryClass.throwDeveloperError = function (message) {\n                console.error(message);\n            };\n            return MessagesFactoryClass;\n        })();\n        angular.module('angular-pd.messages', []).factory('MessagesFactory', function () {\n            return new MessagesFactoryClass();\n        });\n    })(messages = apd.messages || (apd.messages = {}));\n})(apd || (apd = {}));\n\n/// <reference path=\"messages.ts\" />\nvar apd;\n(function (apd) {\n    var dateUtils;\n    (function (dateUtils) {\n        'use strict';\n        var DateModelClass = (function () {\n            function DateModelClass(day, dayOfWeek, month, year, datetime, timezone) {\n                this.day = day;\n                this.dayOfWeek = dayOfWeek;\n                this.month = month;\n                this.year = year;\n                this.datetime = datetime;\n                this.timezone = timezone;\n            }\n            return DateModelClass;\n        })();\n        var DateModelValidatorClass = (function () {\n            function DateModelValidatorClass(config) {\n                var _this = this;\n                this.isFieldExist = function (model, fieldName) {\n                    var validator = _this;\n                    var isZero = (model[fieldName] === 0);\n                    var isZeroAllowed = validator[fieldName].isZeroAllowed;\n                    if (isZero && !isZeroAllowed) {\n                        return false;\n                    }\n                    if (!model[fieldName]) {\n                        return false;\n                    }\n                    return true;\n                };\n                this.isValid = function (model) {\n                    var validator = _this;\n                    for (var fieldName in validator) {\n                        if (validator.hasOwnProperty(fieldName)) {\n                            if (validator[fieldName].isRequired) {\n                                var isFieldValid = validator.isFieldExist(model, fieldName);\n                                if (!isFieldValid) {\n                                    return false;\n                                }\n                            }\n                        }\n                    }\n                };\n                this.day = new DateModelFieldClass(config.day.name, config.day.isZeroAllowed, config.day.isRequired);\n                this.dayOfWeek = new DateModelFieldClass(config.dayOfWeek.name, config.dayOfWeek.isZeroAllowed, config.dayOfWeek.isRequired);\n                this.month = new DateModelFieldClass(config.month.name, config.month.isZeroAllowed, config.month.isRequired);\n                this.year = new DateModelFieldClass(config.year.name, config.year.isZeroAllowed, config.year.isRequired);\n                this.datetime = new DateModelFieldClass(config.datetime.name, config.datetime.isZeroAllowed, config.datetime.isRequired);\n                this.timezone = new DateModelFieldClass(config.timezone.name, config.timezone.isZeroAllowed, config.timezone.isRequired);\n            }\n            return DateModelValidatorClass;\n        })();\n        var DateModelValidatorConfigClass = (function () {\n            //TODO (S.Panfilov) any?\n            function DateModelValidatorConfigClass(object) {\n                this.day = object.day;\n                this.dayOfWeek = object.dayOfWeek;\n                this.month = object.month;\n                this.year = object.year;\n                this.datetime = object.datetime;\n                this.timezone = object.timezone;\n            }\n            return DateModelValidatorConfigClass;\n        })();\n        var DataClass = (function () {\n            function DataClass(selected, startDateTime, endDateTime) {\n                var _this = this;\n                this._getArrayOfNumbers = function (start, end) {\n                    var result = [];\n                    for (var i = start; i <= end; i++) {\n                        result.push(i);\n                    }\n                    return result;\n                };\n                this._getFullYear = function (date) {\n                    return date.getFullYear();\n                };\n                this._getMonth = function (date) {\n                    return date.getMonth();\n                };\n                this._getNumList = function (startDateTime, endDateTime, timeFunc) {\n                    var result = [];\n                    var nowDateTime = new Date().getTime();\n                    var now;\n                    var start;\n                    var end;\n                    //start = 2011, end = 2014\n                    if ((startDateTime && endDateTime) && (startDateTime < endDateTime)) {\n                        start = timeFunc(new Date(startDateTime));\n                        end = timeFunc(new Date(endDateTime));\n                        result = this._getArrayOfNumbers(start, end);\n                    }\n                    else if ((startDateTime && endDateTime) && (startDateTime > endDateTime)) {\n                        start = timeFunc(new Date(endDateTime));\n                        end = timeFunc(new Date(startDateTime));\n                        //TODO (S.Panfilov) throw warning here, that dates inverted\n                        //apd.messages.MessagesFactoryClass.throwMessage('asdsadasd');\n                        result = this._getArrayOfNumbers(start, end);\n                    }\n                    else if ((startDateTime && endDateTime) && (startDateTime === endDateTime)) {\n                        start = timeFunc(new Date(startDateTime));\n                        result = this._getArrayOfNumbers(start, start);\n                    }\n                    else if (startDateTime && !endDateTime) {\n                        start = timeFunc(new Date(startDateTime));\n                        result = this._getArrayOfNumbers(start, start);\n                    }\n                    else if (!startDateTime && endDateTime) {\n                        end = timeFunc(new Date(endDateTime));\n                        result = this._getArrayOfNumbers(end, end);\n                    }\n                    else if (!startDateTime && !endDateTime) {\n                        now = timeFunc(new Date(nowDateTime));\n                        result = this._getArrayOfNumbers(now, now);\n                    }\n                    return result;\n                };\n                this._getIntArr = function (length) {\n                    if (!length && length !== 0) {\n                        //apd.messages.MessagesFactoryClass.throwInvalidParamsMessage();\n                        return false;\n                    }\n                    return length ? this._getIntArr(length - 1).concat(length) : [];\n                };\n                this.getDaysNumberArr = function (month, year) {\n                    if ((!month && month !== 0) || !year) {\n                        //apd.messages.MessagesFactoryClass.throwInvalidParamsMessage();\n                        return false;\n                    }\n                    return _this._getIntArr(_this.getDaysInMonth(month, year));\n                };\n                this.getDaysInMonth = function (month, year) {\n                    return new Date(year, month + 1, 0).getDate();\n                };\n                this.selected = selected;\n                this.days = this.getDaysNumberArr(this.selected.month, this.selected.year);\n                this.month = this._getNumList(startDateTime, endDateTime, this._getMonth);\n                this.years = this._getNumList(startDateTime, endDateTime, this._getFullYear);\n            }\n            return DataClass;\n        })();\n        var DateModelFieldClass = (function () {\n            function DateModelFieldClass(name, allowZero, isRequired) {\n                this.name = name;\n                this.isZeroAllowed = allowZero;\n                this.isRequired = isRequired;\n            }\n            return DateModelFieldClass;\n        })();\n        angular.module('angular-pd.date_utils', []).factory('DateUtilsFactory', ['MessagesFactory', function (MessagesFactory) {\n            var dateModelValidatorConfig = new DateModelValidatorConfigClass({\n                day: { name: 'day', isZeroAllowed: false, isRequired: false },\n                dayOfWeek: { name: 'day', isZeroAllowed: false, isRequired: false },\n                month: { name: 'day', isZeroAllowed: true, isRequired: false },\n                year: { name: 'day', isZeroAllowed: false, isRequired: false },\n                datetime: { name: 'day', isZeroAllowed: true, isRequired: true },\n                timezone: { name: 'day', isZeroAllowed: true, isRequired: false }\n            });\n            var dateModelValidator = new DateModelValidatorClass(dateModelValidatorConfig);\n            function preserveModelValues(model) {\n                for (var value in model) {\n                    if (model.hasOwnProperty(value)) {\n                        model[value] = +model[value];\n                    }\n                }\n                return model;\n            }\n            var exports = {\n                createData: function (selected, startDateTime, endDateTime) {\n                    return new DataClass(selected, startDateTime, endDateTime);\n                },\n                validateModel: function (model) {\n                    return dateModelValidator.isValid(model);\n                },\n                getInitDate: function (model) {\n                    var isValidModel = exports.validateModel(model);\n                    if (isValidModel) {\n                        return preserveModelValues(model);\n                    }\n                    else {\n                        var date = new Date();\n                        var day = date.getDate();\n                        var month = date.getMonth();\n                        var year = date.getFullYear();\n                        var dateTime = date.getTime();\n                        var dayOfWeek = date.getDay();\n                        var timezone = date.getTimezoneOffset();\n                        return new DateModelClass(day, dayOfWeek, month, year, dateTime, timezone);\n                    }\n                }\n            };\n            return exports;\n        }]);\n    })(dateUtils = apd.dateUtils || (apd.dateUtils = {}));\n})(apd || (apd = {}));\n"],"sourceRoot":"/source/"}