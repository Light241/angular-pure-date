{"version":3,"sources":["angular-pure-datepicker.js"],"names":["angular","module","run","$templateCache","put","apd","Model","DataClass","selected","startDateTime","endDateTime","yearsListDirection","monthListDirection","daysListDirection","this","_getSelected","result","isBiggerThenStart","datetime","isEqualToStart","isLowerThenEnd","isEqualToEnd","DateModelClass","Date","getTime","_intArraySort","arr","direction","desc","a","b","sort","_getArrayOfNumbers","start","end","i","push","reloadYearsList","years","_getYearsList","_startDateTime","_endDateTime","_limitDates","MessagesFactoryClass","throwWrongInstanceMessage","limitDates","DEFAULT_YEARS_COUNT","startDate","year","endDate","now","nowDate","throwDatesInvertedMessage","reloadMonthList","selectedYear","getFullYear","month","_getMonthList","START_MONTH","END_MONTH","isYearOfLowerLimit","isYearOfUpperLimit","reloadDaysList","selectedMonth","getMonth","days","_getDaysList","START_DAY","lastDayInMonth","getDaysInMonth","isMonthOfLowerLimit","isMonthOfUpperLimit","isLowerLimit","isUpperLimit","day","_getIntArr","length","concat","throwInvalidParamsMessage","getDate","throwWrongClassCreationMessage","self","LimitDatesClass","DayOfWeek","name","short","DaysOfWeek","_this","getListOfShorts","list","dayOfWeek","getListOfNames","getDayOfWeekShortName","dayNum","shorts","getDayOfWeekName","names","date","getDay","timezone","getTimezoneOffset","validate","model","messages","wrongClassCreation","wrongInstance","invalidParams","invalidDateModel","datesInverted","throwDeveloperError","message","console","error","throwModelValidationMessage","field","factory","directive","daysOfWeek","MessagesFactory","restrict","replace","templateUrl","scope","ngModel","apdStart","apdEnd","apdDayId","apdMonthId","apdYearId","apdDayClasses","apdMonthClasses","apdYearClasses","link","getInitDateModel","initDatetime","isInitModelValid","_initData","initDateModel","data","getLimitSafeDatetime","isDayInMonth","getDateTime","isDateBetweenLimits","settings","isDateUpperStartLimit","isDateLowerEndLimit","updateModel","ngModelWatcher","stop","onModelChange","oldValue","daysInMonth","handler","callback","$watch","value","onDaySelectChanged","onMonthSelectChanged","onYearSelectChanged","_setStartDate","_setEndDate","_setNowDate","startLimitTime","endLimitTime"],"mappings":"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","file":"angular-pure-datepicker.min.js","sourcesContent":["angular.module(\"angular-pd.templates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"apd.html\",\"<div class=apd_root><select ng-model=data.selected.day ng-options=\\\"day for day in data.days\\\" ng-init=\\\"data.selected.day = data.days[0]\\\" ng-change=onDaySelectChanged(data.selected.day) id={{::apdDayId}} class=\\\"apd_elem apd_select_day apd_select {{::apdDayClasses}}\\\"></select><span title={{getDayOfWeekName(data.selected.dayOfWeek)}} ng-bind=getDayOfWeekShortName(data.selected.dayOfWeek) class=\\\"apd_elem apd_day_of_week\\\"></span><select ng-model=data.selected.month ng-options=\\\"(month + 1) for month in data.month\\\" ng-init=\\\"data.selected.month = data.month[0]\\\" ng-change=onMonthSelectChanged(data.selected.month) id={{::apdMonthId}} class=\\\"apd_elem apd_select_month apd_select {{::apdMonthClasses}}\\\"></select><select ng-model=data.selected.year ng-options=\\\"year for year in data.years\\\" ng-init=\\\"data.selected.year = data.years[0]\\\" ng-change=onYearSelectChanged(data.selected.year) id={{::apdYearId}} class=\\\"apd_elem apd_select_year apd_select {{::apdYearClasses}}\\\"></select></div>\");}]);\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var DataClass = (function () {\n            function DataClass(selected, startDateTime, endDateTime, yearsListDirection, monthListDirection, daysListDirection) {\n                this.yearsListDirection = 'desc';\n                this.monthListDirection = 'asc';\n                this.daysListDirection = 'asc';\n                this._getSelected = function (selected, startDateTime, endDateTime) {\n                    var result;\n                    var isBiggerThenStart = (selected.datetime > startDateTime);\n                    var isEqualToStart = (selected.datetime === startDateTime);\n                    var isLowerThenEnd = (selected.datetime > endDateTime);\n                    var isEqualToEnd = (selected.datetime === endDateTime);\n                    if ((isBiggerThenStart || isEqualToStart) && (isLowerThenEnd || isEqualToEnd)) {\n                        result = new Model.DateModelClass(selected.datetime);\n                    }\n                    else if (!isBiggerThenStart) {\n                        result = new Model.DateModelClass(startDateTime);\n                    }\n                    if (!isBiggerThenStart) {\n                        result = new Model.DateModelClass(endDateTime);\n                    }\n                    else {\n                        result = new Model.DateModelClass(new Date().getTime());\n                    }\n                    return result;\n                };\n                this._intArraySort = function (arr, direction) {\n                    if (direction === void 0) { direction = 'asc'; }\n                    function desc(a, b) {\n                        return b - a;\n                    }\n                    switch (direction) {\n                        default:\n                            return arr.sort(function (a, b) {\n                                return a - b;\n                            });\n                        case \"desc\":\n                            return arr.sort(desc);\n                    }\n                };\n                this._getArrayOfNumbers = function (start, end) {\n                    var result = [];\n                    for (var i = start; i <= end; i++) {\n                        result.push(i);\n                    }\n                    return result;\n                };\n                this.reloadYearsList = function () {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    this.years = this._getYearsList(this._startDateTime, this._endDateTime, this._limitDates, this.yearsListDirection);\n                    return this;\n                };\n                this._getYearsList = function (startDateTime, endDateTime, limitDates, direction) {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    var result = [];\n                    var DEFAULT_YEARS_COUNT = 20;\n                    var start = limitDates.startDate.year;\n                    var end = limitDates.endDate.year;\n                    var now = limitDates.nowDate.year;\n                    if ((startDateTime && endDateTime) && (startDateTime < endDateTime)) {\n                        result = this._getArrayOfNumbers(start, end);\n                    }\n                    else if ((startDateTime && endDateTime) && (startDateTime > endDateTime)) {\n                        apd.Model.MessagesFactoryClass.throwDatesInvertedMessage();\n                        result = this._getArrayOfNumbers(end, start);\n                    }\n                    else if ((startDateTime && endDateTime) && (startDateTime === endDateTime)) {\n                        result = this._getArrayOfNumbers(start, end);\n                    }\n                    else if (startDateTime && !endDateTime) {\n                        result = this._getArrayOfNumbers(start, now);\n                    }\n                    else if (!startDateTime && endDateTime) {\n                        if (limitDates.endDate.year >= limitDates.nowDate.year) {\n                            if ((now - DEFAULT_YEARS_COUNT) > (end - DEFAULT_YEARS_COUNT)) {\n                                result = this._getArrayOfNumbers(now, end);\n                            }\n                            else {\n                                result = this._getArrayOfNumbers(end - (DEFAULT_YEARS_COUNT - 1), end);\n                            }\n                        }\n                        else if (limitDates.endDate.year > limitDates.nowDate.year) {\n                            result = this._getArrayOfNumbers(end - (DEFAULT_YEARS_COUNT - 1), end);\n                        }\n                    }\n                    else if (!startDateTime && !endDateTime) {\n                        result = this._getArrayOfNumbers(now - (DEFAULT_YEARS_COUNT - 1), now);\n                    }\n                    return this._intArraySort(result, direction);\n                };\n                this.reloadMonthList = function () {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    var selectedYear = new Date(this.selected.datetime).getFullYear();\n                    this.month = this._getMonthList(this._startDateTime, this._endDateTime, this._limitDates, selectedYear, this.monthListDirection);\n                    return this;\n                };\n                this._getMonthList = function (startDateTime, endDateTime, limitDates, selectedYear, direction) {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    var result;\n                    var START_MONTH = 0;\n                    var END_MONTH = 11;\n                    if (startDateTime || endDateTime) {\n                        var isYearOfLowerLimit = (startDateTime) ? limitDates.startDate.year === selectedYear : false;\n                        var isYearOfUpperLimit = (endDateTime) ? limitDates.endDate.year === selectedYear : false;\n                        var start = (startDateTime) ? limitDates.startDate.month : START_MONTH;\n                        var end = (endDateTime) ? limitDates.endDate.month : END_MONTH;\n                        if (isYearOfLowerLimit && isYearOfUpperLimit) {\n                            result = this._getArrayOfNumbers(start, end);\n                        }\n                        else if (isYearOfLowerLimit && !isYearOfUpperLimit) {\n                            result = this._getArrayOfNumbers(start, END_MONTH);\n                        }\n                        else if (!isYearOfLowerLimit && isYearOfUpperLimit) {\n                            result = this._getArrayOfNumbers(START_MONTH, end);\n                        }\n                        else {\n                            result = this._getArrayOfNumbers(START_MONTH, END_MONTH);\n                        }\n                    }\n                    else {\n                        result = this._getArrayOfNumbers(START_MONTH, END_MONTH);\n                    }\n                    return this._intArraySort(result, direction);\n                };\n                this.reloadDaysList = function () {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    var selectedYear = new Date(this.selected.datetime).getFullYear();\n                    var selectedMonth = new Date(this.selected.datetime).getMonth();\n                    this.days = this._getDaysList(this._startDateTime, this._endDateTime, this._limitDates, selectedYear, selectedMonth, this.daysListDirection);\n                    return this;\n                };\n                this._getDaysList = function (startDateTime, endDateTime, limitDates, selectedYear, selectedMonth, direction) {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    var result;\n                    var START_DAY = 1;\n                    var lastDayInMonth = this.getDaysInMonth(selectedMonth, selectedYear);\n                    if (startDateTime || endDateTime) {\n                        var isYearOfLowerLimit = (startDateTime) ? limitDates.startDate.year === selectedYear : false;\n                        var isYearOfUpperLimit = (endDateTime) ? limitDates.endDate.year === selectedYear : false;\n                        var isMonthOfLowerLimit = (startDateTime) ? limitDates.startDate.month === selectedMonth : false;\n                        var isMonthOfUpperLimit = (endDateTime) ? limitDates.endDate.month === selectedMonth : false;\n                        var isLowerLimit = (isYearOfLowerLimit && isMonthOfLowerLimit);\n                        var isUpperLimit = (isYearOfUpperLimit && isMonthOfUpperLimit);\n                        var start = (startDateTime) ? limitDates.startDate.day : START_DAY;\n                        var end = (endDateTime) ? limitDates.endDate.day : lastDayInMonth;\n                        if (isLowerLimit && isUpperLimit) {\n                            result = this._getArrayOfNumbers(start, end);\n                        }\n                        else if (isLowerLimit && !isUpperLimit) {\n                            result = this._getArrayOfNumbers(start, lastDayInMonth);\n                        }\n                        else if (!isLowerLimit && isUpperLimit) {\n                            result = this._getArrayOfNumbers(START_DAY, end);\n                        }\n                        else {\n                            result = this._getArrayOfNumbers(START_DAY, lastDayInMonth);\n                        }\n                    }\n                    else {\n                        result = this._getArrayOfNumbers(START_DAY, lastDayInMonth);\n                    }\n                    return this._intArraySort(result, direction);\n                };\n                this._getIntArr = function (length) {\n                    if (!(this instanceof DataClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    if (!length && length !== 0) {\n                        apd.Model.MessagesFactoryClass.throwInvalidParamsMessage();\n                        return null;\n                    }\n                    return length ? this._getIntArr(length - 1).concat(length) : [];\n                };\n                this.getDaysInMonth = function (month, year) {\n                    return new Date(year, month + 1, 0).getDate();\n                };\n                if (!(this instanceof DataClass)) {\n                    apd.Model.MessagesFactoryClass.throwWrongClassCreationMessage();\n                    return new DataClass(selected, startDateTime, endDateTime, yearsListDirection, monthListDirection, daysListDirection);\n                }\n                var self = this;\n                self.selected = self._getSelected(selected, startDateTime, endDateTime);\n                var selectedYear = new Date(this.selected.datetime).getFullYear();\n                var selectedMonth = new Date(this.selected.datetime).getMonth();\n                self.yearsListDirection = yearsListDirection || self.yearsListDirection;\n                self.monthListDirection = monthListDirection || self.monthListDirection;\n                self.daysListDirection = daysListDirection || self.daysListDirection;\n                self._limitDates = new Model.LimitDatesClass(startDateTime, endDateTime);\n                self._startDateTime = startDateTime;\n                self._endDateTime = endDateTime;\n                self.years = self._getYearsList(startDateTime, endDateTime, self._limitDates, self.yearsListDirection);\n                self.month = self._getMonthList(startDateTime, endDateTime, self._limitDates, selectedYear, self.monthListDirection);\n                self.days = self._getDaysList(startDateTime, endDateTime, self._limitDates, selectedYear, selectedMonth, self.daysListDirection);\n                return this;\n            }\n            return DataClass;\n        })();\n        Model.DataClass = DataClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var DayOfWeek = (function () {\n            function DayOfWeek(name, short) {\n                if (!(this instanceof DayOfWeek)) {\n                    apd.Model.MessagesFactoryClass.throwWrongClassCreationMessage();\n                    return new DayOfWeek(name, short);\n                }\n                this.name = name;\n                this.short = short;\n                return this;\n            }\n            return DayOfWeek;\n        })();\n        Model.DayOfWeek = DayOfWeek;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var DaysOfWeek = (function () {\n            function DaysOfWeek(days) {\n                var _this = this;\n                this.getListOfShorts = function () {\n                    if (!(_this instanceof DaysOfWeek)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    var result = [];\n                    for (var i = 0; i < _this.list.length; i++) {\n                        var dayOfWeek = _this.list[i];\n                        result.push(dayOfWeek.short);\n                    }\n                    return result;\n                };\n                this.getListOfNames = function () {\n                    if (!(_this instanceof DaysOfWeek)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    var result = [];\n                    for (var i = 0; i < _this.list.length; i++) {\n                        var dayOfWeek = _this.list[i];\n                        result.push(dayOfWeek.name);\n                    }\n                    return result;\n                };\n                this.getDayOfWeekShortName = function (dayNum) {\n                    if (!(_this instanceof DaysOfWeek)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    return _this.shorts[dayNum];\n                };\n                this.getDayOfWeekName = function (dayNum) {\n                    if (!(_this instanceof DaysOfWeek)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return null;\n                    }\n                    return _this.names[dayNum];\n                };\n                if (!(this instanceof DaysOfWeek)) {\n                    apd.Model.MessagesFactoryClass.throwWrongClassCreationMessage();\n                    return new DaysOfWeek(days);\n                }\n                this.list = days;\n                this.shorts = this.getListOfShorts();\n                this.names = this.getListOfNames();\n                return this;\n            }\n            return DaysOfWeek;\n        })();\n        Model.DaysOfWeek = DaysOfWeek;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var DateModelClass = (function () {\n            function DateModelClass(datetime) {\n                if (!(this instanceof DateModelClass)) {\n                    apd.Model.MessagesFactoryClass.throwWrongClassCreationMessage();\n                    return new DateModelClass(datetime);\n                }\n                var date = new Date(datetime);\n                this.day = date.getDate();\n                this.dayOfWeek = date.getDay();\n                this.month = date.getMonth();\n                this.year = date.getFullYear();\n                this.datetime = datetime;\n                this.timezone = date.getTimezoneOffset();\n                return this;\n            }\n            DateModelClass.validate = function (model) {\n                return !!(model && model.datetime);\n            };\n            return DateModelClass;\n        })();\n        Model.DateModelClass = DateModelClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var MessagesFactoryClass = (function () {\n            function MessagesFactoryClass() {\n                this.messages = {\n                    wrongClassCreation: 'Class created without \\'new\\', wrong \\'this\\'',\n                    wrongInstance: 'Wrong \\'this\\' instance',\n                    invalidParams: 'Invalid params',\n                    invalidDateModel: 'Invalid date model',\n                    datesInverted: 'Warning! Start date > End date'\n                };\n            }\n            MessagesFactoryClass.throwDeveloperError = function (message) {\n                console.error(message);\n            };\n            MessagesFactoryClass.throwModelValidationMessage = function (field) {\n                if (!(this instanceof MessagesFactoryClass)) {\n                    console.error('Wrong \\'this\\' instance');\n                    return false;\n                }\n                this.throwDeveloperError(this.messages.invalidDateModel + ': error on field \\\"' + field + '+\\\"');\n            };\n            MessagesFactoryClass.throwInvalidParamsMessage = function () {\n                if (!(this instanceof MessagesFactoryClass)) {\n                    console.error('Wrong \\'this\\' instance');\n                    return false;\n                }\n                this.throwDeveloperError(this.messages.invalidParams);\n            };\n            MessagesFactoryClass.throwWrongClassCreationMessage = function () {\n                if (!(this instanceof MessagesFactoryClass)) {\n                    console.error('Wrong \\'this\\' instance');\n                    return false;\n                }\n                this.throwDeveloperError(this.messages.wrongClassCreation);\n            };\n            MessagesFactoryClass.throwWrongInstanceMessage = function () {\n                if (!(this instanceof MessagesFactoryClass)) {\n                    console.error('Wrong \\'this\\' instance');\n                    return false;\n                }\n                this.throwDeveloperError(this.messages.wrongInstance);\n            };\n            MessagesFactoryClass.throwDatesInvertedMessage = function () {\n                if (!(this instanceof MessagesFactoryClass)) {\n                    console.error('Wrong \\'this\\' instance');\n                    return false;\n                }\n                this.throwDeveloperError(this.messages.datesInverted);\n            };\n            return MessagesFactoryClass;\n        })();\n        Model.MessagesFactoryClass = MessagesFactoryClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var messages;\n    (function (messages) {\n        'use strict';\n        angular.module('angular-pd.messages', []).factory('MessagesFactory', function () {\n            return new apd.Model.MessagesFactoryClass();\n        });\n    })(messages = apd.messages || (apd.messages = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var directive;\n    (function (directive) {\n        'use strict';\n        var daysOfWeek = new apd.Model.DaysOfWeek([\n            new apd.Model.DayOfWeek('Sunday', 'Sun'),\n            new apd.Model.DayOfWeek('Monday', 'Mon'),\n            new apd.Model.DayOfWeek('Tuesday', 'Tue'),\n            new apd.Model.DayOfWeek('Wednesday', 'Wed'),\n            new apd.Model.DayOfWeek('Thursday', 'Thu'),\n            new apd.Model.DayOfWeek('Friday', 'Fri'),\n            new apd.Model.DayOfWeek('Saturday', 'Sat')\n        ]);\n        angular.module('angular-pd', [\n            'angular-pd.templates',\n            'angular-pd.messages'\n        ]).directive('pureDatepicker', ['MessagesFactory', function (MessagesFactory) {\n            return {\n                restrict: 'E',\n                replace: true,\n                templateUrl: 'apd.html',\n                scope: {\n                    ngModel: '=',\n                    apdStart: '=?',\n                    apdEnd: '=?',\n                    apdDayId: '@?',\n                    apdMonthId: '@?',\n                    apdYearId: '@?',\n                    apdDayClasses: '@?',\n                    apdMonthClasses: '@?',\n                    apdYearClasses: '@?'\n                },\n                link: function (scope) {\n                    var settings = {\n                        initDateModel: null,\n                        startDateTime: null,\n                        endDateTime: null\n                    };\n                    var ngModelWatcher = {\n                        handler: null,\n                        start: function (callback) {\n                            ngModelWatcher.handler = scope.$watch('ngModel.datetime', function (value, oldValue) {\n                                if (callback) {\n                                    callback(value, oldValue);\n                                }\n                            }, true);\n                        },\n                        stop: function () {\n                            if (!ngModelWatcher.handler) {\n                                MessagesFactory.throwInvalidParamsMessage();\n                                return false;\n                            }\n                            ngModelWatcher.handler();\n                            return true;\n                        }\n                    };\n                    function getInitDateModel(model) {\n                        var isInitModelValid = apd.Model.DateModelClass.validate(model);\n                        var initDatetime;\n                        if (isInitModelValid) {\n                            initDatetime = model.datetime;\n                        }\n                        else {\n                            initDatetime = new Date().getTime();\n                        }\n                        return new apd.Model.DateModelClass(initDatetime);\n                    }\n                    function _initData(initDateModel, startDateTime, endDateTime) {\n                        scope.data = new apd.Model.DataClass(initDateModel, startDateTime, endDateTime);\n                        scope.ngModel = scope.data.selected;\n                    }\n                    function getLimitSafeDatetime(day, month, year) {\n                        if (!isDayInMonth(day, month, year)) {\n                            day = scope.data.getDaysInMonth(month, year);\n                        }\n                        var datetime = getDateTime(day, month, year);\n                        if (!apd.Model.LimitDatesClass.isDateBetweenLimits(datetime, settings.startDateTime, settings.endDateTime)) {\n                            if (!apd.Model.LimitDatesClass.isDateUpperStartLimit(datetime, settings.startDateTime)) {\n                                datetime = settings.startDateTime;\n                            }\n                            else if (!apd.Model.LimitDatesClass.isDateLowerEndLimit(datetime, settings.endDateTime)) {\n                                datetime = settings.endDateTime;\n                            }\n                        }\n                        return datetime;\n                    }\n                    function updateModel(datetime) {\n                        ngModelWatcher.stop();\n                        scope.data.selected = new apd.Model.DateModelClass(datetime);\n                        scope.ngModel = scope.data.selected;\n                        ngModelWatcher.start(onModelChange);\n                    }\n                    function onModelChange(datetime, oldValue) {\n                        if (datetime === oldValue) {\n                            return;\n                        }\n                        var date = new Date(datetime);\n                        var day = date.getDate();\n                        var month = date.getMonth();\n                        var year = date.getFullYear();\n                        datetime = getLimitSafeDatetime(day, month, year);\n                        updateModel(datetime);\n                        scope.data.reloadYearsList();\n                        scope.data.reloadMonthList();\n                        scope.data.reloadDaysList();\n                    }\n                    scope.onDaySelectChanged = function (day) {\n                        if (!day)\n                            return;\n                        var datetime = getLimitSafeDatetime(scope.data.selected.day, scope.data.selected.month, scope.data.selected.year);\n                        updateModel(datetime);\n                    };\n                    scope.onMonthSelectChanged = function (month) {\n                        if (!month && month !== 0)\n                            return;\n                        var datetime;\n                        var year = scope.data.selected.year;\n                        var day = scope.data.selected.day;\n                        datetime = getLimitSafeDatetime(day, month, year);\n                        updateModel(datetime);\n                        scope.data.reloadDaysList();\n                    };\n                    scope.onYearSelectChanged = function (year) {\n                        if (!year && year !== 0)\n                            return;\n                        var month = scope.data.selected.month;\n                        var day = scope.data.selected.day;\n                        var datetime = getLimitSafeDatetime(day, month, year);\n                        updateModel(datetime);\n                        scope.data.reloadMonthList();\n                        scope.data.reloadDaysList();\n                    };\n                    function getDateTime(day, month, year) {\n                        if (!day || (!month && month !== 0) || !year) {\n                            MessagesFactory.throwInvalidParamsMessage();\n                        }\n                        return new Date(year, month, day).getTime();\n                    }\n                    function isDayInMonth(day, month, year) {\n                        var daysInMonth = scope.data.getDaysInMonth(month, year);\n                        return day <= daysInMonth;\n                    }\n                    (function _init() {\n                        settings.initDateModel = getInitDateModel(scope.ngModel);\n                        settings.startDateTime = (scope.apdStart) ? +scope.apdStart : null;\n                        settings.endDateTime = (scope.apdEnd) ? +scope.apdEnd : null;\n                        _initData(settings.initDateModel, settings.startDateTime, settings.endDateTime);\n                        scope.getDayOfWeekShortName = daysOfWeek.getDayOfWeekShortName;\n                        scope.getDayOfWeekName = daysOfWeek.getDayOfWeekName;\n                        ngModelWatcher.start(onModelChange);\n                    })();\n                }\n            };\n        }]);\n    })(directive = apd.directive || (apd.directive = {}));\n})(apd || (apd = {}));\n\nvar apd;\n(function (apd) {\n    var Model;\n    (function (Model) {\n        'use strict';\n        var LimitDatesClass = (function () {\n            function LimitDatesClass(startDateTime, endDateTime) {\n                this._setStartDate = function (datetime) {\n                    if (!(this instanceof LimitDatesClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return false;\n                    }\n                    this.startDate.day = new Date(datetime).getDate();\n                    this.startDate.month = new Date(datetime).getMonth();\n                    this.startDate.year = new Date(datetime).getFullYear();\n                    this.startDate.datetime = datetime;\n                    return this;\n                };\n                this._setEndDate = function (datetime) {\n                    if (!(this instanceof LimitDatesClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return false;\n                    }\n                    this.endDate.day = new Date(datetime).getDate();\n                    this.endDate.month = new Date(datetime).getMonth();\n                    this.endDate.year = new Date(datetime).getFullYear();\n                    this.endDate.datetime = datetime;\n                    return this;\n                };\n                this._setNowDate = function () {\n                    if (!(this instanceof LimitDatesClass)) {\n                        apd.Model.MessagesFactoryClass.throwWrongInstanceMessage();\n                        return false;\n                    }\n                    this.nowDate.day = new Date().getDate();\n                    this.nowDate.month = new Date().getMonth();\n                    this.nowDate.year = new Date().getFullYear();\n                    this.nowDate.datetime = new Date().getTime();\n                    return this;\n                };\n                if (!(this instanceof LimitDatesClass)) {\n                    apd.Model.MessagesFactoryClass.throwWrongClassCreationMessage();\n                    return new LimitDatesClass(startDateTime, endDateTime);\n                }\n                this.startDate = { day: null, month: null, year: null, datetime: null };\n                this.endDate = { day: null, month: null, year: null, datetime: null };\n                this.nowDate = { day: null, month: null, year: null, datetime: null };\n                this._setStartDate(startDateTime);\n                this._setEndDate(endDateTime);\n                this._setNowDate();\n            }\n            LimitDatesClass.isDateUpperStartLimit = function (datetime, startLimitTime) {\n                if (!startLimitTime)\n                    return true;\n                return (datetime > startLimitTime);\n            };\n            LimitDatesClass.isDateLowerEndLimit = function (datetime, endLimitTime) {\n                if (!endLimitTime)\n                    return true;\n                return (datetime < endLimitTime);\n            };\n            LimitDatesClass.isDateBetweenLimits = function (datetime, startLimitTime, endLimitTime) {\n                return (this.isDateUpperStartLimit(datetime, startLimitTime) && this.isDateLowerEndLimit(datetime, endLimitTime));\n            };\n            return LimitDatesClass;\n        })();\n        Model.LimitDatesClass = LimitDatesClass;\n    })(Model = apd.Model || (apd.Model = {}));\n})(apd || (apd = {}));\n"],"sourceRoot":"/source/"}